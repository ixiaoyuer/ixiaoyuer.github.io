<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小鱼儿</title>
  <icon>https://www.gravatar.com/avatar/ec2f15e365196b5d766a23abc5e3ff2c</icon>
  <subtitle>生活不易,小鱼卖艺</subtitle>
  <link href="https://blog.ydg.icu/atom.xml" rel="self"/>
  
  <link href="https://blog.ydg.icu/"/>
  <updated>2023-02-18T16:00:00.000Z</updated>
  <id>https://blog.ydg.icu/</id>
  
  <author>
    <name>小鱼儿</name>
    <email>ixiaoyuer@foxmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用ChatGPT官网教程</title>
    <link href="https://blog.ydg.icu/2023/02/14/ChatGPT%E6%95%99%E7%A8%8B/"/>
    <id>https://blog.ydg.icu/2023/02/14/ChatGPT%E6%95%99%E7%A8%8B/</id>
    <published>2023-02-13T16:00:00.000Z</published>
    <updated>2023-02-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="24002a658c16339ea73f17deb78418113cfdf2f427340d60686a7ad02fc79d13"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本文包括ChatGPT从使用梯子(VPN)到成功访问的过程,包括手机端和PC端,也有ChatGPT账号的注册教程,可以说是很详细了,但仍然有些许不足</summary>
    
    
    
    <category term="ChatGPT" scheme="https://blog.ydg.icu/categories/ChatGPT/"/>
    
    
    <category term="ChatGPT" scheme="https://blog.ydg.icu/tags/ChatGPT/"/>
    
  </entry>
  
  <entry>
    <title>Vue2基础学习</title>
    <link href="https://blog.ydg.icu/2023/02/08/Vue2%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://blog.ydg.icu/2023/02/08/Vue2%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2023-02-07T16:00:00.000Z</published>
    <updated>2023-02-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>Vue2的基础学习</p><p>点击<a href="https://cn.vuejs.org/">这里</a>进入Vue的官网学习</p><p>本文是基于<a href="https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1&vd_source=73d15d6a3c5824665c87aa3c4b34c7c2">尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通</a>进行学习的,文章的各种资源等来自这里,仅供学习参考!!!</p><p>基本语法也可以参照<a href="https://www.runoob.com/vue2/vue-tutorial.html">菜鸟教程</a></p><p>学习资料获取</p><p>百度网盘</p><p>链接：<a href="https://pan.baidu.com/s/15km4W856ufNV-dgPmRXwtA">https://pan.baidu.com/s/15km4W856ufNV-dgPmRXwtA</a><br>提取码：0814</p></div><h1 id="Vue的认识"><a href="#Vue的认识" class="headerlink" title="Vue的认识"></a>Vue的认识</h1><h2 id="Vue的含义"><a href="#Vue的含义" class="headerlink" title="Vue的含义"></a>Vue的含义</h2><p><strong>Vue</strong> 是一套用来动态<strong>构建用户界面</strong>的<strong>渐进式</strong>JavaScript前端框架</p><ul><li><p><strong>构建用户界面</strong>：把数据通过某种办法变成用户界面</p></li><li><p><strong>渐进式：</strong>Vue可以自底向上逐层的应用，简单应用只需要一个轻量小巧的核心库，复杂应用可以引入各式各样的Vue插件</p></li></ul><h2 id="Vue的特点"><a href="#Vue的特点" class="headerlink" title="Vue的特点"></a>Vue的特点</h2><ul><li><p>采用组件化模式,提高代码复用率、且让代码更好的维护<br><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230208135707556.png" alt="image-20230208135707556"></p></li><li><p>声明式编码，让编码人员无需直接操作DOM，提高开发效率</p></li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230208140722077.png" alt="image-20230208140722077"></p><ul><li>使用虚拟的DOM+优秀的Diff算法，尽量复用DOM节点<br><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230208141459549.png" alt="image-20230208141459549"></li></ul><h1 id="Vue核心"><a href="#Vue核心" class="headerlink" title="Vue核心"></a>Vue核心</h1><p>使用Vue语法前需要引入Vue.js，可以使用CDN的方式引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>也可以使用本地路径引入Vue.js，这则需要从官网下载Vue.js文件到本地才行</p><h2 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h2><ul><li>功能：用于解析标签体内容。</li><li>写法：，xxx是js表达式，且可以直接读取到data中的所有属性。</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230209194606719.png" alt="image-20230209194606719"></p><h2 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h2><ul><li><p>v-bind:</p><ul><li><p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…..）,是单向数据绑定</p></li><li><p>举例：v-bind:href&#x3D;”xxx”或简写为 :href&#x3D;”xxx”，xxx同样要写js表达式，且可以直接读取到data中的所有属性</p></li><li><p>备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子</p></li><li><p>简化：”v-bind:”可以简写为”:”</p></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;模板语法&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h1&gt;插值语法&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;你好，&#123;&#123;name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h1&gt;指令语法&lt;/h1&gt;</span><br><span class="line">&lt;a v-bind:href=&quot;school.url.toUpperCase()&quot; x=&quot;hello&quot;&gt;点我去&#123;&#123;school.name&#125;&#125;学习1&lt;/a&gt;</span><br><span class="line">&lt;a :href=&quot;school.url&quot; x=&quot;hello&quot;&gt;点我去&#123;&#123;school.name&#125;&#125;学习2&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;jack&#x27;,</span><br><span class="line">school:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">url:&#x27;http://www.atguigu.com&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>v-model:<ul><li>Vue中有2种数据绑定的方式：</li><li>单向绑定(v-bind)：数据只能从data流向页面。</li><li>双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。</li><li>备注：双向绑定一般都应用在表单类元素上（如：input、select等）</li><li>v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</li><li>v-model只能应用在表单类元素（输入类元素）上</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;数据绑定&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">单向数据绑定：&lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line">双向数据绑定：&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="line">&lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上 --&gt;</span><br><span class="line">&lt;!-- &lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="el和data的两种写法"><a href="#el和data的两种写法" class="headerlink" title="el和data的两种写法"></a>el和data的两种写法</h2><ul><li><p>el有2种写法</p><ul><li>new Vue时候配置el属性。</li><li>先创建Vue实例，随后再通过vm.$mount(‘#root’)指定el的值。</li></ul></li><li><p>data有2种写法</p><ul><li>对象式</li><li>函数式</li><li>如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</li></ul></li><li><p>一个重要的原则：Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;el与data的两种写法&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h1&gt;你好，&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">//el的两种写法</span><br><span class="line">/* const v = new Vue(&#123;</span><br><span class="line">//el:&#x27;#root&#x27;, //第一种写法</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(v)</span><br><span class="line">v.$mount(&#x27;#root&#x27;) //第二种写法 */</span><br><span class="line"></span><br><span class="line">//data的两种写法</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">//data的第一种写法：对象式</span><br><span class="line">/* data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;</span><br><span class="line">&#125; */</span><br><span class="line"></span><br><span class="line">//data的第二种写法：函数式</span><br><span class="line">data()&#123;</span><br><span class="line">console.log(&#x27;@@@&#x27;,this) //此处的this是Vue实例对象</span><br><span class="line">return&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue中的MVVM模型"><a href="#Vue中的MVVM模型" class="headerlink" title="Vue中的MVVM模型"></a>Vue中的MVVM模型</h2><ul><li>M：模型(Model) ：data中的数据</li><li>V：视图(View) ：模板代码</li><li>VM：视图模型(ViewModel)：Vue实例</li><li>观察发现<ul><li>data中所有的属性，最后都出现在了vm身上。</li><li>vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;理解MVVM&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h1&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;!-- &lt;h1&gt;测试一下1：&#123;&#123;1+1&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试一下2：&#123;&#123;$options&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试一下3：&#123;&#123;$emit&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;测试一下4：&#123;&#123;_c&#125;&#125;&lt;/h1&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(vm)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><ul><li>Vue中的数据代理：通过vm对象来代理data对象中属性的操作（读&#x2F;写）</li><li>Vue中数据代理的好处：更加方便的操作data中的数据</li><li>基本原理：通过Object.defineProperty()把data对象中所有属性添加到vm上。为每一个添加到vm上的属性，都指定一个getter&#x2F;setter。在getter&#x2F;setter内部去操作（读&#x2F;写）data中对应的属性</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230209210544481.png" alt="image-20230209210544481"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;回顾Object.defineproperty方法&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; &gt;</span><br><span class="line">let number = 18</span><br><span class="line">let person = &#123;</span><br><span class="line">name:&#x27;张三&#x27;,</span><br><span class="line">sex:&#x27;男&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(person,&#x27;age&#x27;,&#123;</span><br><span class="line">// value:18,</span><br><span class="line">// enumerable:true, //控制属性是否可以枚举，默认值是false</span><br><span class="line">// writable:true, //控制属性是否可以被修改，默认值是false</span><br><span class="line">// configurable:true //控制属性是否可以被删除，默认值是false</span><br><span class="line"></span><br><span class="line">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span><br><span class="line">get()&#123;</span><br><span class="line">console.log(&#x27;有人读取age属性了&#x27;)</span><br><span class="line">return number</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span><br><span class="line">set(value)&#123;</span><br><span class="line">console.log(&#x27;有人修改了age属性，且值是&#x27;,value)</span><br><span class="line">number = value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// console.log(Object.keys(person))</span><br><span class="line"></span><br><span class="line">console.log(person)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;何为数据代理&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; &gt;</span><br><span class="line">let obj = &#123;x:100&#125;</span><br><span class="line">let obj2 = &#123;y:200&#125;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(obj2,&#x27;x&#x27;,&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">return obj.x</span><br><span class="line">&#125;,</span><br><span class="line">set(value)&#123;</span><br><span class="line">obj.x = value</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Vue中的数据代理&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;宏福科技园&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><ul><li>事件的基本使用：<ul><li>使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名</li><li>事件的回调需要配置在methods对象中，最终会在vm上</li><li>methods中配置的函数，不要用箭头函数！否则this就不是vm了</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象</li><li>@click&#x3D;”demo” 和 @click&#x3D;”demo($event)” 效果一致，但后者可以传参</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;事件的基本使用&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt;</span><br><span class="line">&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt; --&gt;</span><br><span class="line">&lt;button @click=&quot;showInfo1&quot;&gt;点我提示信息1（不传参）&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;showInfo2($event,66)&quot;&gt;点我提示信息2（传参）&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">showInfo1(event)&#123;</span><br><span class="line">// console.log(event.target.innerText)</span><br><span class="line">// console.log(this) //此处的this是vm</span><br><span class="line">alert(&#x27;同学你好！&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">showInfo2(event,number)&#123;</span><br><span class="line">console.log(event,number)</span><br><span class="line">// console.log(event.target.innerText)</span><br><span class="line">// console.log(this) //此处的this是vm</span><br><span class="line">alert(&#x27;同学你好！！&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>事件修饰符<ul><li>prevent：阻止默认事件（常用）</li><li>stop：阻止事件冒泡（常用）</li><li>once：事件只触发一次（常用）</li><li>capture：使用事件的捕获模式</li><li>self：只有event.target是当前操作的元素时才触发事件</li><li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;事件修饰符&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">*&#123;</span><br><span class="line">margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.demo1&#123;</span><br><span class="line">height: 50px;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">.box1&#123;</span><br><span class="line">padding: 5px;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line">padding: 5px;</span><br><span class="line">background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">.list&#123;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 200px;</span><br><span class="line">background-color: peru;</span><br><span class="line">overflow: auto;</span><br><span class="line">&#125;</span><br><span class="line">li&#123;</span><br><span class="line">height: 100px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt;</span><br><span class="line">&lt;!-- 阻止默认事件（常用） --&gt;</span><br><span class="line">&lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 阻止事件冒泡（常用） --&gt;</span><br><span class="line">&lt;div class=&quot;demo1&quot; @click=&quot;showInfo&quot;&gt;</span><br><span class="line">&lt;button @click.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">&lt;!-- 修饰符可以连续写 --&gt;</span><br><span class="line">&lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 事件只触发一次（常用） --&gt;</span><br><span class="line">&lt;button @click.once=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用事件的捕获模式 --&gt;</span><br><span class="line">&lt;div class=&quot;box1&quot; @click.capture=&quot;showMsg(1)&quot;&gt;</span><br><span class="line">div1</span><br><span class="line">&lt;div class=&quot;box2&quot; @click=&quot;showMsg(2)&quot;&gt;</span><br><span class="line">div2</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span><br><span class="line">&lt;div class=&quot;demo1&quot; @click.self=&quot;showInfo&quot;&gt;</span><br><span class="line">&lt;button @click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span><br><span class="line">&lt;ul @wheel.passive=&quot;demo&quot; class=&quot;list&quot;&gt;</span><br><span class="line">&lt;li&gt;1&lt;/li&gt;</span><br><span class="line">&lt;li&gt;2&lt;/li&gt;</span><br><span class="line">&lt;li&gt;3&lt;/li&gt;</span><br><span class="line">&lt;li&gt;4&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">showInfo(e)&#123;</span><br><span class="line">alert(&#x27;同学你好！&#x27;)</span><br><span class="line">// console.log(e.target)</span><br><span class="line">&#125;,</span><br><span class="line">showMsg(msg)&#123;</span><br><span class="line">console.log(msg)</span><br><span class="line">&#125;,</span><br><span class="line">demo()&#123;</span><br><span class="line">for (let i = 0; i &lt; 100000; i++) &#123;</span><br><span class="line">console.log(&#x27;#&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">console.log(&#x27;累坏了&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ul><li>Vue中常用的按键别名：<ul><li>回车 &#x3D;&gt; enter</li><li>删除 &#x3D;&gt; delete (捕获“删除”和“退格”键)</li><li>退出 &#x3D;&gt; esc</li><li>空格 &#x3D;&gt; space</li><li>换行 &#x3D;&gt; tab (特殊，必须配合keydown去使用)</li><li>上 &#x3D;&gt; up</li><li>下 &#x3D;&gt; down</li><li>左 &#x3D;&gt; left</li><li>右 &#x3D;&gt; right</li></ul></li><li>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</li><li>系统修饰键（用法特殊）：ctrl、alt、shift、meta<ul><li>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</li><li>配合keydown使用：正常触发事件。</li></ul></li><li>也可以使用keyCode去指定具体的按键（不推荐）</li><li>Vue.config.keyCodes.自定义键名 &#x3D; 键码，可以去定制按键别名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;键盘事件&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;欢迎来到&#123;&#123;name&#125;&#125;学习&lt;/h2&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;按下回车提示输入&quot; @keydown.huiche=&quot;showInfo&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line">Vue.config.keyCodes.huiche = 13 //定义了一个别名按键</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">showInfo(e)&#123;</span><br><span class="line">// console.log(e.key,e.keyCode)</span><br><span class="line">console.log(e.target.value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h2><ul><li><p>定义：要用的属性不存在，要通过已有属性计算得来</p></li><li><p>原理：底层借助了Objcet.defineproperty方法提供的getter和setter</p></li><li><p>get函数什么时候执行</p></li><li><ul><li>初次读取时会执行一次</li></ul></li><li><p>当依赖的数据发生改变时会被再次调用。</p></li><li><p>优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便</p></li><li><p>备注</p><ul><li>计算属性最终会出现在vm上，直接读取使用即可</li><li>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</li></ul></li><li><p>姓名案例（3个）的不同方法实现对比</p><ul><li><p>插值语法实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;姓名案例_插值语法实现&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">全名：&lt;span&gt;&#123;&#123;firstName&#125;&#125;-&#123;&#123;lastName&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">firstName:&#x27;张&#x27;,</span><br><span class="line">lastName:&#x27;三&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>method实现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;姓名案例_methods实现&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">全名：&lt;span&gt;&#123;&#123;fullName()&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">firstName:&#x27;张&#x27;,</span><br><span class="line">lastName:&#x27;三&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">fullName()&#123;</span><br><span class="line">console.log(&#x27;@---fullName&#x27;)</span><br><span class="line">return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>计算属性属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;姓名案例_计算属性实现&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">测试：&lt;input type=&quot;text&quot; v-model=&quot;x&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;!-- 全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; --&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">firstName:&#x27;张&#x27;,</span><br><span class="line">lastName:&#x27;三&#x27;,</span><br><span class="line">x:&#x27;你好&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">demo()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">fullName:&#123;</span><br><span class="line">//get有什么作用？当有人读取fullName时，get就会被调用，且返回值就作为fullName的值</span><br><span class="line">//get什么时候调用？1.初次读取fullName时。2.所依赖的数据发生变化时。</span><br><span class="line">get()&#123;</span><br><span class="line">console.log(&#x27;get被调用了&#x27;)</span><br><span class="line">// console.log(this) //此处的this是vm</span><br><span class="line">return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">&#125;,</span><br><span class="line">//set什么时候调用? 当fullName被修改时。</span><br><span class="line">set(value)&#123;</span><br><span class="line">console.log(&#x27;set&#x27;,value)</span><br><span class="line">const arr = value.split(&#x27;-&#x27;)</span><br><span class="line">this.firstName = arr[0]</span><br><span class="line">this.lastName = arr[1]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>计算属性简写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;姓名案例_计算属性实现&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">firstName:&#x27;张&#x27;,</span><br><span class="line">lastName:&#x27;三&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">//完整写法</span><br><span class="line">/* fullName:&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">console.log(&#x27;get被调用了&#x27;)</span><br><span class="line">return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">&#125;,</span><br><span class="line">set(value)&#123;</span><br><span class="line">console.log(&#x27;set&#x27;,value)</span><br><span class="line">const arr = value.split(&#x27;-&#x27;)</span><br><span class="line">this.firstName = arr[0]</span><br><span class="line">this.lastName = arr[1]</span><br><span class="line">&#125;</span><br><span class="line">&#125; */</span><br><span class="line">//简写</span><br><span class="line">fullName()&#123;</span><br><span class="line">console.log(&#x27;get被调用了&#x27;)</span><br><span class="line">return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="侦听属性watch"><a href="#侦听属性watch" class="headerlink" title="侦听属性watch"></a>侦听属性watch</h2><ul><li><p>当被监视的属性变化时, 回调函数自动调用, 进行相关操作</p></li><li><p>监视的属性必须存在，才能进行监视！！</p></li><li><p>监视的两种写法</p></li><li><p>new Vue时传入watch配置</p></li><li><p>通过vm.$watch监视</p></li><li><p>天气案例</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;天气案例&lt;/title&gt;</span><br><span class="line">        &lt;!-- 引入Vue --&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;!-- 准备好一个容器--&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">            &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;!-- 绑定事件的时候：@xxx=&quot;yyy&quot; yyy可以写一些简单的语句 --&gt;</span><br><span class="line">            &lt;!-- &lt;button @click=&quot;isHot = !isHot&quot;&gt;切换天气&lt;/button&gt; --&gt;</span><br><span class="line">            &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line">        </span><br><span class="line">        const vm = new Vue(&#123;</span><br><span class="line">            el:&#x27;#root&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                isHot:true,</span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;</span><br><span class="line">                info()&#123;</span><br><span class="line">                    return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                changeWeather()&#123;</span><br><span class="line">                    this.isHot = !this.isHot</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>监视属性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;天气案例_监视属性&lt;/title&gt;</span><br><span class="line">        &lt;!-- 引入Vue --&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;!-- 准备好一个容器--&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">            &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line">        </span><br><span class="line">        const vm = new Vue(&#123;</span><br><span class="line">            el:&#x27;#root&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                isHot:true,</span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;</span><br><span class="line">                info()&#123;</span><br><span class="line">                    return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                changeWeather()&#123;</span><br><span class="line">                    this.isHot = !this.isHot</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            /* watch:&#123;</span><br><span class="line">                isHot:&#123;</span><br><span class="line">                    immediate:true, //初始化时让handler调用一下</span><br><span class="line">                    //handler什么时候调用？当isHot发生改变时。</span><br><span class="line">                    handler(newValue,oldValue)&#123;</span><br><span class="line">                        console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; */</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        vm.$watch(&#x27;isHot&#x27;,&#123;</span><br><span class="line">            immediate:true, //初始化时让handler调用一下</span><br><span class="line">            //handler什么时候调用？当isHot发生改变时。</span><br><span class="line">            handler(newValue,oldValue)&#123;</span><br><span class="line">                console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li><p>深度监视</p><ul><li>Vue中的watch默认不监测对象内部值的改变（一层）。</li><li>配置deep:true可以监测对象内部值改变（多层）。</li><li>备注<ul><li>Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！</li><li>使用watch时根据数据的具体结构，决定是否采用深度监视。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">        &lt;title&gt;天气案例_深度监视&lt;/title&gt;</span><br><span class="line">        &lt;!-- 引入Vue --&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;!-- 准备好一个容器--&gt;</span><br><span class="line">        &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">            &lt;h2&gt;今天天气很&#123;&#123;info&#125;&#125;&lt;/h2&gt;</span><br><span class="line">            &lt;button @click=&quot;changeWeather&quot;&gt;切换天气&lt;/button&gt;</span><br><span class="line">            &lt;hr/&gt;</span><br><span class="line">            &lt;h3&gt;a的值是:&#123;&#123;numbers.a&#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;button @click=&quot;numbers.a++&quot;&gt;点我让a+1&lt;/button&gt;</span><br><span class="line">            &lt;h3&gt;b的值是:&#123;&#123;numbers.b&#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;button @click=&quot;numbers.b++&quot;&gt;点我让b+1&lt;/button&gt;</span><br><span class="line">            &lt;button @click=&quot;numbers = &#123;a:666,b:888&#125;&quot;&gt;彻底替换掉numbers&lt;/button&gt;</span><br><span class="line">            &#123;&#123;numbers.c.d.e&#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line">        </span><br><span class="line">        const vm = new Vue(&#123;</span><br><span class="line">            el:&#x27;#root&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                isHot:true,</span><br><span class="line">                numbers:&#123;</span><br><span class="line">                    a:1,</span><br><span class="line">                    b:1,</span><br><span class="line">                    c:&#123;</span><br><span class="line">                        d:&#123;</span><br><span class="line">                            e:100</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            computed:&#123;</span><br><span class="line">                info()&#123;</span><br><span class="line">                    return this.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                changeWeather()&#123;</span><br><span class="line">                    this.isHot = !this.isHot</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            watch:&#123;</span><br><span class="line">                isHot:&#123;</span><br><span class="line">                    // immediate:true, //初始化时让handler调用一下</span><br><span class="line">                    //handler什么时候调用？当isHot发生改变时。</span><br><span class="line">                    handler(newValue,oldValue)&#123;</span><br><span class="line">                        console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                //监视多级结构中某个属性的变化</span><br><span class="line">                /* &#x27;numbers.a&#x27;:&#123;</span><br><span class="line">                    handler()&#123;</span><br><span class="line">                        console.log(&#x27;a被改变了&#x27;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; */</span><br><span class="line">                //监视多级结构中所有属性的变化</span><br><span class="line">                numbers:&#123;</span><br><span class="line">                    deep:true,</span><br><span class="line">                    handler()&#123;</span><br><span class="line">                        console.log(&#x27;numbers改变了&#x27;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>姓名案例-Watch实现</p><ul><li>computed和watch之间的区别<ul><li>computed能完成的功能，watch都可以完成</li><li>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作</li></ul></li><li>两个重要的小原则<ul><li>所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象</li><li>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成箭头函数，这样this的指向才是vm 或 组件实例对象</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;姓名案例_watch实现&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">firstName:&#x27;张&#x27;,</span><br><span class="line">lastName:&#x27;三&#x27;,</span><br><span class="line">fullName:&#x27;张-三&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">firstName(val)&#123;</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">console.log(this)</span><br><span class="line">this.fullName = val + &#x27;-&#x27; + this.lastName</span><br><span class="line">&#125;,1000);</span><br><span class="line">&#125;,</span><br><span class="line">lastName(val)&#123;</span><br><span class="line">this.fullName = this.firstName + &#x27;-&#x27; + val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><ul><li><p>class样式</p><ul><li>写法:class&#x3D;”xxx” xxx可以是字符串、对象、数组。</li><li>字符串写法适用于：类名不确定，要动态获取。</li><li>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</li><li>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</li></ul></li><li><p>style样式</p><ul><li>:style&#x3D;”{fontSize: xxx}”其中xxx是动态值。</li><li>:style&#x3D;”[a,b]”其中a、b是样式对象。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;绑定样式&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">.basic&#123;</span><br><span class="line">width: 400px;</span><br><span class="line">height: 100px;</span><br><span class="line">border: 1px solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.happy&#123;</span><br><span class="line">border: 4px solid red;;</span><br><span class="line">background-color: rgba(255, 255, 0, 0.644);</span><br><span class="line">background: linear-gradient(30deg,yellow,pink,orange,yellow);</span><br><span class="line">&#125;</span><br><span class="line">.sad&#123;</span><br><span class="line">border: 4px dashed rgb(2, 197, 2);</span><br><span class="line">background-color: gray;</span><br><span class="line">&#125;</span><br><span class="line">.normal&#123;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.atguigu1&#123;</span><br><span class="line">background-color: yellowgreen;</span><br><span class="line">&#125;</span><br><span class="line">.atguigu2&#123;</span><br><span class="line">font-size: 30px;</span><br><span class="line">text-shadow:2px 2px 10px red;</span><br><span class="line">&#125;</span><br><span class="line">.atguigu3&#123;</span><br><span class="line">border-radius: 20px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;mood&quot; @click=&quot;changeMood&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;classArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 绑定style样式--对象写法 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;!-- 绑定style样式--数组写法 --&gt;</span><br><span class="line">&lt;div class=&quot;basic&quot; :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">mood:&#x27;normal&#x27;,</span><br><span class="line">classArr:[&#x27;atguigu1&#x27;,&#x27;atguigu2&#x27;,&#x27;atguigu3&#x27;],</span><br><span class="line">classObj:&#123;</span><br><span class="line">atguigu1:false,</span><br><span class="line">atguigu2:false,</span><br><span class="line">&#125;,</span><br><span class="line">styleObj:&#123;</span><br><span class="line">fontSize: &#x27;40px&#x27;,</span><br><span class="line">color:&#x27;red&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">styleObj2:&#123;</span><br><span class="line">backgroundColor:&#x27;orange&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">styleArr:[</span><br><span class="line">&#123;</span><br><span class="line">fontSize: &#x27;40px&#x27;,</span><br><span class="line">color:&#x27;blue&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">backgroundColor:&#x27;gray&#x27;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">changeMood()&#123;</span><br><span class="line">const arr = [&#x27;happy&#x27;,&#x27;sad&#x27;,&#x27;normal&#x27;]</span><br><span class="line">const index = Math.floor(Math.random()*3)</span><br><span class="line">this.mood = arr[index]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><ul><li>v-if<ul><li>v-if&#x3D;”表达式”</li><li>v-else-if&#x3D;”表达式”</li><li>v-else&#x3D;”表达式”</li><li>适用于：切换频率较低的场景。</li><li>特点：不展示的DOM元素直接被移除。</li><li>注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</li></ul></li><li>v-show<ul><li>写法：v-show&#x3D;”表达式”</li><li>适用于：切换频率较高的场景。</li><li>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</li><li>备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;条件渲染&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;!-- 使用v-show做条件渲染 --&gt;</span><br><span class="line">&lt;!-- &lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line">&lt;!-- &lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 使用v-if做条件渲染 --&gt;</span><br><span class="line">&lt;!-- &lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line">&lt;!-- &lt;h2 v-if=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-else和v-else-if --&gt;</span><br><span class="line">&lt;!-- &lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span><br><span class="line">&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span><br><span class="line">&lt;div v-else&gt;哈哈&lt;/div&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-if与template的配合使用 --&gt;</span><br><span class="line">&lt;template v-if=&quot;n === 1&quot;&gt;</span><br><span class="line">&lt;h2&gt;你好&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;尚硅谷&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;北京&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">n:0</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><ul><li><p>v-for指令</p></li><li><p>用于展示列表数据</p></li><li><p>语法：v-for&#x3D;”(item, index) in xxx” :key&#x3D;”yyy”</p></li><li><p>可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;基本列表&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;!-- 遍历数组 --&gt;</span><br><span class="line">&lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历对象 --&gt;</span><br><span class="line">&lt;h2&gt;汽车信息（遍历对象）&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(value,k) of car&quot; :key=&quot;k&quot;&gt;</span><br><span class="line">&#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历字符串 --&gt;</span><br><span class="line">&lt;h2&gt;测试遍历字符串（用得少）&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(char,index) of str&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 遍历指定次数 --&gt;</span><br><span class="line">&lt;h2&gt;测试遍历指定次数（用得少）&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(number,index) of 5&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class="line">],</span><br><span class="line">car:&#123;</span><br><span class="line">name:&#x27;奥迪A8&#x27;,</span><br><span class="line">price:&#x27;70万&#x27;,</span><br><span class="line">color:&#x27;黑色&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">str:&#x27;hello&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>面试题：react、vue中的key有什么作用？（key的内部原理）</li><li>虚拟DOM中key的作用</li><li>变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较</li><li>对比规则<ul><li>旧虚拟DOM中找到了与新虚拟DOM相同的key<ul><li>若虚拟DOM中内容没变, 直接使用之前的真实DOM！</li><li>若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</li></ul></li><li>旧虚拟DOM中未找到与新虚拟DOM相同的key,创建新的真实DOM，随后渲染到到页面</li></ul></li><li>用index作为key可能会引发的问题<ul><li>若对数据进行：逆序添加、逆序删除等破坏顺序操作,会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低。</li><li>如果结构中还包含输入类的DOM,会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题。</li></ul></li><li>开发中如何选择key<ul><li>最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，<br>使用index作为key是没有问题的。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;key的原理&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;!-- 遍历数组 --&gt;</span><br><span class="line">&lt;h2&gt;人员列表（遍历数组）&lt;/h2&gt;</span><br><span class="line">&lt;button @click.once=&quot;add&quot;&gt;添加一个老刘&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">add()&#123;</span><br><span class="line">const p = &#123;id:&#x27;004&#x27;,name:&#x27;老刘&#x27;,age:40&#125;</span><br><span class="line">this.persons.unshift(p)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>列表过滤</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;列表过滤&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;人员列表&lt;/h2&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;keyWord&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(p,index) of filPerons&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">//用watch实现</span><br><span class="line">//#region </span><br><span class="line">/* new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">keyWord:&#x27;&#x27;,</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span><br><span class="line">],</span><br><span class="line">filPerons:[]</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">keyWord:&#123;</span><br><span class="line">immediate:true,</span><br><span class="line">handler(val)&#123;</span><br><span class="line">this.filPerons = this.persons.filter((p)=&gt;&#123;</span><br><span class="line">return p.name.indexOf(val) !== -1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;) */</span><br><span class="line">//#endregion</span><br><span class="line"></span><br><span class="line">//用computed实现</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">keyWord:&#x27;&#x27;,</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">filPerons()&#123;</span><br><span class="line">return this.persons.filter((p)=&gt;&#123;</span><br><span class="line">return p.name.indexOf(this.keyWord) !== -1</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;) </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>列表排序</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;列表排序&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;人员列表&lt;/h2&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;keyWord&quot;&gt;</span><br><span class="line">&lt;button @click=&quot;sortType = 2&quot;&gt;年龄升序&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;sortType = 1&quot;&gt;年龄降序&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;sortType = 0&quot;&gt;原顺序&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(p,index) of filPerons&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">keyWord:&#x27;&#x27;,</span><br><span class="line">sortType:0, //0原顺序 1降序 2升序</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:30,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:31,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:18,sex:&#x27;男&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:19,sex:&#x27;男&#x27;&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">filPerons()&#123;</span><br><span class="line">const arr = this.persons.filter((p)=&gt;&#123;</span><br><span class="line">return p.name.indexOf(this.keyWord) !== -1</span><br><span class="line">&#125;)</span><br><span class="line">//判断一下是否需要排序</span><br><span class="line">if(this.sortType)&#123;</span><br><span class="line">arr.sort((p1,p2)=&gt;&#123;</span><br><span class="line">return this.sortType === 1 ? p2.age-p1.age : p1.age-p2.age</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">return arr</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>更新时的一个问题</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;更新时的一个问题&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;人员列表&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;updateMei&quot;&gt;更新马冬梅的信息&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;p.id&quot;&gt;</span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">persons:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:30,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:31,sex:&#x27;女&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:18,sex:&#x27;男&#x27;&#125;,</span><br><span class="line">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:19,sex:&#x27;男&#x27;&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">updateMei()&#123;</span><br><span class="line">// this.persons[0].name = &#x27;马老师&#x27; //奏效</span><br><span class="line">// this.persons[0].age = 50 //奏效</span><br><span class="line">// this.persons[0].sex = &#x27;男&#x27; //奏效</span><br><span class="line">// this.persons[0] = &#123;id:&#x27;001&#x27;,name:&#x27;马老师&#x27;,age:50,sex:&#x27;男&#x27;&#125; //不奏效</span><br><span class="line">this.persons.splice(0,1,&#123;id:&#x27;001&#x27;,name:&#x27;马老师&#x27;,age:50,sex:&#x27;男&#x27;&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>Vue监测数据改变的原理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Vue监测数据改变的原理&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;,</span><br><span class="line">student:&#123;</span><br><span class="line">name:&#x27;tom&#x27;,</span><br><span class="line">age:&#123;</span><br><span class="line">rAge:40,</span><br><span class="line">sAge:29,</span><br><span class="line">&#125;,</span><br><span class="line">friends:[</span><br><span class="line">&#123;name:&#x27;jerry&#x27;,age:35&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>模拟一个数据监测</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; &gt;</span><br><span class="line"></span><br><span class="line">let data = &#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建一个监视的实例对象，用于监视data中属性的变化</span><br><span class="line">const obs = new Observer(data)</span><br><span class="line">console.log(obs)</span><br><span class="line"></span><br><span class="line">//准备一个vm实例对象</span><br><span class="line">let vm = &#123;&#125;</span><br><span class="line">vm._data = data = obs</span><br><span class="line"></span><br><span class="line">function Observer(obj)&#123;</span><br><span class="line">//汇总对象中所有的属性形成一个数组</span><br><span class="line">const keys = Object.keys(obj)</span><br><span class="line">//遍历</span><br><span class="line">keys.forEach((k)=&gt;&#123;</span><br><span class="line">Object.defineProperty(this,k,&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">return obj[k]</span><br><span class="line">&#125;,</span><br><span class="line">set(val)&#123;</span><br><span class="line">console.log(`$&#123;k&#125;被改了，我要去解析模板，生成虚拟DOM.....我要开始忙了`)</span><br><span class="line">obj[k] = val</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>Vue.set的使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Vue监测数据改变的原理&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h1&gt;学校信息&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;school.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;school.address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;校长是：&#123;&#123;school.leader&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h1&gt;学生信息&lt;/h1&gt;</span><br><span class="line">&lt;button @click=&quot;addSex&quot;&gt;添加一个性别属性，默认值是男&lt;/button&gt;</span><br><span class="line">&lt;h2&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-if=&quot;student.sex&quot;&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;年龄：真实&#123;&#123;student.age.rAge&#125;&#125;，对外&#123;&#123;student.age.sAge&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;朋友们&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(f,index) in student.friends&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">school:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">student:&#123;</span><br><span class="line">name:&#x27;tom&#x27;,</span><br><span class="line">age:&#123;</span><br><span class="line">rAge:40,</span><br><span class="line">sAge:29,</span><br><span class="line">&#125;,</span><br><span class="line">friends:[</span><br><span class="line">&#123;name:&#x27;jerry&#x27;,age:35&#125;,</span><br><span class="line">&#123;name:&#x27;tony&#x27;,age:36&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">addSex()&#123;</span><br><span class="line">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span><br><span class="line">this.$set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>监测数据_数组</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;Vue监测数据改变的原理_数组&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h1&gt;学校信息&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;school.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;school.address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;校长是：&#123;&#123;school.leader&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;h1&gt;学生信息&lt;/h1&gt;</span><br><span class="line">&lt;button @click=&quot;addSex&quot;&gt;添加一个性别属性，默认值是男&lt;/button&gt;</span><br><span class="line">&lt;h2&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-if=&quot;student.sex&quot;&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;年龄：真实&#123;&#123;student.age.rAge&#125;&#125;，对外&#123;&#123;student.age.sAge&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;爱好&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(h,index) in student.hobby&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;h&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;h2&gt;朋友们&lt;/h2&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(f,index) in student.friends&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">school:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">student:&#123;</span><br><span class="line">name:&#x27;tom&#x27;,</span><br><span class="line">age:&#123;</span><br><span class="line">rAge:40,</span><br><span class="line">sAge:29,</span><br><span class="line">&#125;,</span><br><span class="line">hobby:[&#x27;抽烟&#x27;,&#x27;喝酒&#x27;,&#x27;烫头&#x27;],</span><br><span class="line">friends:[</span><br><span class="line">&#123;name:&#x27;jerry&#x27;,age:35&#125;,</span><br><span class="line">&#123;name:&#x27;tony&#x27;,age:36&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">addSex()&#123;</span><br><span class="line">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span><br><span class="line">this.$set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>总结数据监测<ul><li>Vue监视数据的原理<ul><li>vue会监视data中所有层次的数据。</li><li>如何监测对象中的数据，通过setter实现监视，且要在new Vue时就传入要监测的数据</li><li>对象中后追加的属性，Vue默认不做响应式处理</li><li>如需给后添加的属性做响应式，请使用如下API：Vue.set(target，propertyName&#x2F;index，value) 或 vm.$set(target，propertyName&#x2F;index，value)</li><li>如何监测数组中的数据，通过包裹数组更新元素的方法实现，本质就是做了两件事<ul><li>调用原生对应的方法对数组进行更新。</li><li>重新解析模板，进而更新页面。</li></ul></li><li>在Vue修改数组中的某个元素一定要用如下方法<ul><li>使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()</li><li>Vue.set() 或 vm.$set()</li></ul></li><li>特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;总结数据监视&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">button&#123;</span><br><span class="line">margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h1&gt;学生信息&lt;/h1&gt;</span><br><span class="line">&lt;button @click=&quot;student.age++&quot;&gt;年龄+1岁&lt;/button&gt; &lt;br/&gt;</span><br><span class="line">&lt;button @click=&quot;addSex&quot;&gt;添加性别属性，默认值：男&lt;/button&gt; &lt;br/&gt;</span><br><span class="line">&lt;button @click=&quot;student.sex = &#x27;未知&#x27; &quot;&gt;修改性别&lt;/button&gt; &lt;br/&gt;</span><br><span class="line">&lt;button @click=&quot;addFriend&quot;&gt;在列表首位添加一个朋友&lt;/button&gt; &lt;br/&gt;</span><br><span class="line">&lt;button @click=&quot;updateFirstFriendName&quot;&gt;修改第一个朋友的名字为：张三&lt;/button&gt; &lt;br/&gt;</span><br><span class="line">&lt;button @click=&quot;addHobby&quot;&gt;添加一个爱好&lt;/button&gt; &lt;br/&gt;</span><br><span class="line">&lt;button @click=&quot;updateHobby&quot;&gt;修改第一个爱好为：开车&lt;/button&gt; &lt;br/&gt;</span><br><span class="line">&lt;button @click=&quot;removeSmoke&quot;&gt;过滤掉爱好中的抽烟&lt;/button&gt; &lt;br/&gt;</span><br><span class="line">&lt;h3&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;年龄：&#123;&#123;student.age&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3 v-if=&quot;student.sex&quot;&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;爱好：&lt;/h3&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(h,index) in student.hobby&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;h&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;h3&gt;朋友们：&lt;/h3&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(f,index) in student.friends&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">student:&#123;</span><br><span class="line">name:&#x27;tom&#x27;,</span><br><span class="line">age:18,</span><br><span class="line">hobby:[&#x27;抽烟&#x27;,&#x27;喝酒&#x27;,&#x27;烫头&#x27;],</span><br><span class="line">friends:[</span><br><span class="line">&#123;name:&#x27;jerry&#x27;,age:35&#125;,</span><br><span class="line">&#123;name:&#x27;tony&#x27;,age:36&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">addSex()&#123;</span><br><span class="line">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span><br><span class="line">this.$set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">addFriend()&#123;</span><br><span class="line">this.student.friends.unshift(&#123;name:&#x27;jack&#x27;,age:70&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">updateFirstFriendName()&#123;</span><br><span class="line">this.student.friends[0].name = &#x27;张三&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">addHobby()&#123;</span><br><span class="line">this.student.hobby.push(&#x27;学习&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">updateHobby()&#123;</span><br><span class="line">// this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span><br><span class="line">// Vue.set(this.student.hobby,0,&#x27;开车&#x27;)</span><br><span class="line">this.$set(this.student.hobby,0,&#x27;开车&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">removeSmoke()&#123;</span><br><span class="line">this.student.hobby = this.student.hobby.filter((h)=&gt;&#123;</span><br><span class="line">return h !== &#x27;抽烟&#x27;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><ul><li><p>若：<code>&lt;input type=&quot;text&quot;/&gt;</code>，则v-model收集的是value值，用户输入的就是value值。</p></li><li><p>若：<code>&lt;input type=&quot;radio&quot;/&gt;</code>，则v-model收集的是value值，且要给标签配置value值。</p></li><li><p>若：<code>&lt;input type=&quot;checkbox&quot;/&gt;</code></p><ul><li>没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li>配置input的value属性<ul><li>v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li>v-model的初始值是数组，那么收集的的就是value组成的数组</li></ul></li></ul></li><li><p>备注：v-model的三个修饰符</p><ul><li>lazy：失去焦点再收集数据</li><li>number：输入字符串转为有效的数字</li><li>trim：输入首尾空格过滤</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;收集表单数据&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;form @submit.prevent=&quot;demo&quot;&gt;</span><br><span class="line">账号：&lt;input type=&quot;text&quot; v-model.trim=&quot;userInfo.account&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">密码：&lt;input type=&quot;password&quot; v-model=&quot;userInfo.password&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">年龄：&lt;input type=&quot;number&quot; v-model.number=&quot;userInfo.age&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">性别：</span><br><span class="line">男&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;male&quot;&gt;</span><br><span class="line">女&lt;input type=&quot;radio&quot; name=&quot;sex&quot; v-model=&quot;userInfo.sex&quot; value=&quot;female&quot;&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">爱好：</span><br><span class="line">学习&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;study&quot;&gt;</span><br><span class="line">打游戏&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;game&quot;&gt;</span><br><span class="line">吃饭&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.hobby&quot; value=&quot;eat&quot;&gt;</span><br><span class="line">&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">所属校区</span><br><span class="line">&lt;select v-model=&quot;userInfo.city&quot;&gt;</span><br><span class="line">&lt;option value=&quot;&quot;&gt;请选择校区&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;beijing&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;shanghai&quot;&gt;上海&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;shenzhen&quot;&gt;深圳&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;wuhan&quot;&gt;武汉&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">其他信息：</span><br><span class="line">&lt;textarea v-model.lazy=&quot;userInfo.other&quot;&gt;&lt;/textarea&gt; &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; v-model=&quot;userInfo.agree&quot;&gt;阅读并接受&lt;a href=&quot;http://www.atguigu.com&quot;&gt;《用户协议》&lt;/a&gt;</span><br><span class="line">&lt;button&gt;提交&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">userInfo:&#123;</span><br><span class="line">account:&#x27;&#x27;,</span><br><span class="line">password:&#x27;&#x27;,</span><br><span class="line">age:18,</span><br><span class="line">sex:&#x27;female&#x27;,</span><br><span class="line">hobby:[],</span><br><span class="line">city:&#x27;beijing&#x27;,</span><br><span class="line">other:&#x27;&#x27;,</span><br><span class="line">agree:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">demo()&#123;</span><br><span class="line">console.log(JSON.stringify(this.userInfo))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul><li>定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）</li><li>注册过滤器：Vue.filter(name,callback) 或 new Vue{filters:{}}</li><li>使用过滤器：<code>&#123;&#123; xxx | 过滤器名&#125;&#125;</code>  或  v-bind:属性 &#x3D; “xxx | 过滤器名”</li><li>过滤器也可以接收额外参数、多个过滤器也可以串联，并没有改变原本的数据, 是产生新的对应的数据</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;过滤器&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/dayjs.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;显示格式化后的时间&lt;/h2&gt;</span><br><span class="line">&lt;!-- 计算属性实现 --&gt;</span><br><span class="line">&lt;h3&gt;现在是：&#123;&#123;fmtTime&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;!-- methods实现 --&gt;</span><br><span class="line">&lt;h3&gt;现在是：&#123;&#123;getFmtTime()&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;!-- 过滤器实现 --&gt;</span><br><span class="line">&lt;h3&gt;现在是：&#123;&#123;time | timeFormater&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;!-- 过滤器实现（传参） --&gt;</span><br><span class="line">&lt;h3&gt;现在是：&#123;&#123;time | timeFormater(&#x27;YYYY_MM_DD&#x27;) | mySlice&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3 :x=&quot;msg | mySlice&quot;&gt;尚硅谷&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;root2&quot;&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123;msg | mySlice&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line">//全局过滤器</span><br><span class="line">Vue.filter(&#x27;mySlice&#x27;,function(value)&#123;</span><br><span class="line">return value.slice(0,4)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">time:1621561377603, //时间戳</span><br><span class="line">msg:&#x27;你好，尚硅谷&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">fmtTime()&#123;</span><br><span class="line">return dayjs(this.time).format(&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">getFmtTime()&#123;</span><br><span class="line">return dayjs(this.time).format(&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">//局部过滤器</span><br><span class="line">filters:&#123;</span><br><span class="line">timeFormater(value,str=&#x27;YYYY年MM月DD日 HH:mm:ss&#x27;)&#123;</span><br><span class="line">// console.log(&#x27;@&#x27;,value)</span><br><span class="line">return dayjs(value).format(str)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root2&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">msg:&#x27;hello,atguigu!&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><p>我们学过的指令</p><ul><li>v-bind  : 单向绑定解析表达式, 可简写为 :xxx</li><li>v-model : 双向数据绑定</li><li>v-for  : 遍历数组&#x2F;对象&#x2F;字符串</li><li>v-on   : 绑定事件监听, 可简写为@</li><li>v-if     : 条件渲染（动态控制节点是否存存在）</li><li>v-else  : 条件渲染（动态控制节点是否存存在）</li><li>v-show  : 条件渲染 (动态控制节点是否展示)</li><li>v-text指令</li><li>作用：向其所在的节点中渲染文本内容。</li><li>与插值语法的区别：v-text会替换掉节点中的内容，则不会。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;v-text指令&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;div&gt;你好，&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;div v-text=&quot;name&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div v-text=&quot;str&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">str:&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><ul><li>作用：向指定节点中渲染包含html结构的内容</li><li>与插值语法的区别<ul><li>v-html会替换掉节点中所有的内容，则不会</li><li>v-html可以识别html结构</li></ul></li><li>严重注意：v-html有安全性问题<ul><li>在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击</li><li>一定要在可信的内容上使用v-html，永不要用在用户提交的内容上</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;v-html指令&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;div&gt;你好，&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;div v-html=&quot;str&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div v-html=&quot;str2&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">str:&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;,</span><br><span class="line">str2:&#x27;&lt;a href=javascript:location.href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><ul><li>本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉v-cloak属性</li><li>使用css配合v-cloak可以解决网速慢时页面展示出的问题</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;v-cloak指令&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">[v-cloak]&#123;</span><br><span class="line">display:none;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2 v-cloak&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost:8080/resource/5s/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">console.log(1)</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><ul><li>v-once所在节点在初次动态渲染后，就视为静态内容了</li><li>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;v-once指令&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2 v-once&gt;初始化的n值是:&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">n:1</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><ul><li>跳过其所在节点的编译过程</li><li>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;v-pre指令&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2 v-pre&gt;Vue其实很简单&lt;/h2&gt;</span><br><span class="line">&lt;h2 &gt;当前的n值是:&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">n:1</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><ul><li><p>定义语法</p><ul><li><p>局部指令</p><ul><li>new Vue({directives:{指令名:配置对象}}) 或 new Vue({directives{指令名:回调函数}})</li></ul></li><li><p>全局指令</p><ul><li>Vue.directive(指令名,配置对象) 或  Vue.directive(指令名,回调函数)</li></ul></li></ul></li><li><p>配置对象中常用的3个回调</p><ul><li>bind：指令与元素成功绑定时调用</li><li>inserted：指令所在元素被插入页面时调用</li><li>update：指令所在模板结构被重新解析时调用</li></ul></li><li><p>备注</p><ul><li>指令定义时不加v-，但使用时要加v-；</li><li>指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;自定义指令&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</span><br><span class="line">需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;当前的n值是：&lt;span v-text=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt;</span><br><span class="line">&lt;!-- &lt;h2&gt;放大10倍后的n值是：&lt;span v-big-number=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt; --&gt;</span><br><span class="line">&lt;h2&gt;放大10倍后的n值是：&lt;span v-big=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-fbind:value=&quot;n&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">//定义全局指令</span><br><span class="line">/* Vue.directive(&#x27;fbind&#x27;,&#123;</span><br><span class="line">//指令与元素成功绑定时（一上来）</span><br><span class="line">bind(element,binding)&#123;</span><br><span class="line">element.value = binding.value</span><br><span class="line">&#125;,</span><br><span class="line">//指令所在元素被插入页面时</span><br><span class="line">inserted(element,binding)&#123;</span><br><span class="line">element.focus()</span><br><span class="line">&#125;,</span><br><span class="line">//指令所在的模板被重新解析时</span><br><span class="line">update(element,binding)&#123;</span><br><span class="line">element.value = binding.value</span><br><span class="line">&#125;</span><br><span class="line">&#125;) */</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">n:1</span><br><span class="line">&#125;,</span><br><span class="line">directives:&#123;</span><br><span class="line">//big函数何时会被调用？1.指令与元素成功绑定时（一上来）。2.指令所在的模板被重新解析时。</span><br><span class="line">/* &#x27;big-number&#x27;(element,binding)&#123;</span><br><span class="line">// console.log(&#x27;big&#x27;)</span><br><span class="line">element.innerText = binding.value * 10</span><br><span class="line">&#125;, */</span><br><span class="line">big(element,binding)&#123;</span><br><span class="line">console.log(&#x27;big&#x27;,this) //注意此处的this是window</span><br><span class="line">// console.log(&#x27;big&#x27;)</span><br><span class="line">element.innerText = binding.value * 10</span><br><span class="line">&#125;,</span><br><span class="line">fbind:&#123;</span><br><span class="line">//指令与元素成功绑定时（一上来）</span><br><span class="line">bind(element,binding)&#123;</span><br><span class="line">element.value = binding.value</span><br><span class="line">&#125;,</span><br><span class="line">//指令所在元素被插入页面时</span><br><span class="line">inserted(element,binding)&#123;</span><br><span class="line">element.focus()</span><br><span class="line">&#125;,</span><br><span class="line">//指令所在的模板被重新解析时</span><br><span class="line">update(element,binding)&#123;</span><br><span class="line">element.value = binding.value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li><p>又名：生命周期回调函数、生命周期函数、生命周期钩子。</p></li><li><p>是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数。</p></li><li><p>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的。</p></li><li><p>生命周期函数中的this指向是vm 或 组件实例对象。</p></li></ul><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-ZuQE83jA-1679118224607)(<a href="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png)]">https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png)]</a></p><h3 id="引出生命周期"><a href="#引出生命周期" class="headerlink" title="引出生命周期"></a>引出生命周期</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;引出生命周期&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2 v-if=&quot;a&quot;&gt;你好啊&lt;/h2&gt;</span><br><span class="line">&lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习Vue&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line"> new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">a:false,</span><br><span class="line">opacity:1</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span><br><span class="line">mounted()&#123;</span><br><span class="line">console.log(&#x27;mounted&#x27;,this)</span><br><span class="line">setInterval(() =&gt; &#123;</span><br><span class="line">this.opacity -= 0.01</span><br><span class="line">if(this.opacity &lt;= 0) this.opacity = 1</span><br><span class="line">&#125;,16)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//通过外部的定时器实现（不推荐）</span><br><span class="line">/* setInterval(() =&gt; &#123;</span><br><span class="line">vm.opacity -= 0.01</span><br><span class="line">if(vm.opacity &lt;= 0) vm.opacity = 1</span><br><span class="line">&#125;,16) */</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="分析生命周期"><a href="#分析生命周期" class="headerlink" title="分析生命周期"></a>分析生命周期</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;分析生命周期&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot; :x=&quot;n&quot;&gt;</span><br><span class="line">&lt;h2 v-text=&quot;n&quot;&gt;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;bye&quot;&gt;点我销毁vm&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">// template:`</span><br><span class="line">// &lt;div&gt;</span><br><span class="line">// &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span><br><span class="line">// &lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span><br><span class="line">// &lt;/div&gt;</span><br><span class="line">// `,</span><br><span class="line">data:&#123;</span><br><span class="line">n:1</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">add()&#123;</span><br><span class="line">console.log(&#x27;add&#x27;)</span><br><span class="line">this.n++</span><br><span class="line">&#125;,</span><br><span class="line">bye()&#123;</span><br><span class="line">console.log(&#x27;bye&#x27;)</span><br><span class="line">this.$destroy()</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">n()&#123;</span><br><span class="line">console.log(&#x27;n变了&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">beforeCreate() &#123;</span><br><span class="line">console.log(&#x27;beforeCreate&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">created() &#123;</span><br><span class="line">console.log(&#x27;created&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeMount() &#123;</span><br><span class="line">console.log(&#x27;beforeMount&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">console.log(&#x27;mounted&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeUpdate() &#123;</span><br><span class="line">console.log(&#x27;beforeUpdate&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">updated() &#123;</span><br><span class="line">console.log(&#x27;updated&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">console.log(&#x27;beforeDestroy&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">destroyed() &#123;</span><br><span class="line">console.log(&#x27;destroyed&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="总结生命周期"><a href="#总结生命周期" class="headerlink" title="总结生命周期"></a>总结生命周期</h3><p>常用的生命周期钩子：</p><ul><li><p>mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】。</p></li><li><p>beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】。</p></li></ul><p>关于销毁Vue实例</p><ul><li><p>销毁后借助Vue开发者工具看不到任何信息。</p></li><li><p>销毁后自定义事件会失效，但原生DOM事件依然有效。</p></li><li><p>一般不会在beforeDestroy操作数据，因为即便操作数据，也不会再触发更新流程了。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;引出生命周期&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h2 :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习Vue&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;opacity = 1&quot;&gt;透明度设置为1&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;stop&quot;&gt;点我停止变换&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line"> new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">opacity:1</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">stop()&#123;</span><br><span class="line">this.$destroy()</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">//Vue完成模板的解析并把初始的真实DOM元素放入页面后（挂载完毕）调用mounted</span><br><span class="line">mounted()&#123;</span><br><span class="line">console.log(&#x27;mounted&#x27;,this)</span><br><span class="line">this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">console.log(&#x27;setInterval&#x27;)</span><br><span class="line">this.opacity -= 0.01</span><br><span class="line">if(this.opacity &lt;= 0) this.opacity = 1</span><br><span class="line">&#125;,16)</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">clearInterval(this.timer)</span><br><span class="line">console.log(&#x27;vm即将驾鹤西游了&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue组件化编程"><a href="#Vue组件化编程" class="headerlink" title="Vue组件化编程"></a>Vue组件化编程</h1><h2 id="组件的理解"><a href="#组件的理解" class="headerlink" title="组件的理解"></a>组件的理解</h2><p>理解：用来实现局部（特定）功能效果的代码集合（html、js、css、images、mp3、mp4…）</p><p>作用：复用代码，简化项目编码，提高运行效率</p><ul><li>传统方式编写应用</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230212160528779.png" alt="image-20230212160528779"></p><ul><li>组件的定义</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230212161111839.png" alt="image-20230212161111839"></p><ul><li>使用组件方式编写应用<br><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230212160828139.png" alt="image-20230212160828139"></li></ul><h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><p>含义：一个文件中包含n个组件</p><p>Vue 的非单文件组件指的是在 JavaScript 文件中编写 Vue 组件的方式，即通过 Vue.extend() 方法或 Vue.component() 方法来定义组件。与单文件组件不同的是，非单文件组件通常将组件的模板、样式和脚本分别写在不同的地方，因此可读性较差，不便于维护。</p><p>缺点：模板编写没有提示，没有构建过程, 无法将 ES6 转换成 ES5，不支持组件的 CSS，真正开发中几乎不用</p><p>Vue中使用组件的三大步骤</p><ul><li><p>定义组件(创建组件)</p></li><li><p>注册组件</p></li><li><p>使用组件(写组件标签)</p></li></ul><p>如何定义一个组件？</p><ul><li><p>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；区别如下：</p><ul><li><p>el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</p></li><li><p>data必须写成函数，为什么？ ———— 避免组件被复用时，数据存在引用关系。</p></li><li><p>备注：使用template可以配置组件结构。</p></li></ul></li><li><p>如何注册组件？</p><ul><li>局部注册：靠new Vue的时候传入components选项</li><li>全局注册：靠Vue.component(‘组件名’,组件)</li></ul></li><li><p>编写组件标签：<code>&lt;school&gt;&lt;/school&gt;</code></p></li></ul><p>例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;基本使用&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;!-- 第三步：编写组件标签 --&gt;</span><br><span class="line">&lt;school&gt;&lt;/school&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;!-- 第三步：编写组件标签 --&gt;</span><br><span class="line">&lt;student&gt;&lt;/student&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;root2&quot;&gt;</span><br><span class="line">&lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">//第一步：创建school组件</span><br><span class="line">const school = Vue.extend(&#123;</span><br><span class="line">template:`</span><br><span class="line">&lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">// el:&#x27;#root&#x27;, //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">schoolName:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京昌平&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">showName()&#123;</span><br><span class="line">alert(this.schoolName)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//第一步：创建student组件</span><br><span class="line">const student = Vue.extend(&#123;</span><br><span class="line">template:`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;学生姓名：&#123;&#123;studentName&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">studentName:&#x27;张三&#x27;,</span><br><span class="line">age:18</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//第一步：创建hello组件</span><br><span class="line">const hello = Vue.extend(&#123;</span><br><span class="line">template:`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;你好啊！&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;Tom&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//第二步：全局注册组件</span><br><span class="line">Vue.component(&#x27;hello&#x27;,hello)</span><br><span class="line"></span><br><span class="line">//创建vm</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">msg:&#x27;你好啊！&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">//第二步：注册组件（局部注册）</span><br><span class="line">components:&#123;</span><br><span class="line">school,</span><br><span class="line">student</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root2&#x27;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h3><p>关于组件名</p><ul><li><p>一个单词组成</p><ul><li>第一种写法(首字母小写)：school</li><li>第二种写法(首字母大写)：School</li></ul></li><li><p>多个单词组成</p><ul><li>第一种写法(kebab-case命名)：my-school</li><li>第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</li><li>备注<ul><li>组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</li><li>可以使用name配置项指定组件在开发者工具中呈现的名字。</li></ul></li></ul></li><li><p>关于组件标签</p><ul><li>第一种写法：<code>&lt;school&gt;&lt;/school&gt;</code></li><li>第二种写法：<code>&lt;school/&gt;</code></li><li>备注：不用使用脚手架时，<code>&lt;school/&gt;</code>会导致后续组件不能渲染。</li></ul></li><li><p>一个简写方式：const school &#x3D; Vue.extend(options) 可简写为：const school &#x3D; options</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;几个注意点&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;school&gt;&lt;/school&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">//定义组件</span><br><span class="line">const s = Vue.extend(&#123;</span><br><span class="line">name:&#x27;atguigu&#x27;,</span><br><span class="line">template:`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">msg:&#x27;欢迎学习Vue!&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">school:s</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;组件的嵌套&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line"></span><br><span class="line">//定义student组件</span><br><span class="line">const student = Vue.extend(&#123;</span><br><span class="line">name:&#x27;student&#x27;,</span><br><span class="line">template:`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">age:18</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//定义school组件</span><br><span class="line">const school = Vue.extend(&#123;</span><br><span class="line">name:&#x27;school&#x27;,</span><br><span class="line">template:`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;student&gt;&lt;/student&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">//注册组件（局部）</span><br><span class="line">components:&#123;</span><br><span class="line">student</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//定义hello组件</span><br><span class="line">const hello = Vue.extend(&#123;</span><br><span class="line">template:`&lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg:&#x27;欢迎来到尚硅谷学习！&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//定义app组件</span><br><span class="line">const app = Vue.extend(&#123;</span><br><span class="line">template:`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">&lt;school&gt;&lt;/school&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">components:&#123;</span><br><span class="line">school,</span><br><span class="line">hello</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//创建vm</span><br><span class="line">new Vue(&#123;</span><br><span class="line">template:&#x27;&lt;app&gt;&lt;/app&gt;&#x27;,</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">//注册组件（局部）</span><br><span class="line">components:&#123;app&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h3><ul><li><p>school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</p></li><li><p>我们只需要写<school/>或<school></school>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。</p></li><li><p>特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！</p></li><li><p>关于this指向</p><ul><li>组件配置中： data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。</li><li>new Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</li></ul></li><li><p>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。Vue的实例对象，以后简称vm。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;VueComponent&lt;/title&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;school&gt;&lt;/school&gt;</span><br><span class="line">&lt;hello&gt;&lt;/hello&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">//定义school组件</span><br><span class="line">const school = Vue.extend(&#123;</span><br><span class="line">name:&#x27;school&#x27;,</span><br><span class="line">template:`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">showName()&#123;</span><br><span class="line">console.log(&#x27;showName&#x27;,this)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const test = Vue.extend(&#123;</span><br><span class="line">template:`&lt;span&gt;atguigu&lt;/span&gt;`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//定义hello组件</span><br><span class="line">const hello = Vue.extend(&#123;</span><br><span class="line">template:`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;&#123;&#123;msg&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;test&gt;&lt;/test&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">msg:&#x27;你好啊！&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;test&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// console.log(&#x27;@&#x27;,school)</span><br><span class="line">// console.log(&#x27;#&#x27;,hello)</span><br><span class="line"></span><br><span class="line">//创建vm</span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">components:&#123;school,hello&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="内置关系"><a href="#内置关系" class="headerlink" title="内置关系"></a>内置关系</h4><ul><li><p>VueComponent.prototype.<strong>proto</strong> &#x3D;&#x3D;&#x3D; Vue.prototype</p></li><li><p>为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</p></li></ul><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-h4Uw1wmd-1679118224609)(<a href="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230212211638006.png)]">https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230212211638006.png)]</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;一个重要的内置关系&lt;/title&gt;</span><br><span class="line">&lt;!-- 引入Vue --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!-- 准备好一个容器--&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;school&gt;&lt;/school&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">Vue.config.productionTip = false //阻止 vue 在启动时生成生产提示。</span><br><span class="line">Vue.prototype.x = 99</span><br><span class="line"></span><br><span class="line">//定义school组件</span><br><span class="line">const school = Vue.extend(&#123;</span><br><span class="line">name:&#x27;school&#x27;,</span><br><span class="line">template:`</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;showX&quot;&gt;点我输出x&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">showX()&#123;</span><br><span class="line">console.log(this.x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//创建一个vm</span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">msg:&#x27;你好&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;school&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//定义一个构造函数</span><br><span class="line">/* function Demo()&#123;</span><br><span class="line">this.a = 1</span><br><span class="line">this.b = 2</span><br><span class="line">&#125;</span><br><span class="line">//创建一个Demo的实例对象</span><br><span class="line">const d = new Demo()</span><br><span class="line"></span><br><span class="line">console.log(Demo.prototype) //显示原型属性</span><br><span class="line"></span><br><span class="line">console.log(d.__proto__) //隐式原型属性</span><br><span class="line"></span><br><span class="line">console.log(Demo.prototype === d.__proto__)</span><br><span class="line"></span><br><span class="line">//程序员通过显示原型属性操作原型对象，追加一个x属性，值为99</span><br><span class="line">Demo.prototype.x = 99</span><br><span class="line"></span><br><span class="line">console.log(&#x27;@&#x27;,d) */</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p>Vue 的单文件组件（Single-File Component）是一种将组件的 HTML 模板、JavaScript 代码和 CSS 样式放在一个单独的文件中进行组件开发的方式，能够使得组件的可读性和可维护性更加高效。</p><p>在单文件组件中，通常使用 <code>.vue</code> 文件扩展名，包含三个部分：</p><ol><li><code>&lt;template&gt;</code> 标签：组件的 HTML 模板。</li><li><code>&lt;script&gt;</code> 标签：组件的 JavaScript 代码，包括组件的数据、方法、计算属性、生命周期钩子等。</li><li><code>&lt;style&gt;</code> 标签：组件的 CSS 样式，可以使用普通的 CSS 或者预处理器（如 Sass、Less）来编写。</li></ol><p>在下面示例中，单文件组件中包含了一个 <code>&lt;template&gt;</code> 标签，用于渲染组件的 HTML 模板，一个 <code>&lt;script&gt;</code> 标签，用于定义组件的 JavaScript 代码，以及一个 <code>&lt;style&gt;</code> 标签，用于定义组件的 CSS 样式。<code>&lt;script&gt;</code> 标签中使用 <code>export default</code> 导出一个组件选项对象，包括组件的名称和数据等信息。<code>&lt;style&gt;</code> 标签中使用 <code>scoped</code> 属性来确保 CSS 样式只在当前组件内生效。</p><p>单文件组件使得组件的逻辑更加清晰，便于管理和维护。在 Vue 项目中，使用单文件组件可以有效地提高开发效率，同时也可以通过组件的复用性和可维护性提高项目的可扩展性和可维护性。</p><p>例如，下面是一个简单的 Vue 单文件组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; message &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;HelloWorld&#x27;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#x27;Hello World!&#x27;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1 &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue的脚手架"><a href="#Vue的脚手架" class="headerlink" title="Vue的脚手架"></a>Vue的脚手架</h1><blockquote><p>什么是脚手架</p></blockquote><p>Vue的脚手架是一个用来快速搭建Vue项目的模板工具。它提供了一个可以使用的项目框架，包括目录结构、配置文件、依赖包等。脚手架的目的是让开发者更快速地搭建基础项目架构，而不用从头开始创建目录结构和配置文件，使得开发者可以专注于业务逻辑的开发。Vue最常用的脚手架是Vue CLI，它提供了一个命令行界面，可以快速创建、配置和管理Vue项目。</p><p>文档地址: <a href="https://cli.vuejs.org/zh/">https://cli.vuejs.org/zh/</a></p><blockquote><p>下载搭建脚手架步骤</p></blockquote><ul><li><p>全局安装@vue&#x2F;cli，指令为<strong>npm install -g @vue&#x2F;cli</strong>，只执行一次，打开cmd命令行窗口输入即可，若下载网速较慢，可先配置淘宝镜像，命令为：<code>npm config set registry https://registry.npm.taobao.org</code></p></li><li><p>切换到你要创建项目的目录，然后使用命令创建项目：vue create xxxx</p></li><li><p>启动项目：npm run serve，可以在直接在cmd命令行窗口使用该命令，或者使用VSCode打开后在终端运行该代码（推荐使用）</p></li><li><p>备注：</p><ul><li>如出现下载缓慢请配置 npm 淘宝镜像：<code>npm config set registry https://registry.npm.taobao.org</code></li><li>Vue 脚手架隐藏了所有 webpack 相关的配置，若想查看具体的 webpakc 配置并且输出在某个文件中（output.js文件）中展示，请执行：vue inspect &gt; output.j</li></ul></li></ul><blockquote><p>Vue脚手架模板项目基本结构</p></blockquote><ul><li><p>node_modules：存放着项目中所有依赖的模块和库。这些模块和库可以通过 npm 包管理器安装。Vue 项目的脚手架也可以使用 npm 安装需要的模块，从而在项目中使用这些模块。node_modules 目录中存放着这些依赖的模块和库，以方便在项目中引用。</p></li><li><p>public：存放静态资源，例如 favicon.ico 和 index.html。</p><ul><li>favicon.ico: 页签图标</li><li>index.html: 主页面</li></ul></li><li><p>src：存放源代码，是 Vue 应用的核心部分。</p><ul><li>assets: 存放静态资源，存放需要经过 webpack 编译的资源，例如图片、字体等。</li><li>logo.png</li></ul></li><li><p>component: 存放Vue组件</p><ul><li>HelloWorld.vue</li></ul></li><li><p>App.vue：汇总所有组件</p></li><li><p>main.js：入口文件</p></li><li><p>.gitignore：git 版本管制忽略的配置</p></li><li><p>babel.config.js：babel 的配置文件</p><ul><li>Babel是一个JavaScript编译器，可以将高版本的JavaScript代码编译为低版本的代码，以适应不同的浏览器环境。在Vue的脚手架结构中，babel.config.js文件可以用来配置Babel编译JavaScript代码的方式。这样，开发者可以根据自己的需求，使用Babel编译代码，保证应用能够在多种浏览器环境中正常运行。</li></ul></li><li><p>package.json：应用包配置文件</p></li><li><p>README.md:：应用描述文件</p></li><li><p>package-lock.json：包版本控制文件</p></li><li><p>vue.config.js：这个文件是一个用于配置Vue脚手架工具的JavaScript文件。它是可选的，但是当您需要为Vue项目进行自定义配置时，它是非常有用的。您可以在这个文件中配置一些额外的选项，如Webpack的配置，构建设置，开发服务器的配置，插件的使用等。这个文件的存在对于在开发环境和生产环境中获得最佳的性能和体验是非常重要的。详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></p></li></ul><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-WDpamB6l-1679118232368)(null)]</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-dDBIjhSC-1679118231100)(null)]</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-GlEBgP7o-1679118232227)(null)]</p><h3 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h3><p>创建School.vue，Student.vue，App.vue，main.js，index.html文件，这五个文件组成一个简单的单文件组件案例，通过Vue的脚手架（Vue CLI）运行该案例并且展示在页面上，通过命令vue create vue-test，创建一个vue-test目录（就是一个脚手架目录）</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230213104441909.png" alt="image-20230213104441909"></p><ul><li>School.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    //这里的name的value值不能写成School或school，只能用‘-’来连接，不然会保错,或者驼峰名也行</span><br><span class="line">name:&#x27;my-school&#x27;,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京昌平&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">showName()&#123;</span><br><span class="line">alert(this.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.demo&#123;</span><br><span class="line">background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>Student.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    //这里的name的value值不能写成Student或student，只能用‘-’来连接，不然会保错</span><br><span class="line">name:&#x27;my-student&#x27;,</span><br><span class="line">data()&#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;张三&#x27;,</span><br><span class="line">age:18</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;School&gt;&lt;/School&gt;</span><br><span class="line">&lt;Student&gt;&lt;/Student&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">//引入组件</span><br><span class="line">import School from &#x27;./components/School.vue&#x27;</span><br><span class="line">import Student from &#x27;./components/Student.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;</span><br><span class="line">School,</span><br><span class="line">Student</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>main.js</li></ul><p><code>render</code> 函数在 Vue 中是渲染函数，用于渲染组件的内容。它是一个函数，返回一个 VNode 对象。在 <code>main.js</code> 文件中，它通常是用于渲染 Vue 应用的根组件。通常使用 JSX 语法在 <code>render</code> 函数中定义根组件，并使用 Vue 的模板语法在其中定义子组件。</p><p>简单来说，<code>render</code> 函数指定了渲染一个组件的方式，以及该组件的模板是如何组织的。</p><p>vue.js与vue.runtime.xxx.js的区别</p><p>(1).vue.js是完整版的Vue，包含：核心功能+模板解析器。</p><p>(2).vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</p><p>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//引入vue，不完整的，精简版(不包含模板解析器），所以在new一个Vue实例时需要通过render函数来定义组件才能正常运行</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">//关闭vue的生产提示</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">//创建vue实例</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><ul><li>index.html</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">      //针对IE浏览器的适配</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0&quot;&gt;</span><br><span class="line">      //网址logo</span><br><span class="line">    &lt;link rel=&quot;icon&quot; href=&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;noscript&gt;</span><br><span class="line">      &lt;strong&gt;We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.&lt;/strong&gt;</span><br><span class="line">    &lt;/noscript&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!-- built files will be auto injected --&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h3><ul><li><p>Vue.js 中的 ref 属性是用于直接访问 Vue 实例或子组件内部的元素或组件实例。这对于在组件外获取或操纵组件内部元素的需求非常有用。</p></li><li><p>使用 ref 的方式非常简单，您可以在元素或组件上设置 ref属性并将其设置为一个字符串。然后，您可以在组件内通过 this.$refs 访问该元素或组件。</p></li><li><p>在下面的代码中，我们在输入框上设置了 ref 属性，并将其设置为 “input”。然后，在提交按钮的点击事件处理函数中，我们可以通过 this.$refs.input 访问该输入框元素，并读取其 value 属性。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input ref=&quot;input&quot; /&gt;</span><br><span class="line">    &lt;button @click=&quot;submit&quot;&gt;Submit&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    submit() &#123;</span><br><span class="line">      console.log(this.$refs.input.value);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="props配置"><a href="#props配置" class="headerlink" title="props配置"></a>props配置</h3><p>Vue.js 中的 props 是一个组件的配置项，用于将数据从父组件传递到子组件。通过 props，父组件可以向子组件传递数据，子组件再将该数据呈现在视图中。</p><ul><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据</p><ul><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;] </code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">    type:String, //类型</span><br><span class="line">    required:true, //必要性</span><br><span class="line">    default:&#x27;张三&#x27; //默认值</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></li><li><p>ChildComponent.vue</p></li></ul><p>在下面的代码中，我们通过 props 配置了一个名为 “message” 的参数，该参数是必需的且为字符串类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    message: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>FatherComponent.vue</li></ul><p>在父组件中，您可以通过传递一个 message 属性来使用该子组件，并向其传递数据，在下面的代码中，我们在父组件中使用了子组件，并向其传递了一个 “Hello, world!” 的消息。该子组件再将该数据呈现在视图中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child-component message=&quot;Hello, world!&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent.vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ChildComponent,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="mixin混入-合"><a href="#mixin混入-合" class="headerlink" title="mixin混入(合)"></a>mixin混入(合)</h3><p>Vue的mixin是一个可复用的代码块，可以包含组件的数据、生命周期钩子、方法和计算属性等。它可以被一个或多个组件使用，以达到复用代码的目的。在实际使用中，你可以将相似的代码放入一个 mixin 中，然后将这个 mixin 混入多个组件中。这样可以大大简化代码，同时也使代码变得更易维护。</p><p>全局混入：Vue.mixin(xxx)</p><p>局部混入：mixins:[‘xxx’]</p><ul><li>mixins.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export const mixins = &#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">showName()&#123;</span><br><span class="line">alert(this.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">console.log(&#x27;你好啊！&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>Vue.js 的插件是一种扩展 Vue 的功能的方法。插件可以是实现一些自定义功能的组件、指令、过滤器、混入以及其他东西。</p><p>在 Vue 中安装插件的方法如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import MyPlugin from &#x27;./my-plugin.js&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(MyPlugin)</span><br></pre></td></tr></table></figure><p>上面的代码将导入一个名为 MyPlugin 的插件，然后调用 Vue.use() 方法将其安装到 Vue 中。</p><p>插件必须暴露一个 install 方法，该方法将被 Vue 调用，并传递一个 Vue 构造函数作为参数。插件的 install 方法通常实现以下操作：</p><ul><li>定义一个全局组件、指令、过滤器或混入。</li><li>添加一个全局 API。</li><li>定义一个 Vue 原型属性。</li></ul><p>下面是一个简单的插件示例，下面的代码定义了一个名为 MyPlugin 的插件，该插件通过定义一个 Vue 原型方法 $myMethod() 来添加一个全局 API。安装完插件后，你就可以在任意 Vue 组件中使用 $myMethod() 方法了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const MyPlugin = &#123;</span><br><span class="line">  install (Vue, options) &#123;</span><br><span class="line">    Vue.prototype.$myMethod = function (methodOptions) &#123;</span><br><span class="line">      // 实现自己的业务逻辑...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default MyPlugin</span><br></pre></td></tr></table></figure><h3 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h3><p>Vue的scoped是一种特殊的 CSS 的作用域限制，用于防止样式冲突，以确保组件的样式不会影响其他组件。在组件中使用 scoped 属性后，该组件内的样式将仅影响该组件内的元素，不会影响到整个页面的其他元素。</p><p>这样的话，我们在构建多个组件时，不需要担心样式会相互影响，从而使代码更加清晰、可维护。</p><p>使用 scoped 属性的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!-- 这里的样式只会影响到当前组件内的元素 --&gt;</span><br><span class="line">    &lt;style scoped&gt;</span><br><span class="line">      /* 这里是样式代码 */</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h3><p>Vue 的 Todo 应用是一种经典的任务管理应用，用于练习和理解 Vue 的基本功能，包括数据绑定、事件处理、条件渲染、循环渲染等。</p><p>在 Todo 应用中，用户可以通过输入框输入任务项，并在列表中显示。同时，用户也可以通过复选框标记已完成的任务，或者删除不需要的任务。</p><p>组件化编码流程</p><p>(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><ul><li>一个组件在用：放在组件自身即可。</li><li>一些组件在用：放在他们共同的父组件上（<span style="color:red">状态提升</span>）。</li></ul><p>(3).实现交互：从绑定事件开始</p><p>props适用于</p><ul><li>父组件 &#x3D;&#x3D;&gt; 子组件 通信</li><li>子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父先给子一个函数）</li></ul><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p><p>TodoList案例（1.0版本）</p><ul><li>MyFooter.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;todo-footer&quot; v-show=&quot;total&quot;&gt;</span><br><span class="line">&lt;label&gt;</span><br><span class="line">&lt;!-- &lt;input type=&quot;checkbox&quot; :checked=&quot;isAll&quot; @change=&quot;checkAll&quot;/&gt; --&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; v-model=&quot;isAll&quot;/&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;span&gt;</span><br><span class="line">&lt;span&gt;已完成&#123;&#123;doneTotal&#125;&#125;&lt;/span&gt; / 全部&#123;&#123;total&#125;&#125;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;button class=&quot;btn btn-danger&quot; @click=&quot;clearAll&quot;&gt;清除已完成任务&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyFooter&#x27;,</span><br><span class="line">props:[&#x27;todos&#x27;,&#x27;checkAllTodo&#x27;,&#x27;clearAllTodo&#x27;],</span><br><span class="line">computed: &#123;</span><br><span class="line">//总数</span><br><span class="line">total()&#123;</span><br><span class="line">return this.todos.length</span><br><span class="line">&#125;,</span><br><span class="line">//已完成数</span><br><span class="line">doneTotal()&#123;</span><br><span class="line">//此处使用reduce方法做条件统计</span><br><span class="line">/* const x = this.todos.reduce((pre,current)=&gt;&#123;</span><br><span class="line">console.log(&#x27;@&#x27;,pre,current)</span><br><span class="line">return pre + (current.done ? 1 : 0)</span><br><span class="line">&#125;,0) */</span><br><span class="line">//简写</span><br><span class="line">return this.todos.reduce((pre,todo)=&gt; pre + (todo.done ? 1 : 0) ,0)</span><br><span class="line">&#125;,</span><br><span class="line">//控制全选框</span><br><span class="line">isAll:&#123;</span><br><span class="line">//全选框是否勾选</span><br><span class="line">get()&#123;</span><br><span class="line">return this.doneTotal === this.total &amp;&amp; this.total &gt; 0</span><br><span class="line">&#125;,</span><br><span class="line">//isAll被修改时set被调用</span><br><span class="line">set(value)&#123;</span><br><span class="line">this.checkAllTodo(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">/* checkAll(e)&#123;</span><br><span class="line">this.checkAllTodo(e.target.checked)</span><br><span class="line">&#125; */</span><br><span class="line">//清空所有已完成</span><br><span class="line">clearAll()&#123;</span><br><span class="line">this.clearAllTodo()</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*footer*/</span><br><span class="line">.todo-footer &#123;</span><br><span class="line">height: 40px;</span><br><span class="line">line-height: 40px;</span><br><span class="line">padding-left: 6px;</span><br><span class="line">margin-top: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-footer label &#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">margin-right: 20px;</span><br><span class="line">cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-footer label input &#123;</span><br><span class="line">position: relative;</span><br><span class="line">top: -1px;</span><br><span class="line">vertical-align: middle;</span><br><span class="line">margin-right: 5px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-footer button &#123;</span><br><span class="line">float: right;</span><br><span class="line">margin-top: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>MyHeader.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;todo-header&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; v-model=&quot;title&quot; @keyup.enter=&quot;add&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //npm i nanoid命令下载nanoid库</span><br><span class="line">import &#123;nanoid&#125; from &#x27;nanoid&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyHeader&#x27;,</span><br><span class="line">//接收从App传递过来的addTodo</span><br><span class="line">props:[&#x27;addTodo&#x27;],</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">//收集用户输入的title</span><br><span class="line">title:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">add()&#123;</span><br><span class="line">//校验数据</span><br><span class="line">if(!this.title.trim()) return alert(&#x27;输入不能为空&#x27;)</span><br><span class="line">//将用户的输入包装成一个todo对象</span><br><span class="line">const todoObj = &#123;id:nanoid(),title:this.title,done:false&#125;</span><br><span class="line">//通知App组件去添加一个todo对象</span><br><span class="line">this.addTodo(todoObj)</span><br><span class="line">//清空输入</span><br><span class="line">this.title = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*header*/</span><br><span class="line">.todo-header input &#123;</span><br><span class="line">width: 560px;</span><br><span class="line">height: 28px;</span><br><span class="line">font-size: 14px;</span><br><span class="line">border: 1px solid #ccc;</span><br><span class="line">border-radius: 4px;</span><br><span class="line">padding: 4px 7px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-header input:focus &#123;</span><br><span class="line">outline: none;</span><br><span class="line">border-color: rgba(82, 168, 236, 0.8);</span><br><span class="line">box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>MyIteam.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;label&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot; @change=&quot;handleCheck(todo.id)&quot;/&gt;</span><br><span class="line">&lt;!-- 如下代码也能实现功能，但是不太推荐，因为有点违反原则，因为修改了props --&gt;</span><br><span class="line">&lt;!-- &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot;/&gt; --&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;button class=&quot;btn btn-danger&quot; @click=&quot;handleDelete(todo.id)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyItem&#x27;,</span><br><span class="line">//声明接收todo、checkTodo、deleteTodo</span><br><span class="line">props:[&#x27;todo&#x27;,&#x27;checkTodo&#x27;,&#x27;deleteTodo&#x27;],</span><br><span class="line">methods: &#123;</span><br><span class="line">//勾选or取消勾选</span><br><span class="line">handleCheck(id)&#123;</span><br><span class="line">//通知App组件将对应的todo对象的done值取反</span><br><span class="line">this.checkTodo(id)</span><br><span class="line">&#125;,</span><br><span class="line">//删除</span><br><span class="line">handleDelete(id)&#123;</span><br><span class="line">if(confirm(&#x27;确定删除吗？&#x27;))&#123;</span><br><span class="line">//通知App组件将对应的todo对象删除</span><br><span class="line">this.deleteTodo(id)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*item*/</span><br><span class="line">li &#123;</span><br><span class="line">list-style: none;</span><br><span class="line">height: 36px;</span><br><span class="line">line-height: 36px;</span><br><span class="line">padding: 0 5px;</span><br><span class="line">border-bottom: 1px solid #ddd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li label &#123;</span><br><span class="line">float: left;</span><br><span class="line">cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li label li input &#123;</span><br><span class="line">vertical-align: middle;</span><br><span class="line">margin-right: 6px;</span><br><span class="line">position: relative;</span><br><span class="line">top: -1px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li button &#123;</span><br><span class="line">float: right;</span><br><span class="line">display: none;</span><br><span class="line">margin-top: 3px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li:before &#123;</span><br><span class="line">content: initial;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li:last-child &#123;</span><br><span class="line">border-bottom: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li:hover&#123;</span><br><span class="line">background-color: #ddd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">li:hover button&#123;</span><br><span class="line">display: block;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>MyList.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">&lt;MyItem </span><br><span class="line">v-for=&quot;todoObj in todos&quot;</span><br><span class="line">:key=&quot;todoObj.id&quot; </span><br><span class="line">:todo=&quot;todoObj&quot; </span><br><span class="line">:checkTodo=&quot;checkTodo&quot;</span><br><span class="line">:deleteTodo=&quot;deleteTodo&quot;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyItem from &#x27;./MyItem&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyList&#x27;,</span><br><span class="line">components:&#123;MyItem&#125;,</span><br><span class="line">//声明接收App传递过来的数据，其中todos是自己用的，checkTodo和deleteTodo是给子组件MyItem用的</span><br><span class="line">props:[&#x27;todos&#x27;,&#x27;checkTodo&#x27;,&#x27;deleteTodo&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/*main*/</span><br><span class="line">.todo-main &#123;</span><br><span class="line">margin-left: 0px;</span><br><span class="line">border: 1px solid #ddd;</span><br><span class="line">border-radius: 2px;</span><br><span class="line">padding: 0px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-empty &#123;</span><br><span class="line">height: 40px;</span><br><span class="line">line-height: 40px;</span><br><span class="line">border: 1px solid #ddd;</span><br><span class="line">border-radius: 2px;</span><br><span class="line">padding-left: 5px;</span><br><span class="line">margin-top: 10px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div id=&quot;root&quot;&gt;</span><br><span class="line">&lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">&lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">&lt;MyHeader :addTodo=&quot;addTodo&quot;/&gt;</span><br><span class="line">&lt;MyList :todos=&quot;todos&quot; :checkTodo=&quot;checkTodo&quot; :deleteTodo=&quot;deleteTodo&quot;/&gt;</span><br><span class="line">&lt;MyFooter :todos=&quot;todos&quot; :checkAllTodo=&quot;checkAllTodo&quot; :clearAllTodo=&quot;clearAllTodo&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyHeader from &#x27;./components/MyHeader&#x27;</span><br><span class="line">import MyList from &#x27;./components/MyList&#x27;</span><br><span class="line">import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;MyHeader,MyList,MyFooter&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">//由于todos是MyHeader组件和MyFooter组件都在使用，所以放在App中（状态提升）</span><br><span class="line">todos:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,title:&#x27;抽烟&#x27;,done:true&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,title:&#x27;喝酒&#x27;,done:false&#125;,</span><br><span class="line">&#123;id:&#x27;003&#x27;,title:&#x27;开车&#x27;,done:true&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">//添加一个todo</span><br><span class="line">addTodo(todoObj)&#123;</span><br><span class="line">this.todos.unshift(todoObj)</span><br><span class="line">&#125;,</span><br><span class="line">//勾选or取消勾选一个todo</span><br><span class="line">checkTodo(id)&#123;</span><br><span class="line">this.todos.forEach((todo)=&gt;&#123;</span><br><span class="line">if(todo.id === id) todo.done = !todo.done</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">//删除一个todo</span><br><span class="line">deleteTodo(id)&#123;</span><br><span class="line">this.todos = this.todos.filter( todo =&gt; todo.id !== id )</span><br><span class="line">&#125;,</span><br><span class="line">//全选or取消全选</span><br><span class="line">checkAllTodo(done)&#123;</span><br><span class="line">this.todos.forEach((todo)=&gt;&#123;</span><br><span class="line">todo.done = done</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">//清除所有已经完成的todo</span><br><span class="line">clearAllTodo()&#123;</span><br><span class="line">this.todos = this.todos.filter((todo)=&gt;&#123;</span><br><span class="line">return !todo.done</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">/*base*/</span><br><span class="line">body &#123;</span><br><span class="line">background: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.btn &#123;</span><br><span class="line">display: inline-block;</span><br><span class="line">padding: 4px 12px;</span><br><span class="line">margin-bottom: 0;</span><br><span class="line">font-size: 14px;</span><br><span class="line">line-height: 20px;</span><br><span class="line">text-align: center;</span><br><span class="line">vertical-align: middle;</span><br><span class="line">cursor: pointer;</span><br><span class="line">box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);</span><br><span class="line">border-radius: 4px;</span><br><span class="line">&#125;</span><br><span class="line">.btn-danger &#123;</span><br><span class="line">color: #fff;</span><br><span class="line">background-color: #da4f49;</span><br><span class="line">border: 1px solid #bd362f;</span><br><span class="line">&#125;</span><br><span class="line">.btn-danger:hover &#123;</span><br><span class="line">color: #fff;</span><br><span class="line">background-color: #bd362f;</span><br><span class="line">&#125;</span><br><span class="line">.btn:focus &#123;</span><br><span class="line">outline: none;</span><br><span class="line">&#125;</span><br><span class="line">.todo-container &#123;</span><br><span class="line">width: 600px;</span><br><span class="line">margin: 0 auto;</span><br><span class="line">&#125;</span><br><span class="line">.todo-container .todo-wrap &#123;</span><br><span class="line">padding: 10px;</span><br><span class="line">border: 1px solid #ddd;</span><br><span class="line">border-radius: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>main.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//引入Vue</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">//引入App</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">//关闭Vue的生产提示</span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line">//创建vm</span><br><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#app&#x27;,</span><br><span class="line">render: h =&gt; h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="浏览器本地存储"><a href="#浏览器本地存储" class="headerlink" title="浏览器本地存储"></a>浏览器本地存储</h3><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p><ul><li>localStorage和SessionStorage</li></ul><p>localStorage是浏览器 Web Storage API 的一部分，是一种用于在浏览器端存储数据的机制。它与sessionStorage非常类似，但是数据在浏览器关闭后也不会被清除，而<code>sessionStorage</code>的数据随着浏览器关闭而清除。</p><p>你可以使用localStorage来存储用户的配置、历史记录等信息。localStorage有两个重要的方法：setItem和getItem。通过使用它们，你可以在浏览器端存储和获取数据。SessionStorage使用方法类似于localStorage，也是使用sessionStorage对象的setItem()和getItem()方法来存储和读取数据：</p><ul><li><p>相关API</p><ul><li>xxxxxStorage.setItem(‘key’, ‘value’)，该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</li><li>xxxxxStorage.getItem(‘person’)，该方法接受一个键名作为参数，返回键名对应的值。</li><li>xxxxxStorage.removeItem(‘key’)，该方法接受一个键名作为参数，并把该键名从存储中删除。</li><li>xxxxxStorage.clear()，该方法会清空存储中的所有数据。</li></ul></li><li><p>备注</p></li><li><p>SessionStorage存储的内容会随着浏览器窗口关闭而消失</p></li><li><p>LocalStorage存储的内容，需要手动清除才会消失</p></li><li><p>xxxxxStorage.getItem(xxx)，如果xxx对应的value获取不到，那么getItem的返回值是null</p></li><li><p>JSON.parse(null)，的结果依然是null</p></li><li><p>localStorage.html</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;localStorage&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;localStorage&lt;/h2&gt;</span><br><span class="line">&lt;button onclick=&quot;saveData()&quot;&gt;点我保存一个数据&lt;/button&gt;</span><br><span class="line">&lt;button onclick=&quot;readData()&quot;&gt;点我读取一个数据&lt;/button&gt;</span><br><span class="line">&lt;button onclick=&quot;deleteData()&quot;&gt;点我删除一个数据&lt;/button&gt;</span><br><span class="line">&lt;button onclick=&quot;deleteAllData()&quot;&gt;点我清空一个数据&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; &gt;</span><br><span class="line">let p = &#123;name:&#x27;张三&#x27;,age:18&#125;</span><br><span class="line"></span><br><span class="line">function saveData()&#123;</span><br><span class="line">localStorage.setItem(&#x27;msg&#x27;,&#x27;hello!!!&#x27;)</span><br><span class="line">localStorage.setItem(&#x27;msg2&#x27;,666)</span><br><span class="line">localStorage.setItem(&#x27;person&#x27;,JSON.stringify(p))</span><br><span class="line">&#125;</span><br><span class="line">function readData()&#123;</span><br><span class="line">console.log(localStorage.getItem(&#x27;msg&#x27;))</span><br><span class="line">console.log(localStorage.getItem(&#x27;msg2&#x27;))</span><br><span class="line"></span><br><span class="line">const result = localStorage.getItem(&#x27;person&#x27;)</span><br><span class="line">console.log(JSON.parse(result))</span><br><span class="line"></span><br><span class="line">// console.log(localStorage.getItem(&#x27;msg3&#x27;))</span><br><span class="line">&#125;</span><br><span class="line">function deleteData()&#123;</span><br><span class="line">localStorage.removeItem(&#x27;msg2&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">function deleteAllData()&#123;</span><br><span class="line">localStorage.clear()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>SessionStorage.html</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;sessionStorage&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;sessionStorage&lt;/h2&gt;</span><br><span class="line">&lt;button onclick=&quot;saveData()&quot;&gt;点我保存一个数据&lt;/button&gt;</span><br><span class="line">&lt;button onclick=&quot;readData()&quot;&gt;点我读取一个数据&lt;/button&gt;</span><br><span class="line">&lt;button onclick=&quot;deleteData()&quot;&gt;点我删除一个数据&lt;/button&gt;</span><br><span class="line">&lt;button onclick=&quot;deleteAllData()&quot;&gt;点我清空一个数据&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; &gt;</span><br><span class="line">let p = &#123;name:&#x27;张三&#x27;,age:18&#125;</span><br><span class="line"></span><br><span class="line">function saveData()&#123;</span><br><span class="line">sessionStorage.setItem(&#x27;msg&#x27;,&#x27;hello!!!&#x27;)</span><br><span class="line">sessionStorage.setItem(&#x27;msg2&#x27;,666)</span><br><span class="line">sessionStorage.setItem(&#x27;person&#x27;,JSON.stringify(p))</span><br><span class="line">&#125;</span><br><span class="line">function readData()&#123;</span><br><span class="line">console.log(sessionStorage.getItem(&#x27;msg&#x27;))</span><br><span class="line">console.log(sessionStorage.getItem(&#x27;msg2&#x27;))</span><br><span class="line"></span><br><span class="line">const result = sessionStorage.getItem(&#x27;person&#x27;)</span><br><span class="line">console.log(JSON.parse(result))</span><br><span class="line"></span><br><span class="line">// console.log(sessionStorage.getItem(&#x27;msg3&#x27;))</span><br><span class="line">&#125;</span><br><span class="line">function deleteData()&#123;</span><br><span class="line">sessionStorage.removeItem(&#x27;msg2&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">function deleteAllData()&#123;</span><br><span class="line">sessionStorage.clear()</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h3><p>Vue的组件自定义事件是指在组件间通信时，使用自定义事件来传递数据或者从子组件通知父组件发生了某个事件的一种方式。</p><ol><li><p>一种组件间通信的方式，适用于：<strong style="color:red">子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（<span style="color:red">事件的回调在A中</span>）。</p></li><li><p>绑定自定义事件：</p></li><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">xxx</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="variable language_">this</span>.<span class="property">test</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用once修饰符，或$once方法。</p></li><li><p>触发自定义事件：this.$emit(‘atguigu’,数据)</p></li><li><p>解绑自定义事件this.$off(‘atguigu’)</p></li><li><p>组件上也可以绑定原生DOM事件，需要使用native修饰符。</p></li><li><p>注意：通过this.$refs.xxx.$on(‘atguigu’,回调)绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><ul><li>定义自定义事件：在子组件中通过 $emit 方法定义一个自定义事件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;emitEvent&quot;&gt;Emit Custom Event&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    emitEvent() &#123;</span><br><span class="line">      this.$emit(&#x27;custom-event&#x27;, &#x27;This is a custom event&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>使用自定义事件：在父组件中，通过给子组件绑定自定义事件，监听到子组件触发的事件，通过这种方式，子组件和父组件之间就可以通过自定义事件来进行通信了</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;child-component @custom-event=&quot;eventHandler&quot;&gt;&lt;/child-component&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import ChildComponent from &#x27;./ChildComponent&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ChildComponent</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    eventHandler(data) &#123;</span><br><span class="line">      console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h3><p>Vue的全局事件总线是一个事件订阅&#x2F;发布系统，允许在不直接相关的组件之间进行通信。通常，组件之间的通信是通过父子关系或者混入来实现的，但是有时组件之间的关系可能比较复杂，需要更为灵活的通信方式。</p><p>全局事件总线可以用于解决跨组件的通信问题，并且对于组件的结构和职责关系没有影响。但是，使用全局事件总线需要注意，它可能导致代码难以维护，因为在多个组件中发布和订阅事件可能需要更多的代码和维护。因此，使用全局事件总线需要谨慎考虑。</p><p>使用全局事件总线的方法如下：</p><ul><li>实例化一个 Vue 实例作为事件总线：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 实例化一个 Vue 实例作为事件总线</span><br><span class="line">var bus = new Vue();</span><br></pre></td></tr></table></figure><ul><li>使用 $emit 方法发布事件：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bus.$emit(&#x27;eventName&#x27;, eventData);</span><br></pre></td></tr></table></figure><ul><li>使用 $on 方法订阅事件：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bus.$on(&#x27;eventName&#x27;, function(eventData) &#123;</span><br><span class="line">  // 处理事件</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h3><ul><li><p>Vue提供了一种简单的方式来处理跨组件的数据通信，这种方式称为消息订阅与发布。</p></li><li><p>在消息订阅与发布模式中，一个组件可以发布消息，另一个组件可以订阅消息。当订阅的组件需要使用该消息时，它就可以在特定的事件中触发。</p></li><li><p>pubsub-js 是一个发布&#x2F;订阅消息库，它允许您实现 JavaScript 应用程序中的消息通信。发布者可以发布消息，订阅者可以通过订阅特定主题来接收它们。这种方法是一种解耦技术，可以让组件以更简洁的方式进行通信。安装命令 npm i pubsub-js，在终端执行即可，使用该库时记得使用import导入</p></li><li><p>使用<code>pubsub-js</code>可以方便地解决多个模块之间的消息传递问题，并且代码实现较为简单。使用方法：</p><ul><li>发布消息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var PubSub = require(&#x27;pubsub-js&#x27;);</span><br><span class="line">PubSub.publish(&#x27;messageName&#x27;, data);</span><br></pre></td></tr></table></figure><ul><li>订阅消息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var PubSub = require(&#x27;pubsub-js&#x27;);</span><br><span class="line">var token = PubSub.subscribe(&#x27;messageName&#x27;, function(msg, data)&#123;</span><br><span class="line">  console.log(msg, data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>取消订阅</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PubSub.unsubscribe(token);</span><br></pre></td></tr></table></figure></li></ul><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><p>nextTick是Vue.js的一个异步函数，用于在下一次 DOM 更新循环结束之后执行延迟回调。这对于某些需要在状态更改后操作 DOM 的场景非常有用，通过使用 <code>nextTick</code> 函数，您可以在 DOM 完成更新后执行回调，而不是在状态更改后立即执行。</p><ul><li><p>语法：this.$nextTick(回调函数)</p></li><li><p>作用：在下一次 DOM 更新结束后执行其指定的回调。</p></li><li><p>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 修改数据</span><br><span class="line">this.message = &#x27;Hello&#x27;</span><br><span class="line"></span><br><span class="line">// DOM 还没有更新</span><br><span class="line">this.$nextTick(function () &#123;</span><br><span class="line">  // DOM 已经更新</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h3><p>Vue 可以使用内置的动画系统，以简单和强大的方式创建动画效果。</p><p>Vue 提供了两种创建动画的方法：</p><ul><li><p>利用 transition 组件：可以通过为组件或元素添加 v-if 和 v-show 指令来实现动画。</p></li><li><p>利用动画组件：可以在组件中定义动画并使用 JavaScript 控制动画的过程。</p></li></ul><p>你可以在 Vue 组件中定义 CSS 动画，然后在 JavaScript 代码中使用 v-on 指令来触发这些动画。Vue 还提供了关键帧动画支持，可以更灵活地定义动画。</p><p>动画写法：</p><ol><li>准备好样式：</li></ol><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul><ol start="2"><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">   &lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol><ul><li>第三方CSS动画库（Animate.css）</li></ul><p>网址：<a href="https://animate.style/">https://animate.style/</a></p><p>命令：npm install animate.css –save，在终端执行该命令下载该库，里面有许多动画效果，可供选择，根据官方文档说明进行操作即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">        //使用第三方库的动画效果例子，不需要自己写CSS动画</span><br><span class="line">        //直接使用下面的属性key=“value”</span><br><span class="line">        //value为官方里的某个动画名</span><br><span class="line">&lt;transition-group </span><br><span class="line">appear</span><br><span class="line">name=&quot;animate__animated animate__bounce&quot; </span><br><span class="line">enter-active-class=&quot;animate__swing&quot;</span><br><span class="line">leave-active-class=&quot;animate__backOutUp&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;h1 v-show=&quot;!isShow&quot; key=&quot;1&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot; key=&quot;2&quot;&gt;尚硅谷！&lt;/h1&gt;</span><br><span class="line">&lt;/transition-group&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#x27;animate.css&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Test&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">isShow:true</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1&#123;</span><br><span class="line">background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="Vue中的Ajax"><a href="#Vue中的Ajax" class="headerlink" title="Vue中的Ajax"></a>Vue中的Ajax</h1><h2 id="Ajax的跨域问题"><a href="#Ajax的跨域问题" class="headerlink" title="Ajax的跨域问题"></a>Ajax的跨域问题</h2><p>开发环境下，前端项目通常运行在一个不同的域名或端口下，而后端 API 接口又运行在另一个域名或端口下，因此可能会遇到跨域问题。解决开发环境下的跨域问题，可以通过以下几种方式：</p><ol><li>配置代理服务器：在 vue.config.js 或者 webpack.config.js中配置一个代理服务器，将前端请求转发到后端服务器，以解决跨域问题。</li><li>使用 JSONP：通过 JSONP 跨域请求数据，JSONP 原理是利用 <code>&lt;script&gt;</code> 标签不受同源策略的限制，动态添加 <code>&lt;script&gt;</code> 标签来获取数据。</li><li>启用浏览器的跨域资源共享（CORS）功能：如果后端 API 支持跨域资源共享，那么可以在请求头中加上 Origin 字段，并在响应头中添加 Access-Control-Allow-Origin 字段，以允许前端访问后端 API。</li><li>使用反向代理：在开发环境中可以使用 Nginx、Apache 等反向代理服务器，将前端请求转发到后端服务器，以解决跨域问题。</li></ol><p>以上几种方式各有优缺点，开发者可以根据实际需求选择适合自己的方式。</p><h2 id="配置代理服务器"><a href="#配置代理服务器" class="headerlink" title="配置代理服务器"></a>配置代理服务器</h2><p>Vue可以通过配置一个代理服务器来解决跨域请求的问题。要配置代理服务器，可以在 vue.config.js 文件中使用 devServer选项，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      &#x27;/api&#x27;: &#123;</span><br><span class="line">        target: &#x27;http://api.example.com&#x27;,</span><br><span class="line">        changeOrigin: true,</span><br><span class="line">        pathRewrite: &#123;</span><br><span class="line">          &#x27;^/api&#x27;: &#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码中，proxy 选项用于配置代理服务器，其中 &#x2F;api 是需要代理的请求路径，target 是要代理到的目标服务器地址。changeOrigin 选项用于修改请求头中的 Origin 字段，以便服务器正确识别请求的来源。pathRewrite 选项用于重写请求路径，以去掉 &#x2F;api 前缀。</p><p>使用上述配置后，Vue 开发服务器会将所有以 &#x2F;api 开头的请求转发到 <code>http://api.example.com</code>。例如，如果你的应用发起一个请求 <code>http://localhost:8080/api/data</code>，则实际请求的地址会是 <code>http://api.example.com/data</code>。</p><h2 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h2><p>命令：npm i vue-resource，在终端输入该命令下载</p><p>vue-resource 是一个基于 Vue.js 的 HTTP 库，可以方便地进行 HTTP 请求和响应处理。它提供了丰富的特性，包括：</p><ul><li>拦截器：可以在请求和响应过程中添加拦截器，用于处理请求头、响应状态码等信息。</li><li>Promise API：支持 Promise 链式调用，使得异步操作更加方便。</li><li>组件内 HTTP：可以在 Vue 组件中方便地使用 $http 对象来发起 HTTP 请求。</li><li>请求取消：可以通过 cancel 方法来取消请求。</li><li>跨域支持：可以在配置中添加跨域请求的相关配置。</li></ul><p>vue-resource 目前已经不再维护，官方推荐使用 axios 或者 fetch 进行 HTTP 请求处理。</p><h3 id="小案例-1"><a href="#小案例-1" class="headerlink" title="小案例"></a>小案例</h3><p>Github的搜索小案例，接口地址：<a href="https://api.github.com/search/users?q=xxx">https://api.github.com/search/users?q=xxx</a></p><ul><li>List.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">&lt;!-- 展示用户列表 --&gt;</span><br><span class="line">&lt;div v-show=&quot;info.users.length&quot; class=&quot;card&quot; v-for=&quot;user in info.users&quot; :key=&quot;user.login&quot;&gt;</span><br><span class="line">&lt;a :href=&quot;user.html_url&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;img :src=&quot;user.avatar_url&quot; style=&#x27;width: 100px&#x27;/&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;p class=&quot;card-text&quot;&gt;&#123;&#123;user.login&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- 展示欢迎词 --&gt;</span><br><span class="line">&lt;h1 v-show=&quot;info.isFirst&quot;&gt;欢迎使用！&lt;/h1&gt;</span><br><span class="line">&lt;!-- 展示加载中 --&gt;</span><br><span class="line">&lt;h1 v-show=&quot;info.isLoading&quot;&gt;加载中....&lt;/h1&gt;</span><br><span class="line">&lt;!-- 展示错误信息 --&gt;</span><br><span class="line">&lt;h1 v-show=&quot;info.errMsg&quot;&gt;&#123;&#123;info.errMsg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;List&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">info:&#123;</span><br><span class="line">isFirst:true,</span><br><span class="line">isLoading:false,</span><br><span class="line">errMsg:&#x27;&#x27;,</span><br><span class="line">users:[]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">this.$bus.$on(&#x27;updateListData&#x27;,(dataObj)=&gt;&#123;</span><br><span class="line">this.info = &#123;...this.info,...dataObj&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.album &#123;</span><br><span class="line">min-height: 50rem; /* Can be removed; just added for demo purposes */</span><br><span class="line">padding-top: 3rem;</span><br><span class="line">padding-bottom: 3rem;</span><br><span class="line">background-color: #f7f7f7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card &#123;</span><br><span class="line">float: left;</span><br><span class="line">width: 33.333%;</span><br><span class="line">padding: .75rem;</span><br><span class="line">margin-bottom: 2rem;</span><br><span class="line">border: 1px solid #efefef;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card &gt; img &#123;</span><br><span class="line">margin-bottom: .75rem;</span><br><span class="line">border-radius: 100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card-text &#123;</span><br><span class="line">font-size: 85%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>Search.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;section class=&quot;jumbotron&quot;&gt;</span><br><span class="line">&lt;h3 class=&quot;jumbotron-heading&quot;&gt;Search Github Users&lt;/h3&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;enter the name you search&quot; v-model=&quot;keyWord&quot;/&gt;&amp;nbsp;</span><br><span class="line">&lt;button @click=&quot;searchUsers&quot;&gt;Search&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Search&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">keyWord:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">searchUsers()&#123;</span><br><span class="line">//请求前更新List的数据</span><br><span class="line">this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isLoading:true,errMsg:&#x27;&#x27;,users:[],isFirst:false&#125;)</span><br><span class="line">this.$http.get(`https://api.github.com/search/users?q=$&#123;this.keyWord&#125;`).then(</span><br><span class="line">response =&gt; &#123;</span><br><span class="line">console.log(&#x27;请求成功了&#x27;)</span><br><span class="line">//请求成功后更新List的数据</span><br><span class="line">this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isLoading:false,errMsg:&#x27;&#x27;,users:response.data.items&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">error =&gt; &#123;</span><br><span class="line">//请求后更新List的数据</span><br><span class="line">this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isLoading:false,errMsg:error.message,users:[]&#125;)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;Search/&gt;</span><br><span class="line">&lt;List/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Search from &#x27;./components/Search&#x27;</span><br><span class="line">import List from &#x27;./components/List&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;Search,List&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//引入插件</span></span><br><span class="line"><span class="keyword">import</span> vueResource <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">//使用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(vueResource)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><ul><li><p>Vue 中的插槽（Slot）是一种机制，用于在组件中预留一些内容的位置，让父组件可以向子组件中传递任意的 HTML 内容。通过插槽，我们可以更加灵活地组合组件，并可以将组件的复用性和可维护性提高到一个新的层次。</p></li><li><p>Vue 的插槽分为具名插槽和默认插槽两种类型。具名插槽可以在父组件中根据插槽名来向子组件传递内容，而默认插槽则是在父组件没有提供具名插槽的情况下，将内容传递给子组件的默认位置。</p></li></ul><h3 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h3><p>默认插槽是Vue中插槽的一种类型，用于在组件中插入父组件的内容。如果父组件没有提供内容，那么默认插槽中的内容就会显示出来。</p><p>默认插槽可以通过 <code>&lt;slot&gt;</code> 标签来定义，在子组件中使用。</p><p>在下面的示例中，子组件定义了一个默认插槽，它包含了一个默认内容。父组件使用 <code>&lt;my-component&gt;</code> 标签来引入子组件，并将一个 <code>&lt;p&gt;</code> 标签作为默认插槽的内容传递给子组件。因此，在父组件中渲染子组件时，子组件会显示传递的 <code>&lt;p&gt;</code> 标签，而不是默认内容。</p><p>默认插槽也支持具名插槽的使用方式，可以在 <code>&lt;slot&gt;</code> 标签中指定插槽名称来定义具名插槽，如 <code>&lt;slot name=&quot;header&quot;&gt;</code>，然后在父组件中使用 <code>&lt;template&gt;</code> 标签和 <code>v-slot</code> 指令来向具名插槽传递内容。</p><p>下面是一个简单的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;子组件&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 定义一个默认插槽 --&gt;</span><br><span class="line">    &lt;slot&gt;</span><br><span class="line">      &lt;!-- 默认插槽的默认内容 --&gt;</span><br><span class="line">      &lt;p&gt;这是默认插槽的默认内容&lt;/p&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 使用默认插槽 --&gt;</span><br><span class="line">    &lt;my-component&gt;</span><br><span class="line">      &lt;!-- 传递默认插槽的内容 --&gt;</span><br><span class="line">      &lt;p&gt;这是默认插槽的内容&lt;/p&gt;</span><br><span class="line">    &lt;/my-component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyComponent from &#x27;./MyComponent.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ParentComponent&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyComponent,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><p>具名插槽是Vue中插槽的一种类型，与默认插槽不同，具名插槽可以用于在组件中插入多个不同的内容。</p><p>具名插槽可以通过在 <code>&lt;slot&gt;</code> 标签中指定 <code>name</code> 属性来定义，如 <code>&lt;slot name=&quot;header&quot;&gt;</code>。在使用具名插槽时，可以在父组件中使用 <code>&lt;template&gt;</code> 标签和 <code>v-slot</code> 指令来指定传递给具名插槽的内容，如 <code>&lt;template v-slot:header&gt;</code>。</p><p>在下面的示例中，子组件定义了两个具名插槽，一个名为 <code>header</code>，另一个名为 <code>footer</code>，并分别提供了默认内容。父组件使用 <code>&lt;my-component&gt;</code> 标签来引入子组件，并使用 <code>&lt;template&gt;</code> 标签和 <code>v-slot</code> 指令向具名插槽传递不同的内容，其中 <code>v-slot:header</code> 表示向名为 <code>header</code> 的插槽传递内容，<code>v-slot:footer</code> 同理。</p><p>在父组件中，具名插槽可以像普通HTML标签一样使用，可以添加属性、嵌套元素等，这些内容会被传递到子组件中对应的具名插槽位置，覆盖默认内容。</p><p>下面是一个使用具名插槽的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;子组件&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 定义两个具名插槽 --&gt;</span><br><span class="line">    &lt;slot name=&quot;header&quot;&gt;</span><br><span class="line">      &lt;!-- 头部插槽的默认内容 --&gt;</span><br><span class="line">      &lt;p&gt;这是头部插槽的默认内容&lt;/p&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">    &lt;slot name=&quot;footer&quot;&gt;</span><br><span class="line">      &lt;!-- 底部插槽的默认内容 --&gt;</span><br><span class="line">      &lt;p&gt;这是底部插槽的默认内容&lt;/p&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 使用具名插槽 --&gt;</span><br><span class="line">    &lt;my-component&gt;</span><br><span class="line">      &lt;!-- 向头部插槽传递内容 --&gt;</span><br><span class="line">      &lt;template v-slot:header&gt;</span><br><span class="line">        &lt;p&gt;这是头部插槽的内容&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;!-- 向底部插槽传递内容 --&gt;</span><br><span class="line">      &lt;template v-slot:footer&gt;</span><br><span class="line">        &lt;p&gt;这是底部插槽的内容&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/my-component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyComponent from &#x27;./MyComponent.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ParentComponent&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyComponent,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h3><p>作用域插槽（Scoped Slots）是 Vue 中插槽的一种特殊类型，与默认插槽和具名插槽不同，它可以将插槽内部的数据传递到父组件中。作用域插槽可以在子组件中定义，并在父组件中使用。</p><p>作用域插槽通过 <code>slot-scope</code> 特性来定义，其中 <code>slot-scope</code> 的值是一个变量名，可以用于引用插槽内部的数据。在父组件中，可以使用 <code>&lt;template&gt;</code> 标签和 <code>v-slot</code> 指令来使用作用域插槽，并将子组件中传递的数据渲染到模板中。</p><p>在下面的示例中，子组件定义了一个作用域插槽，并将一个 <code>item</code> 变量传递到插槽内部。在父组件中，使用 <code>&lt;template&gt;</code> 标签和 <code>v-slot</code> 指令来引用作用域插槽，并使用 <code>slotProps</code> 变量来引用插槽内部的数据，渲染到模板中。</p><p>在父组件中，可以将作用域插槽的变量用于计算、渲染列表等操作。通过作用域插槽，子组件可以向父组件提供更加灵活的数据传递方式，增加组件的复用性。</p><p>下面是一个使用作用域插槽的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 子组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;子组件&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 定义一个作用域插槽 --&gt;</span><br><span class="line">    &lt;slot name=&quot;content&quot; v-bind:item=&quot;item&quot;&gt;</span><br><span class="line">      &lt;!-- 插槽的默认内容 --&gt;</span><br><span class="line">      &lt;p&gt;&#123;&#123; item &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 父组件 --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;父组件&lt;/h1&gt;</span><br><span class="line">    &lt;!-- 使用作用域插槽 --&gt;</span><br><span class="line">    &lt;my-component&gt;</span><br><span class="line">      &lt;template v-slot:content=&quot;slotProps&quot;&gt;</span><br><span class="line">        &lt;!-- 渲染子组件传递的数据 --&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; slotProps.item &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/my-component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyComponent from &#x27;./MyComponent.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;ParentComponent&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    MyComponent,</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      items: [&#x27;item1&#x27;, &#x27;item2&#x27;, &#x27;item3&#x27;],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="Vuex简单的认识"><a href="#Vuex简单的认识" class="headerlink" title="Vuex简单的认识"></a>Vuex简单的认识</h1><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式和库。它可以用来集中管理应用程序中的共享状态，如用户信息、购物车、主题等。在实际开发中，如果应用程序中的状态变得非常复杂，推荐使用 Vuex 来进行管理，以提高应用程序的可维护性和可扩展性。</p><p>Vuex 应用程序中的状态通常包括三个部分：</p><ol><li>state：包含应用程序中所有共享的数据（状态）。</li><li>mutations：一些同步函数，用于改变 state 的值。</li><li>actions：包含一些异步函数，用于提交 mutations，同时可以包含任意异步操作。</li></ol><p>Vuex 的工作流程如下：</p><ol><li>组件调用 action 中的函数。</li><li>action 函数提交 mutation。</li><li>mutation 函数改变 state 的值。</li><li>state 的值的改变会自动更新应用程序中的组件。</li></ol><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-u2jSUOBr-1679118232468)(null)]</p><p>使用 Vuex，可以使应用程序中的状态变得更加清晰和易于维护。同时，Vuex 还提供了丰富的插件和工具，如 time-travel 调试器和 action 插件，可以更加方便地调试和优化应用程序。</p><p>在下面的示例中，定义了一个名为 “store” 的 Vuex 对象，包含了 state、mutations 和 actions 三个部分。其中，state 中定义了一个名为 “count” 的状态，mutations 中定义了一个名为 “increment” 的同步函数，actions 中定义了一个名为 “incrementAsync” 的异步函数。在组件中可以通过 this.$store.state.count 来获取 state 中的值，或者通过 this.$store.commit(‘increment’) 来提交一个 mutation，或者通过 this.$store.dispatch(‘incrementAsync’) 来执行一个异步操作。</p><p>下面是一个简单的 Vuex 应用程序示例：使用命令：npm i vuex，这是默认下载vuex的最新版本vuex4，但它只是配于vue3，不能用于vue2，要注意，想要配置vue2环境的vuex，则想要下载vuex3才行，命令为npm i vuex@3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">//引入vuex</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">//使用插件</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: 0,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment(state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    incrementAsync(context) &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        context.commit(&#x27;increment&#x27;)</span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default store</span><br></pre></td></tr></table></figure><h1 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h1><p>什么是路由？</p><ul><li><p>路由是指根据 URL 的不同，显示不同的内容或页面。在前端开发中，路由主要用于实现单页应用（Single Page Application，SPA）。</p></li><li><p>一个路由就是一组映射关系（key - value）</p></li><li><p>key 为路径, value 可能是 function 或 component</p></li></ul><p>对 SPA 应用的理解</p><ul><li><p>单页 Web 应用（single page web application，SPA）。</p></li><li><p>整个应用只有<strong>一个完整的页面</strong>。</p></li><li><p>点击页面中的导航链接<strong>不会刷新</strong>页面，只会做页面的<strong>局部更新。</strong></p></li><li><p>数据需要通过 ajax 请求获取。</p></li></ul><p>Vue.js 官方提供了一个路由管理器 Vue Router，它能够让我们方便地进行路由管理。在 Vue Router 中，我们可以定义路由、配置路由参数，以及进行路由导航等操作。</p><p>在 Vue Router 中，我们通常需要进行以下几个步骤：</p><ol><li>安装 Vue Router：通过 <code>npm install vue-router</code> 命令进行安装。</li><li>定义路由：在路由文件中定义路由，并将其作为 Vue 实例的选项之一进行配置。</li><li>渲染视图：在 Vue 实例中使用 <code>&lt;router-view&gt;</code> 标签渲染视图。</li><li>导航：使用 <code>&lt;router-link&gt;</code> 标签或编程式导航进行路由跳转。</li></ol><p>几个注意点</p><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><p>配置路由规则，使用children配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">routes:[</span><br><span class="line">&#123;</span><br><span class="line">path:&#x27;/about&#x27;,</span><br><span class="line">component:About,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">path:&#x27;/home&#x27;,</span><br><span class="line">component:Home,</span><br><span class="line">children:[ //通过children配置子级路由</span><br><span class="line">&#123;</span><br><span class="line">path:&#x27;news&#x27;, //此处一定不要写：/news</span><br><span class="line">component:News</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">path:&#x27;message&#x27;,//此处一定不要写：/message</span><br><span class="line">component:Message</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在下面的示例中，首先引入了 Vue、Vue Router 和 App 组件、Home 组件、About 组件。然后定义了路由，包含两个路径 ‘&#x2F;‘ 和 ‘&#x2F;about’，分别对应 Home 和 About 组件。接着创建了一个 VueRouter 对象，将定义的路由传入，并在 Vue 实例中进行配置，同时在模板中使用 <code>&lt;router-view&gt;</code> 标签来渲染视图。</p><p>通过这样的方式，我们就可以在应用程序中进行路由跳转了，比如在组件中使用 <code>&lt;router-link&gt;</code> 标签，或者使用编程式导航 <code>this.$router.push(&#39;/&#39;)</code>。</p><p>下面是一个简单的 Vue Router 示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// main.js</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">import Home from &#x27;./components/Home.vue&#x27;</span><br><span class="line">import About from &#x27;./components/About.vue&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"></span><br><span class="line">const routes = [</span><br><span class="line">  &#123; path: &#x27;/&#x27;, component: Home &#125;,</span><br><span class="line">  &#123; path: &#x27;/about&#x27;, component: About &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h2 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h2><p><code>router-link</code> 是 Vue.js 官方提供的组件，用于实现在 Vue.js 应用中的路由跳转。</p><p>在 Vue.js 中，如果要跳转到某个路由，可以使用 <code>&lt;router-link&gt;</code> 组件来实现。<code>&lt;router-link&gt;</code> 组件会渲染一个可点击的链接，并在点击时触发路由跳转。</p><p>使用 <code>&lt;router-link&gt;</code> 组件需要传递一个 <code>to</code> 属性，用于指定跳转的目标路由。<code>to</code> 属性的值可以是一个字符串，也可以是一个路由对象，具体的取值方式可以参考 <code>vue-router</code> 文档。</p><p>当然，<code>&lt;router-link&gt;</code> 组件还可以设置其他属性，比如可以设置 <code>target</code> 属性来指定链接的打开方式，可以设置 <code>active-class</code> 属性来指定链接激活时的 CSS 类名等。详细的使用方法可以参考 <code>vue-router</code> 的官方文档。</p><p>在下面的代码中，通过在模板中使用 <code>&lt;router-link&gt;</code> 标签，可以生成两个可点击的链接，分别对应了 <code>/</code> 和 <code>/about</code> 两个路由。当用户点击这两个链接时，就会自动触发路由跳转到对应的页面。</p><p>下面是一个简单的 <code>&lt;router-link&gt;</code> 组件的使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h2><p><code>&lt;router-view&gt;</code> 是 Vue.js 官方提供的组件，用于根据当前路由匹配的组件动态地渲染到对应的位置。</p><p>在 Vue.js 应用中，一般会使用多个组件来分别表示不同的页面，然后通过路由来动态切换这些组件。使用 <code>&lt;router-view&gt;</code> 组件可以将这些组件动态渲染到对应的位置。当切换路由时，<code>&lt;router-view&gt;</code> 组件会根据当前路由匹配的组件来动态渲染到对应的位置。</p><p>当然，<code>&lt;router-view&gt;</code> 组件还可以设置其他属性，比如可以设置 <code>name</code> 属性来指定命名视图，可以设置 <code>keep-alive</code> 属性来缓存组件等。详细的使用方法可以参考 <code>vue-router</code> 的官方文档。</p><p>下面是一个简单的 <code>&lt;router-view&gt;</code> 组件的使用示例：</p><p>在下面的代码中，首先定义了一个包含三个路由链接的导航栏。每个链接都使用 <code>&lt;router-link&gt;</code> 组件来实现，其中 <code>to</code> 属性用来指定链接的目标路由。</p><p>接着，在组件的模板中使用了 <code>&lt;router-view&gt;</code> 组件来占位显示匹配的路由组件。当用户点击导航栏中的链接时，<code>vue-router</code> 会根据链接中的目标路由来动态地渲染对应的组件，并将其渲染到 <code>&lt;router-view&gt;</code> 组件的位置上。</p><p>注意，上述代码中只是为了演示 <code>&lt;router-view&gt;</code> 的使用方法，实际上还需要在 <code>router/index.js</code> 中定义各个路由的组件和路径等信息。具体的使用方法可以参考 <code>vue-router</code> 的官方文档。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;My App&lt;/h1&gt;</span><br><span class="line">    &lt;nav&gt;</span><br><span class="line">      &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">      &lt;router-link to=&quot;/contact&quot;&gt;Contact&lt;/router-link&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><p>路由守卫是 <code>vue-router</code> 提供的一些方法，可以在路由切换的不同阶段进行一些拦截和操作。常用的路由守卫包括全局前置守卫 <code>beforeEach</code>、全局后置钩子 <code>afterEach</code> 和路由独享守卫 <code>beforeEnter</code>。</p><ul><li><code>beforeEach</code>: 全局前置守卫，在路由切换前调用，可以用来进行路由权限验证、全局拦截等操作。</li><li><code>afterEach</code>: 全局后置钩子，在路由切换完成后调用，可以用来进行页面统计、全局错误处理等操作。</li><li><code>beforeEnter</code>: 路由独享守卫，只作用于当前路由，在进入该路由前调用，可以用来进行该路由的权限验证等操作。</li></ul><p>下面是一个使用 <code>beforeEach</code> 守卫的示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import router from &#x27;./router&#x27;</span><br><span class="line">import store from &#x27;./store&#x27;</span><br><span class="line"></span><br><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  if (to.meta.requiresAuth &amp;&amp; !store.state.user) &#123;</span><br><span class="line">    next(&#x27;/login&#x27;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们使用 <code>beforeEach</code> 守卫对需要进行身份验证的路由进行拦截。如果用户未登录，则跳转到登录页面；否则，继续进行路由跳转。</p><p>需要注意的是，在 <code>beforeEach</code> 守卫中，可以通过 <code>next</code> 方法来控制路由跳转行为。如果调用 <code>next</code> 方法，表示允许路由跳转；如果传递一个路由路径，表示取消当前跳转并跳转到指定路由。</p><h2 id="独享路由"><a href="#独享路由" class="headerlink" title="独享路由"></a>独享路由</h2><p>在 <code>vue-router</code> 中，独享路由指的是只对某个路由生效的守卫。和全局守卫不同，独享路由守卫只会在当前路由的跳转过程中被触发。常见的独享路由守卫包括 <code>beforeEnter</code> 和组件内的 <code>beforeRouteEnter</code> 和 <code>beforeRouteLeave</code> 等。</p><p>以 <code>beforeEnter</code> 守卫为例，下面是一个简单的使用示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &#x27;/user/:id&#x27;,</span><br><span class="line">      component: User,</span><br><span class="line">      beforeEnter: (to, from, next) =&gt; &#123;</span><br><span class="line">        if (to.params.id === &#x27;admin&#x27;) &#123;</span><br><span class="line">          next(&#x27;/&#x27;)</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          next()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在上面的示例中，我们为 <code>User</code> 组件配置了一个路由 <code>/user/:id</code>，并为该路由配置了一个 <code>beforeEnter</code> 守卫。在守卫中，我们根据 <code>to</code> 对象中的参数 <code>id</code> 进行判断，如果 <code>id</code> 为 <code>&#39;admin&#39;</code>，则取消当前路由跳转并跳转到首页；否则，继续进行路由跳转。</p><p>需要注意的是，在独享路由守卫中，<code>this</code> 指向的是 <code>undefined</code>，因此无法访问到组件实例，如果需要访问组件实例，则需要使用组件内的 <code>beforeRouteEnter</code> 守卫。</p><h2 id="管理路由"><a href="#管理路由" class="headerlink" title="管理路由"></a>管理路由</h2><p>在 Vue Router 中，有两种模式可以用于管理路由：hash 模式和 history 模式。</p><p>hash模式：</p><ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol><p>history模式：</p><ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol><h3 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h3><p>其中，history 模式基于 HTML5 的 history API，它可以在不刷新页面的情况下改变 URL，从而实现前端路由的跳转。启用 history 模式很简单，只需要在创建 <code>VueRouter</code> 实例时，将 <code>mode</code> 配置项的值设置为 <code>&#39;history&#39;</code> 即可。示例代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  mode: &#x27;history&#x27;,</span><br><span class="line">  routes: [</span><br><span class="line">    // ...</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在使用 history 模式时，需要在后端服务器配置，以确保用户在刷新页面或者直接访问特定路由时能够正常访问到前端路由对应的页面。具体来说，当用户在浏览器地址栏中直接访问特定路由时，后端服务器应该始终返回前端应用的入口 HTML 文件，让前端路由接管页面的跳转。通常，可以使用 URL 重写技术来实现这一点。</p><p>需要注意的是，当使用 history 模式时，需要确保服务端支持 HTML5 history API。如果用户使用的是比较老的浏览器，或者使用了某些浏览器插件，可能会导致 history 模式失效，此时可以考虑使用 hash 模式作为备选方案。</p><h3 id="hash模式"><a href="#hash模式" class="headerlink" title="hash模式"></a>hash模式</h3><p>在 Vue.js 中，路由默认使用的是 hash 模式（也叫做哈希模式）。在 hash 模式下，URL 中的 <code>#</code> 符号前面的部分表示真实的 URL 地址，而 <code>#</code> 符号后面的部分则表示当前路由的路径。</p><p>使用 hash 模式的优点在于，不需要服务器端进行额外的配置，可以直接在前端进行路由管理。同时，由于 hash 会被浏览器自动忽略，因此不会对 SEO（搜索引擎优化）产生负面影响。</p><p>要使用 hash 模式，只需要在创建路由器实例时，将 <code>mode</code> 属性设置为 <code>&#39;hash&#39;</code>，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import VueRouter from &#x27;vue-router&#x27;;</span><br><span class="line"></span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  mode: &#x27;hash&#x27;,</span><br><span class="line">  routes: [</span><br><span class="line">    // 路由配置</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然，如果不想在 URL 中显示 <code>#</code> 符号，也可以使用 HTML5 的 history 模式，通过修改浏览器的历史记录，实现类似的效果。</p><h1 id="UI组件库"><a href="#UI组件库" class="headerlink" title="UI组件库"></a>UI组件库</h1><p>在 Vue.js 中，可以使用第三方的 UI 组件库来快速搭建前端页面，常用的 UI 组件库包括：</p><ul><li><p>Element UI：由饿了么团队开发的一套基于 Vue.js 的 UI 组件库，提供了大量的组件和模板，支持响应式布局和多语言等特性。</p></li><li><p>Ant Design Vue：由 Ant Design 团队开发的基于 Vue.js 的 UI 组件库，提供了丰富的组件和模板，支持国际化和主题定制等功能。</p></li><li><p>Vuetify：一个基于 Material Design 设计语言的 UI 组件库，提供了一系列的组件和样式，支持响应式布局和主题定制等特性。</p></li><li><p>Bootstrap Vue：一个基于 Bootstrap 4 和 Vue.js 的 UI 组件库，提供了一系列的组件和样式，支持响应式布局和主题定制等特性。</p></li><li><p>Ivy UI：一个基于 Vue 3 的 UI 组件库，提供了一系列的组件和样式，支持 Tree Shaking 和主题定制等特性。</p></li></ul><p>这些 UI 组件库都提供了丰富的组件和模板，可以根据需求选择合适的组件库进行使用。同时，由于 Vue.js 本身的灵活性和可扩展性，也可以根据自己的需求进行二次开发，定制符合自己需求的 UI 组件。</p><p>移动端常用 UI 组件库</p><ul><li><p>Vant： <a href="https://youzan.github.io/vant">https://youzan.github.io/vant</a></p></li><li><p>Cube UI： <a href="https://didi.github.io/cube-ui">https://didi.github.io/cube-ui</a></p></li><li><p>Mint UI： <a href="http://mint-ui.github.io/">http://mint-ui.github.io</a></p></li></ul><p>PC 端常用 UI 组件库</p><ul><li><p>Element UI： <a href="https://element.eleme.cn/">https://element.eleme.cn</a></p></li><li><p>IView UI：<a href="https://www.iviewui.com/">https://www.iviewui.com</a></p></li></ul><h2 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element UI"></a>Element UI</h2><p>官方文档使用说明：<a href="https://element.eleme.cn/#/zh-CN/component/quickstart">https://element.eleme.cn/#/zh-CN/component/quickstart</a></p><p>Element UI 是一套基于 Vue.js 2.0 的 UI 组件库，由饿了么前端团队开发维护，提供了丰富的组件和模板，支持响应式布局和多语言等特性。</p><p>Element UI 的组件包括按钮、表单、表格、弹窗、日期选择器、下拉框、菜单、分页等，支持自定义主题和样式，也支持按需加载和 Tree Shaking 等功能，可以根据需求进行灵活配置和定制。</p><p>Element UI 的使用非常简单，只需要在项目中引入 Element UI 的 CSS 和 JS 文件，然后按照文档中的示例使用相应的组件即可。Element UI 的文档非常详细，也提供了丰富的示例和 API 文档，方便开发者进行使用和扩展。</p><p>例子：由于该库有太多组件了，参考官方文档进行按需引入组件</p><ul><li>main.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入App</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//完整引入</span></span><br><span class="line"><span class="comment">//引入ElementUI组件库</span></span><br><span class="line"><span class="comment">// import ElementUI from &#x27;element-ui&#x27;;</span></span><br><span class="line"><span class="comment">//引入ElementUI全部样式</span></span><br><span class="line"><span class="comment">// import &#x27;element-ui/lib/theme-chalk/index.css&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//按需引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>,<span class="title class_">Row</span>,<span class="title class_">DatePicker</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭Vue的生产提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//应用ElementUI</span></span><br><span class="line"><span class="comment">// Vue.use(ElementUI);</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;atguigu-button&#x27;</span>, <span class="title class_">Button</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;atguigu-row&#x27;</span>, <span class="title class_">Row</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;atguigu-date-picker&#x27;</span>, <span class="title class_">DatePicker</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>App.js</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">&lt;button&gt;原生的按钮&lt;/button&gt;</span><br><span class="line">&lt;input type=&quot;text&quot;&gt;</span><br><span class="line">&lt;atguigu-row&gt;</span><br><span class="line">&lt;el-button&gt;默认按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;primary&quot;&gt;主要按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;success&quot;&gt;成功按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;info&quot;&gt;信息按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;warning&quot;&gt;警告按钮&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;danger&quot;&gt;危险按钮&lt;/el-button&gt;</span><br><span class="line">&lt;/atguigu-row&gt;</span><br><span class="line">&lt;atguigu-date-picker</span><br><span class="line">      type=&quot;date&quot;</span><br><span class="line">      placeholder=&quot;选择日期&quot;&gt;</span><br><span class="line">    &lt;/atguigu-date-picker&gt;</span><br><span class="line">&lt;atguigu-row&gt;</span><br><span class="line">&lt;el-button icon=&quot;el-icon-search&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-s-check&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;success&quot; icon=&quot;el-icon-check&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;info&quot; icon=&quot;el-icon-message&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-star-off&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;/atguigu-row&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Vue2的基础学习</summary>
    
    
    
    <category term="Vue" scheme="https://blog.ydg.icu/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://blog.ydg.icu/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>IDEA好用插件</title>
    <link href="https://blog.ydg.icu/2023/02/02/IDEA%E5%A5%BD%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>https://blog.ydg.icu/2023/02/02/IDEA%E5%A5%BD%E7%94%A8%E6%8F%92%E4%BB%B6/</id>
    <published>2023-02-01T16:00:00.000Z</published>
    <updated>2023-02-02T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="tip warning"><p>IEDA常用且好用的插件</p><p>友情提示：合理的使用插件能节省时间和提高工作效率,但下载过多的插件会影响IDEA的性能,所以要选择性的下载使用对自己有用的插件,这样能事半功倍哦</p><p>插件分类：IDEA外观、代码优化、快速开发、第三方工具</p><p>下载方式：直接在IDEA设置里找到插件选项，在里面填写插件名称下载即可，十分的简单，也可以离线下载（去插件的官网）</p><p>温馨提示：以下插件并不完善，若同学有更好用的插件也可以分享出来哦，让我的这个插件收集的更加完整，谢谢你们啦</p></div><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>由于下载在IDEA下载插件需要联网，所以要保证网络的连通，这样才能顺利的搜索下载</p><p>正常情况下，可以连到网，若连不到，可用下面的解决方法尝试一下，或许对你有帮助哦</p><div class="tip key"><p>无法联网的情况</p></div><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203213153157.png" alt="image-20230203213153157"></p><div class="tip key"><p>自动代理输入URL：<a href="https://plugins.jetbrains.com/">https://plugins.jetbrains.com/</a> 或者 <a href="http://127.0.0.1:1080/">http://127.0.0.1:1080</a></p></div><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203213450008.png" alt="image-20230203213450008"></p><div class="tip key"><p>重启后的界面</p></div><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203214332634.png" alt="image-20230203214332634"></p><h1 id="IDEA外观"><a href="#IDEA外观" class="headerlink" title="IDEA外观"></a>IDEA外观</h1><h2 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h2><p>由于IDEA有自带的背景功能（在设置里面），所以可以不用插件就已经都用了，可以自己自定义图片、图片透明度等操作，可以按照自己的喜爱进行调配。可在文件-设置-外观-背景图像里设置</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203210708811.png" alt="image-20230203210708811"></p><h2 id="主题颜色"><a href="#主题颜色" class="headerlink" title="主题颜色"></a>主题颜色</h2><ul><li>名称：Dark Purple Theme</li><li>说明：顾名思义为紫色夜晚的主题，注意IDEA版本要在2019.1以上才行哦</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203210917830.png" alt="image-20230203210917830"></p><h2 id="文件图标"><a href="#文件图标" class="headerlink" title="文件图标"></a>文件图标</h2><ul><li>名称：Atom Material Icons</li><li>说明：给各个包&#x2F;类&#x2F;文件….换上一个漂亮的图标，颜色多样</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203214453478.png" alt="image-20230203214453478"></p><h2 id="中文插件"><a href="#中文插件" class="headerlink" title="中文插件"></a>中文插件</h2><ul><li>名称：Chinese (Simplified) Language Pack &#x2F;中文语言包</li><li>说明：中文语言包将为您的 IntelliJ IDEA, AppCode, CLion, DataGrip, GoLand, PyCharm, PhpStorm, RubyMine, 和WebStorm 带来完全中文化的界面。</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203214526475.png" alt="image-20230203214526475"></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203205036989.png" alt="image-20230203205036989"></p><h1 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h1><h2 id="阿里代码规范"><a href="#阿里代码规范" class="headerlink" title="阿里代码规范"></a>阿里代码规范</h2><ul><li>名称：Alibaba Java Coding Guidelines</li><li>说明：这个是阿里巴巴的代码规范插件，是阿里的一套代码规范，利于自己养成良好的写代码的习惯</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203215522984.png" alt="image-20230203215522984"></p><h2 id="代码优化检查"><a href="#代码优化检查" class="headerlink" title="代码优化检查"></a>代码优化检查</h2><ul><li>名称：SonarLint</li><li>说明：SonarLint是一个免费的IDE扩展，可以在您编写代码时查找和修复错误、漏洞和代码!像一个拼写检查器一样，SonarLint突出显示问题，并提供快速修复或清晰的补救指导，帮助您在提交代码之前清理代码。SonarLint支持几种流行和经典的语言，可以帮助各种经验和技能水平的开发人员编写高效、安全的代码。</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203220051418.png" alt="image-20230203220051418"></p><h2 id="彩虹括号"><a href="#彩虹括号" class="headerlink" title="彩虹括号"></a>彩虹括号</h2><ul><li>名称：Rainbow Brackets</li><li>说明：Rainbow Brackets(彩虹括号)是一款Intellij IDEA插件, 可以将 (圆括号) [方括号] {花括号} &lt;尖括号&gt; 用不同颜色标记出来, 方便使用者快速识别代码层次, 提高开发效率!</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203225238089.png" alt="image-20230203225238089"></p><h1 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h1><h2 id="Lombok插件"><a href="#Lombok插件" class="headerlink" title="Lombok插件"></a>Lombok插件</h2><ul><li>名称：Lombok</li><li>说明：我们在开发过程中，通常都会定义大量的JavaBean，然后通过IDE去生成其属性的构造器、getter、setter、equals、hashcode、toString方法，这样会生成许多不想看见的代码，并且浪费不少时间，lombok插件可以为我们省去这些时间，用起来非常方便。记得要在pom文件中引入该依赖哦！！！</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203215030819.png" alt="image-20230203215030819"></p><h2 id="AI代码助手"><a href="#AI代码助手" class="headerlink" title="AI代码助手"></a>AI代码助手</h2><ul><li>名称：Tabnine AI Code Completion-JS Java Python TS Rust Go PHP &amp; More</li><li>说明：Tabnine是一个AI代码助手，让你成为一个更好的开发人员。Tabnine将在所有最流行的编码语言和ide中通过实时代码完成来提高您的开发速度。无论你称之为智能感知、智能编码、自动补全、AI辅助代码补全、AI驱动代码补全、AI副驾驶、AI代码片段、代码建议、代码预测、代码提示或内容辅助，使用Tabnine都可以极大地影响你的编码速度，显著减少你的编码时间。</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203220728372.png" alt="image-20230203220728372"></p><h2 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h2><ul><li>名称：JUnitGenerator V2.0</li><li>说明：这个插件通过右键单击“Generate…”生成JUnit测试。菜单，同时专注于Java类。单元测试输出代码可以使用提供的速度模板进行定制，以基于原始类格式化代码。下载成功后可在设置里的其他设置里查看到JUnit Generator选项，可以自定义测试模板等操作，若想把测试类放在springboot项目的test目录下，可以设置Output Path该选项为${SOURCEPATH}&#x2F;..&#x2F;..&#x2F;test&#x2F;java&#x2F;${PACKAGE}&#x2F;${FILENAME}即可</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203221324553.png" alt="image-20230203221324553"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203221916098.png" alt="image-20230203221916098"></p><h2 id="快速生成set方法"><a href="#快速生成set方法" class="headerlink" title="快速生成set方法"></a>快速生成set方法</h2><ul><li>名称：GenerateAllSetter</li><li>说明：一键调用一个对象的所有的set方法</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203222224532.png" alt="image-20230203222224532"></p><h2 id="MybatisX"><a href="#MybatisX" class="headerlink" title="MybatisX"></a>MybatisX</h2><ul><li>名称：MybatisX</li><li>说明：可以实现mapper和xml可以来回跳转，mybatis.xml,mapper.xml提示mapper和xml支持自动提示,当配置连接到数据库时,也可以使用该插件自动生成代码的功能(MybatisX-Generator),直接点击数据库表，鼠标右键就会出现该功能（MybatisX-Generator），配置好相关的属性即可，它的作用是生成表对应的entity(实体类)、mapper(接口层)、service(业务逻辑层)、serviceImpl(实现类)、xml(接口映射），自动生成，实现快速开发</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203222603875.png" alt="image-20230203222603875"></p><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><ul><li>名称：EasyCode</li><li>说明：基于IntelliJ IDEA开发的代码生成插件，支持自定义任意模板（Java，html，js，xml）。只要是与数据库相关的代码都可以通过自定义模板来生成。支持数据库类型与java类型映射关系配置。支持同时生成生成多张表的代码。每张表有独立的配置信息。完全的个性化定义，规则由你设置。</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203224942033.png" alt="image-20230203224942033"></p><h2 id="Json格式化"><a href="#Json格式化" class="headerlink" title="Json格式化"></a>Json格式化</h2><ul><li>名称：Gsonformat</li><li>说明：将json文件格式化变得更加美观好看清晰</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203230738936.png" alt="image-20230203230738936"></p><h2 id="生成注释文档"><a href="#生成注释文档" class="headerlink" title="生成注释文档"></a>生成注释文档</h2><ul><li>名称：Easy Javadoc</li><li>说明：能帮助开发者快速生成类、方法、属性等中文注释、文档，快捷键是ctrl+&#x2F;</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203231558818.png" alt="image-20230203231558818"></p><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><ul><li>名称：SequenceDiagram</li><li>说明：使用这个插件，您可以生成简单序列图。通过单击关系图形状来导航代码。从图中删除类。将图表导出为图像(SVG、JPEG、PNG、TIFF)。将图表导出为PlantUML, Mermaid格式文件。在接手老项目时，一上手很难窥到全貌，这时候要是能够把接口的调用关系，整个时序图展示出来，对深入了解项目帮助很大。刚好有这么一款插件SequenceDiagram能够根据方法的调用关系，自动生成执行时序图。</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203232011175.png" alt="image-20230203232011175"></p><h1 id="第三方工具"><a href="#第三方工具" class="headerlink" title="第三方工具"></a>第三方工具</h1><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><ul><li>名称：Transaction</li><li>说明：翻译英文插件，支持谷歌，微软，百度，有道等翻译</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203223154353.png" alt="image-20230203223154353"></p><h2 id="测试请求"><a href="#测试请求" class="headerlink" title="测试请求"></a>测试请求</h2><ul><li>名称：RestfulTool</li><li>说明：类似Postman软件一样，用来测试请求的</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203223350451.png" alt="image-20230203223350451"></p><h2 id="ignore"><a href="#ignore" class="headerlink" title=".ignore"></a>.ignore</h2><ul><li>名称：.ignore</li><li>说明：用途是排除不需要提交的文件，例如提交代码到远程仓库时，有些文件是不需要提交的，这是可以用到这个插件</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203223709996.png" alt="image-20230203223709996"></p><h2 id="快捷键的学习"><a href="#快捷键的学习" class="headerlink" title="快捷键的学习"></a>快捷键的学习</h2><ul><li>名称：Key Promoter X</li><li>说明：提示某些鼠标操作可以通过快捷键的方式进行，记录使用快捷键的次数，提示使用快捷键的方式进行操作，方便开发者更快速的记忆快捷键，通过快捷键来高效工作</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203224321215.png" alt="image-20230203224321215"></p><h2 id="maven-helper"><a href="#maven-helper" class="headerlink" title="maven-helper"></a>maven-helper</h2><ul><li>名称：Maven Helper</li><li>说明：使用Maven必须有一个插件。分析和排除包含当前文件的模块运行&#x2F;调试maven目标的冲突依赖项操作的简单方法，或在根模块操作上打开当前maven模块路径操作的终端以运行&#x2F;调试当前测试文件。</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203224732473.png" alt="image-20230203224732473"></p><h2 id="防沉迷写代码"><a href="#防沉迷写代码" class="headerlink" title="防沉迷写代码"></a>防沉迷写代码</h2><ul><li>名称：StopCoding</li><li>说明：如果你也经常沉迷于写代码,忘了起身休息喝水,那么试试这个插件吧在菜单栏的Tools中,打开StopCoding插件进行设置，设置工作时间和休息时间,并且保存当设置的时间一到,就会有弹框提醒你休息,让你暂时不能操作idea</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203230138905.png" alt="image-20230203230138905"></p><h2 id="统计信息"><a href="#统计信息" class="headerlink" title="统计信息"></a>统计信息</h2><ul><li>名称：Statistic</li><li>说明：显示项目统计信息。这个插件显示文件按扩展名和大小、行数、LOC等进行排序。用户可以使用“选择时刷新”按钮选择(项目&#x2F;模块&#x2F;包&#x2F;文件)范围。(此插件需要Java 1.8)</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230203232306681.png" alt="image-20230203232306681"></p>]]></content>
    
    
    <summary type="html">IDEA常用且好用的插件收集</summary>
    
    
    
    <category term="IDEA" scheme="https://blog.ydg.icu/categories/IDEA/"/>
    
    <category term="插件" scheme="https://blog.ydg.icu/categories/IDEA/%E6%8F%92%E4%BB%B6/"/>
    
    
    <category term="java" scheme="https://blog.ydg.icu/tags/java/"/>
    
    <category term="IDEA" scheme="https://blog.ydg.icu/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础学习</title>
    <link href="https://blog.ydg.icu/2023/01/28/Docker%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.ydg.icu/2023/01/28/Docker%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-01-27T16:00:00.000Z</published>
    <updated>2023-01-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>Docker的基础</p></div><h1 id="Docker容器的认识"><a href="#Docker容器的认识" class="headerlink" title="Docker容器的认识"></a>Docker容器的认识</h1><ul><li>Docker是基于Go语言实现的云开源项目。</li><li>Docker的主要目标是“Build，Ship and Run Any App，Anywhere”，也就是通过对应应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个web应用或数据库应用等等）及其运行环境能够做到“一次镜像，处处运行”。</li><li>Linux容器技术的出现就解决了这样的一个问题，而Docker就是在它的基础上发展过来的。将应用打成镜像，通过镜像成为运行在Docker容器上面的实例，而Docker容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</li><li>Docker必须部署在Linux内核的系统上，如果其他系统想要安装Docker就必须安装一个虚拟的Linux环境才行，所以先要学习Linux操作系统，再来学习Docker，这样才能事半功倍哦。</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230125134456202.png" alt="image-20230125134456202"></p><h1 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h1><p>点击<a href="https://www.docker.com/">这里</a>进入Docker的官网，或者点击<a href="https://hub.docker.com/">这里</a>进入Docker hub(安装docker镜像的仓库)，在CentOS7上安装Docker，参考Docker官网的<a href="https://docs.docker.com/">官方文档</a>操作</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>在Linux操作系统上安装Docker，使用CentOS7发行版的Linux系统，目前CentOS7放行版中的内核支持Docker，若Docker想要运行CentOS7(64-bit)上,要求系统为64位、Linux内核版本为3.8以上，最好参考官方帮助文档，十分详细。</p><ul><li>查看CentOS7的内核命令<br><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230124131357160.png" alt="image-20230124131357160"></li><li>Docker三要素：<ul><li>镜像（image）：docker镜像就好比是一个模块，可以通过这个模块来创建容器服务，tomcat镜像&#x3D;&#x3D;&#x3D;&gt;run&#x3D;&#x3D;&#x3D;&gt;tomcat01容器（提供服务器），提供这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。</li><li>容器（container）：Docker利用容器技术，独立运行一个或者一个组的应用，通过镜像来创建的。启动、停止、删除、基本命令！目前就可以把这个容器理解为就是一个简易的Lunux系统。</li><li>仓库（repository）：仓库就是存放镜像的地方，仓库分为公有和私有仓库，如：Docker Hub（国外的），阿里云（国内的），可以通过配置阿里云国内的镜像加速器进行提速。</li></ul></li></ul><h2 id="yum安装gcc"><a href="#yum安装gcc" class="headerlink" title="yum安装gcc"></a>yum安装gcc</h2><p>使用Linux命令yum安装gcc程序,以管理员的身份安装</p><ul><li>yum -y install gcc</li><li>yum -y install gcc-c++</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230124140823614.png" alt="image-20230124140823614"></p><h2 id="安装所需要的软件包"><a href="#安装所需要的软件包" class="headerlink" title="安装所需要的软件包"></a>安装所需要的软件包</h2><p>命令：yum install -y yum-utils</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230124141913966.png" alt="image-20230124141913966"></p><h2 id="设置镜像仓库"><a href="#设置镜像仓库" class="headerlink" title="设置镜像仓库"></a>设置镜像仓库</h2><p>推荐使用阿里云国内仓库，不建议使用国外官网仓库。</p><p>命令： <code>yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230124144840673.png" alt="image-20230124144840673"></p><h2 id="更新软件包索引"><a href="#更新软件包索引" class="headerlink" title="更新软件包索引"></a>更新软件包索引</h2><p>命令：yum makecache fast</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230124145200370.png" alt="image-20230124145200370"></p><h2 id="安装Docker引擎"><a href="#安装Docker引擎" class="headerlink" title="安装Docker引擎"></a>安装Docker引擎</h2><p>命令：yum -y install docker-ce docker-ce-cli containerd.io</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230124150029890.png" alt="image-20230124150029890"></p><h2 id="检查docker安装"><a href="#检查docker安装" class="headerlink" title="检查docker安装"></a>检查docker安装</h2><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><p>命令：docker version</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230124150430804.png" alt="image-20230124150430804"></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>命令：systemctl start docker</p><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><p>命令：systemctl status docker</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230124151149601.png" alt="image-20230124151149601"></p><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello-world"></a>hello-world</h3><p>命令：docker run hello-world</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230124151348254.png" alt="image-20230124151348254"></p><h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><p>点击<a href="https://www.aliyun.com/">这里</a>进入阿里云官网注册账号，找到容器镜像服务，创建个人实例，根据文档命令进行操作配置即可，最后通过命令systemctl status docker查看docker状态，再次执行docker run hello-world命令，若无报错，命令行输出Hello from Docker！即为成功配置成功。</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230124153602022.png" alt="image-20230124153602022"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230124153719972.png" alt="image-20230124153719972"></p><h2 id="Docker比VM快？"><a href="#Docker比VM快？" class="headerlink" title="Docker比VM快？"></a>Docker比VM快？</h2><table><thead><tr><th align="center"></th><th align="center">Docker容器</th><th align="center">虚拟机（VM）</th></tr></thead><tbody><tr><td align="center">操作系统</td><td align="center">与宿主机共享OS</td><td align="center">宿主机OS上运行虚拟机OS</td></tr><tr><td align="center">存储大小</td><td align="center">镜像小，便于存储与运输</td><td align="center">镜像庞大（vmdk、vdi等）</td></tr><tr><td align="center">运行性能</td><td align="center">几乎无额外的性能损失</td><td align="center">操作系统额外的CPU、内存消耗</td></tr><tr><td align="center">移植性</td><td align="center">轻便、灵活、适用于Linux</td><td align="center">笨重，与虚拟化技术耦合度高</td></tr><tr><td align="center">硬件亲和性</td><td align="center">面向软件开发者</td><td align="center">面向硬件运维者</td></tr><tr><td align="center">部署速度</td><td align="center">快速、秒级</td><td align="center">较慢、10s以上</td></tr></tbody></table><h2 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h2><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>systemctl stop docker</td><td align="center">停止docker服务命令</td></tr><tr><td>yum remove dockers-ce docker-ce-cli containerd.io</td><td align="center">卸载docker客户端程序命令</td></tr><tr><td>rm -rf &#x2F;var&#x2F;lib&#x2F;docker</td><td align="center">删除docker目录目录</td></tr><tr><td>rm -rf &#x2F;var&#x2F;lib&#x2F;containerd</td><td align="center">删除containerd目录</td></tr></tbody></table><h1 id="Docker基础命令"><a href="#Docker基础命令" class="headerlink" title="Docker基础命令"></a>Docker基础命令</h1><p>具体的命令参考Docker官方文档，点击<a href="https://docs.docker.com/engine/reference/run/">这里</a>进入….  下面是常用的命令简略笔记</p><h2 id="帮助启动类命令"><a href="#帮助启动类命令" class="headerlink" title="帮助启动类命令"></a>帮助启动类命令</h2><table><thead><tr><th>命令</th><th align="center">含义</th></tr></thead><tbody><tr><td>systemctl start docker</td><td align="center">启动docker服务</td></tr><tr><td>systemctl stop docker</td><td align="center">停止docker服务</td></tr><tr><td>systemctl status docker</td><td align="center">查看docke状态</td></tr><tr><td>systemctl enable docker</td><td align="center">开机自启docker</td></tr><tr><td>docker info</td><td align="center">查看docker信息</td></tr><tr><td>docker [具体命令] –help</td><td align="center">docker帮助文档，“具体命令”是可选参数，若不指定，则显示全部</td></tr></tbody></table><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><table><thead><tr><th>命令</th><th>含义</th><th>参数&#x2F;说明</th></tr></thead><tbody><tr><td>docker images [-a,-q]</td><td>列出本机主机上的镜像,参数</td><td>-a：列出本地所有镜像（含历史）；-q：只列出镜像的ID</td></tr><tr><td>docker search [–limit x]镜像名称</td><td>查找镜像</td><td>–limit：只列出N个镜像，默认是25个 ； x：列出的镜像个数</td></tr><tr><td>docker pull 镜像名字[:TAG]</td><td>下载镜像</td><td>[:TAG]：版本号，若不填写该参数，则下载最新的版本，例如：docker pull redis:6.0.8，下载redis的6.0.8版本</td></tr><tr><td>docker system df [OPTIONS]</td><td>查看镜像&#x2F;容器&#x2F;数据卷所占空间</td><td>[OPTIONS]：-v：显示空间使用的详细信息</td></tr><tr><td>docker rmi -f 镜像名字&#x2F;ID</td><td>删除镜像</td><td>-f：可选参数，强制删除  ；docker rmi -f $(docker images -qa)：该命令是强制删除全部镜像操作，谨慎操作</td></tr></tbody></table><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p>说明：我们有了镜像才可以创建容器，linux，下载一个centos镜像来测试学习，相当于在Vmware虚拟机CentOS7里再下载一个容器centos镜像</p><p>命令：docker pull centos</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker run [可选参数] IMAGE</td><td>启动容器，–name：给容器起别名，用来区分容器；-d：后台方式运行；-it：使用交互式运行，进入容器查看内容；-P：指定容器的端口；-p：随机指定端口；IMAGE：必须的参数，如： docker run -it centos &#x2F;bin&#x2F;bash，其中IMAGE就是&#x2F;bin&#x2F;bash</td></tr><tr><td>docker ps [可选参数]</td><td>列出当前正在运行的容器，-a：列出当前正在运行的容器+历史运行过的容器；-n&#x3D;？：显示最近创建的容器；-q：显示容器的编号</td></tr><tr><td>exit&#x2F;ctrl+p+q</td><td>停止退出容器&#x2F;不停止容器直接退出，exit：是一个命令；ctrl+p+q：是一个快捷键</td></tr><tr><td>docker rm [-f] 容器ID</td><td>删除容器，-f：强制删除</td></tr><tr><td>docker start 容器ID</td><td>启动容器</td></tr><tr><td>docker stop 容器ID</td><td>停止容器</td></tr><tr><td>docker restart 容器ID</td><td>重启容器</td></tr><tr><td>docker kill 容器ID</td><td>强制停止当前容器</td></tr></tbody></table><h2 id="commit命令"><a href="#commit命令" class="headerlink" title="commit命令"></a>commit命令</h2><p>命令：docker commit -m&#x3D;”描述信息” -a&#x3D;“作者” 容器ID 要创建的目标镜像名:[标签名]</p><p>例子：docker commit -m&#x3D;”mysql8.0版本” -a&#x3D;”guangzai” fcbfa3e8efc5 yuan&#x2F;mysql:8.0</p><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker logs [OPTIONS] 容器ID</td><td>查看日志，参数：-tf：显示日志；–tail number：要显示多少条日志</td></tr><tr><td>docker top 容器ID</td><td>查看进程</td></tr><tr><td>docker inspect 容器ID</td><td>查看镜像的元数据</td></tr><tr><td>docker exec -it 容器ID [&#x2F;bin&#x2F;bash]</td><td>进入当前正在运行的容器，进入容器后开启一个新的终端，可以在里面操作</td></tr><tr><td>docker attach 容器ID</td><td>进入容器正在运行的终端，不会启动新的进程</td></tr><tr><td>docker cp 容器ID:容器内的路径 目的地的主机路径</td><td>从容器内拷贝文件到主机上</td></tr></tbody></table><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230125203935676.png" alt="image-20230125203935676"></p><h2 id="案例练习"><a href="#案例练习" class="headerlink" title="案例练习"></a>案例练习</h2><h3 id="部署Nginx"><a href="#部署Nginx" class="headerlink" title="部署Nginx"></a>部署Nginx</h3><ul><li><p>搜索：docker search nginx，也可以在Docker hub官网上搜索</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker search nginx</span><br><span class="line">NAME                                              DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">nginx                                             Official build of Nginx.                        17982     [OK]       </span><br><span class="line">linuxserver/nginx                                 An Nginx container, brought to you by LinuxS…   183                  </span><br><span class="line">bitnami/nginx                                     Bitnami nginx Docker Image                      150                  [OK]</span><br><span class="line">ubuntu/nginx                                      Nginx, a high-performance reverse proxy &amp; we…   75                   </span><br><span class="line">privatebin/nginx-fpm-alpine                       PrivateBin running on an Nginx, php-fpm &amp; Al…   73                   [OK]</span><br><span class="line">bitnami/nginx-ingress-controller                  Bitnami Docker Image for NGINX Ingress Contr…   23                   [OK]</span><br><span class="line">rancher/nginx-ingress-controller                                                                  11                   </span><br><span class="line">kasmweb/nginx                                     An Nginx image based off nginx:alpine and in…   4                    </span><br><span class="line">ibmcom/nginx-ingress-controller                   Docker Image for IBM Cloud Private-CE (Commu…   4                    </span><br><span class="line">bitnami/nginx-ldap-auth-daemon                                                                    3                    </span><br><span class="line">bitnami/nginx-exporter                                                                            3                    </span><br><span class="line">circleci/nginx                                    This image is for internal use                  2                    </span><br><span class="line">rancher/nginx                                                                                     2                    </span><br><span class="line">rancher/nginx-ingress-controller-defaultbackend                                                   2                    </span><br><span class="line">vmware/nginx                                                                                      2                    </span><br><span class="line">rapidfort/nginx                                   RapidFort optimized, hardened image for NGINX   2                    </span><br><span class="line">vmware/nginx-photon                                                                               1                    </span><br><span class="line">bitnami/nginx-intel                                                                               1                    </span><br><span class="line">ibmcom/nginx-ppc64le                              Docker image for nginx-ppc64le                  0                    </span><br><span class="line">ibmcom/nginx-ingress-controller-ppc64le           Docker Image for IBM Cloud Private-CE (Commu…   0                    </span><br><span class="line">rapidfort/nginx-official                          RapidFort optimized, hardened image for NGIN…   0                    </span><br><span class="line">rapidfort/nginx-ib                                RapidFort optimized, hardened image for NGIN…   0                    </span><br><span class="line">rancher/nginx-ssl                                                                                 0                    </span><br><span class="line">rancher/nginx-conf                                                                                0                    </span><br><span class="line">continuumio/nginx-ingress-ws                                                                      0 </span><br></pre></td></tr></table></figure></li><li><p>下载：docker pull nginx，拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker pull nginx</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/nginx</span><br><span class="line">Digest: sha256:0d17b565c37bcbd895e9d92315a05c1c3c9a29f762b011a10c54a66cd53c9b31</span><br><span class="line">Status: Image is up to date for nginx:latest</span><br><span class="line">docker.io/library/nginx:latest</span><br></pre></td></tr></table></figure></li><li><p>查看：docker images，查看容器镜像是否下载成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    605c77e624dd   13 months ago   141MB</span><br></pre></td></tr></table></figure></li><li><p>运行：docker run -d –name nginx01 -p 7788:80 nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker run -d --name nginx01 -p 7788:80 nginx</span><br><span class="line">8c8ce0a9b6dda25fe0f14826a9a20030dd9fe9f2db5ee81b431e622ce1c23353</span><br></pre></td></tr></table></figure></li><li><p>查看：docker ps，查看正在运行的容器镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                  CREATED              STATUS              PORTS                                   NAMES</span><br><span class="line">59bfb10dc565   nginx     &quot;/docker-entrypoint.…&quot;   About a minute ago   Up About a minute   0.0.0.0:7788-&gt;80/tcp, :::7788-&gt;80/tcp   nginx01</span><br></pre></td></tr></table></figure></li><li><p>测试：curl localhost:7788，在本机终端测试访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# curl localhost:7788</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">html &#123; color-scheme: light dark; &#125;</span><br><span class="line">body &#123; width: 35em; margin: 0 auto;</span><br><span class="line">font-family: Tahoma, Verdana, Arial, sans-serif; &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>进入：docker exec -it nginx01 &#x2F;bin&#x2F;bash，进入nginx容器，查看文件等操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker exec -it nginx01 /bin/bash</span><br><span class="line">root@59bfb10dc565:/# ls </span><br><span class="line">bin  boot  dev  docker-entrypoint.d  docker-entrypoint.sh  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@59bfb10dc565:/# </span><br></pre></td></tr></table></figure></li><li><p>访问：自己linux的IP:7788，在浏览器访问nginx页面，如我自己的：192.168.88.88:7788</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下面就是访问成功后的页面展示文字,nginx的欢迎界面</span></span><br><span class="line"></span><br><span class="line">Welcome to nginx!</span><br><span class="line"></span><br><span class="line">If you see this page, the nginx web server is successfully installed and working. Further configuration is required.</span><br><span class="line"></span><br><span class="line">For online documentation and support please refer to nginx.org.</span><br><span class="line">Commercial support is available at nginx.com.</span><br><span class="line"></span><br><span class="line">Thank you for using nginx.</span><br></pre></td></tr></table></figure></li><li><p>停止：docker stop nginx容器ID</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker stop 8c8ce0a9b6dd</span><br><span class="line">8c8ce0a9b6dd</span><br></pre></td></tr></table></figure></li></ul><h3 id="部署Tomcat"><a href="#部署Tomcat" class="headerlink" title="部署Tomcat"></a>部署Tomcat</h3><ul><li><p>搜索Tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker search tomcat</span><br><span class="line">NAME                                  DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">tomcat                                Apache Tomcat is an open source implementati…   3471      [OK]       </span><br><span class="line">tomee                                 Apache TomEE is an all-Apache Java EE certif…   101       [OK]       </span><br><span class="line">bitnami/tomcat                        Bitnami Tomcat Docker Image                     47                   [OK]</span><br><span class="line">arm32v7/tomcat                        Apache Tomcat is an open source implementati…   12                   </span><br><span class="line">arm64v8/tomcat                        Apache Tomcat is an open source implementati…   8                    </span><br><span class="line">rightctrl/tomcat                      CentOS , Oracle Java, tomcat application ssl…   7                    [OK]</span><br><span class="line">amd64/tomcat                          Apache Tomcat is an open source implementati…   6                    </span><br><span class="line">eclipse/rdf4j-workbench               Dockerfile for Eclipse RDF4J Server and Work…   6                    </span><br><span class="line">jelastic/tomcat                       An image of the Tomcat Java application serv…   4                    </span><br><span class="line">oobsri/tomcat8                        Testing CI Jobs with different names.           2                    </span><br><span class="line">cfje/tomcat-resource                  Tomcat Concourse Resource                       2                    </span><br><span class="line">chenyufeng/tomcat-centos              tomcat基于centos6的镜像                              1                    [OK]</span><br><span class="line">appsvc/tomcat                                                                         1                    </span><br><span class="line">ppc64le/tomcat                        Apache Tomcat is an open source implementati…   1                    </span><br><span class="line">eclipse/alpine_jdk8                   Based on Alpine 3.3. JDK 1.8, Maven 3.3.9, T…   1                    [OK]</span><br><span class="line">semoss/docker-tomcat                  Tomcat, Java, Maven, and Git on top of debian   0                    [OK]</span><br><span class="line">tomcatengineering/pg_backup_rotated   Clone of martianrock/pg_backup_rotated but w…   0                    </span><br><span class="line">softwareplant/tomcat                  Tomcat images for jira-cloud testing            0                    [OK]</span><br><span class="line">tomcat2111/papercut-mf                PaperCut MF Application Server                  0                    </span><br><span class="line">tomcat0823/auto1                                                                      0                    </span><br><span class="line">secoresearch/tomcat-varnish           Tomcat and Varnish 5.0                          0                    [OK]</span><br><span class="line">s390x/tomcat                          Apache Tomcat is an open source implementati…   0                    </span><br><span class="line">misolims/miso-base                    MySQL 5.7 Database and Tomcat 8 Server neede…   0                    </span><br><span class="line">eclipse/hadoop-dev                    Ubuntu 14.04, Maven 3.3.9, JDK8, Tomcat 8       0                    [OK]</span><br><span class="line">wnprcehr/tomcat                                                                       0     </span><br></pre></td></tr></table></figure></li><li><p>下载Tomcat10.0版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker pull tomcat:10.0</span><br><span class="line">10.0: Pulling from library/tomcat</span><br><span class="line">0e29546d541c: Pull complete </span><br><span class="line">9b829c73b52b: Pull complete </span><br><span class="line">cb5b7ae36172: Pull complete </span><br><span class="line">6494e4811622: Pull complete </span><br><span class="line">668f6fcc5fa5: Pull complete </span><br><span class="line">dc120c3e0290: Pull complete </span><br><span class="line">8f7c0eebb7b1: Pull complete </span><br><span class="line">77b694f83996: Pull complete </span><br><span class="line">0f611256ec3a: Pull complete </span><br><span class="line">4f25def12f23: Pull complete </span><br><span class="line">Digest: sha256:9dee185c3b161cdfede1f5e35e8b56ebc9de88ed3a79526939701f3537a52324</span><br><span class="line">Status: Downloaded newer image for tomcat:10.0</span><br><span class="line">docker.io/library/tomcat:10.0</span><br></pre></td></tr></table></figure></li><li><p>查看Tomcat容器是否下载完成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    605c77e624dd   13 months ago   141MB</span><br><span class="line">tomcat       10.0      fb5657adc892   13 months ago   680MB</span><br></pre></td></tr></table></figure></li><li><p>运行Tomcat服务</p><p>注意：若是较高版本的tomcat会报404未找到的错误！！！这是正常的现象，不是自己的操作问题哦！！！可以查看下面的解决方案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker run -d -p 2333:8080 --name tomcat10 tomcat:10.0</span><br><span class="line">020c977bbcc3324f3b87d7c84231918cafe2d2085cd5b28ae7c501c065a40b7c</span><br></pre></td></tr></table></figure></li><li><p>解决Tomcat无法访问的问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问Tomcat时会报404的错误</span></span><br><span class="line">HTTP状态 404 - 未找到</span><br><span class="line"></span><br><span class="line">类型 状态报告</span><br><span class="line"></span><br><span class="line">描述 源服务器未能找到目标资源的表示或者是不愿公开一个已经存在的资源表示。</span><br><span class="line">Apache Tomcat/10.0.14</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止tomcat服务</span></span><br><span class="line">[root@centos ~]# docker stop 020c977bbcc3</span><br><span class="line">020c977bbcc3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入Tomcat容器中修改webapp文件,就是因为该文件为空或者不存在所导致404错误</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">并且tomcat里新增了一个文件webapps.dist</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式一：我们只需要把该文件改名为webapp即可</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二：我们也可以把webapps.dist文件复制到webapp中也行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">两种方式的原理是一致的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入tomcat容器</span></span><br><span class="line">[root@centos ~]# docker exec -it tomcat10 /bin/bash</span><br><span class="line">root@95606dac2868:/usr/local/tomcat# ls</span><br><span class="line">BUILDING.txt  CONTRIBUTING.md  LICENSE  NOTICE  README.md  RELEASE-NOTES  RUNNING.txt  bin  conf  lib  logs  native-jni-lib  temp  webapps  webapps.dist  work</span><br><span class="line">root@95606dac2868:/usr/local/tomcat# ls -l</span><br><span class="line">total 132</span><br><span class="line">-rw-r--r--. 1 root root 18994 Dec  2  2021 BUILDING.txt</span><br><span class="line">-rw-r--r--. 1 root root  6210 Dec  2  2021 CONTRIBUTING.md</span><br><span class="line">-rw-r--r--. 1 root root 60269 Dec  2  2021 LICENSE</span><br><span class="line">-rw-r--r--. 1 root root  2333 Dec  2  2021 NOTICE</span><br><span class="line">-rw-r--r--. 1 root root  3378 Dec  2  2021 README.md</span><br><span class="line">-rw-r--r--. 1 root root  6905 Dec  2  2021 RELEASE-NOTES</span><br><span class="line">-rw-r--r--. 1 root root 16517 Dec  2  2021 RUNNING.txt</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Dec 22  2021 bin</span><br><span class="line">drwxr-xr-x. 1 root root    22 Jan 27 09:21 conf</span><br><span class="line">drwxr-xr-x. 2 root root  4096 Dec 22  2021 lib</span><br><span class="line">drwxrwxrwx. 1 root root    80 Jan 27 09:21 logs</span><br><span class="line">drwxr-xr-x. 2 root root   159 Dec 22  2021 native-jni-lib</span><br><span class="line">drwxrwxrwx. 2 root root    30 Dec 22  2021 temp</span><br><span class="line">drwxr-xr-x. 2 root root     6 Dec 22  2021 webapps</span><br><span class="line">drwxr-xr-x. 7 root root    81 Dec  2  2021 webapps.dist</span><br><span class="line">drwxrwxrwx. 2 root root     6 Dec  2  2021 work</span><br><span class="line">root@95606dac2868:/usr/local/tomcat# cd webapps.dist</span><br><span class="line">root@95606dac2868:/usr/local/tomcat/webapps.dist# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line">root@95606dac2868:/usr/local/tomcat/webapps.dist# cd ..</span><br><span class="line">root@95606dac2868:/usr/local/tomcat# cd webapps</span><br><span class="line">root@95606dac2868:/usr/local/tomcat/webapps# ls</span><br><span class="line">root@95606dac2868:/usr/local/tomcat/webapps# cd ..</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用Linux操作系统的<span class="built_in">cp</span>命令对webapps.dist进行拷贝到webapps中去</span></span><br><span class="line">root@95606dac2868:/usr/local/tomcat# cp -r webapps.dist/* webapps</span><br><span class="line">root@95606dac2868:/usr/local/tomcat# cd webapps</span><br><span class="line">root@95606dac2868:/usr/local/tomcat/webapps# ls</span><br><span class="line">ROOT  docs  examples  host-manager  manager</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最后重新刷新一下tomcat网页，就可以看到tomcat首页了</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>卷就是目录或文件，存在一个或者多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性。</p><p>卷的目的就是数据的持久化，完全独立于容器的生命周期，因此Docker不会在删除容器时删除其挂载的容器卷。</p><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p>docker run -it –privileged&#x3D;true -v&#x2F;宿主机绝对路径目录:&#x2F;容器内目录 镜像名</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>将运用与运行的环境打包成镜像，run后形成容器实例运行，但是我们对数据的要求希望是持久化的</p><p>docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了</p><p>为了能够保存数据载docker中我们使用卷</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>数据卷可在容器之间共享或重用数据</li><li>卷中的更该可以直接实时生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止</li></ul><h2 id="案例-mysql镜像"><a href="#案例-mysql镜像" class="headerlink" title="案例(mysql镜像)"></a>案例(mysql镜像)</h2><ul><li><p>搜索MySQL镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker search mysql</span><br><span class="line">NAME                            DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                           MySQL is a widely used, open-source relation…   13730     [OK]       </span><br><span class="line">mariadb                         MariaDB Server is a high performing open sou…   5240      [OK]       </span><br><span class="line">phpmyadmin                      phpMyAdmin - A web interface for MySQL and M…   726       [OK]       </span><br><span class="line">percona                         Percona Server is a fork of the MySQL relati…   599       [OK]       </span><br><span class="line">databack/mysql-backup           Back up mysql databases to... anywhere!         80                   </span><br><span class="line">bitnami/mysql                   Bitnami MySQL Docker Image                      80                   [OK]</span><br><span class="line">linuxserver/mysql-workbench                                                     48                   </span><br><span class="line">ubuntu/mysql                    MySQL open source fast, stable, multi-thread…   41                   </span><br><span class="line">linuxserver/mysql               A Mysql container, brought to you by LinuxSe…   38                   </span><br><span class="line">circleci/mysql                  MySQL is a widely used, open-source relation…   28                   </span><br><span class="line">google/mysql                    MySQL server for Google Compute Engine          22                   [OK]</span><br><span class="line">rapidfort/mysql                 RapidFort optimized, hardened image for MySQL   14                   </span><br><span class="line">bitnami/mysqld-exporter                                                         4                    </span><br><span class="line">ibmcom/mysql-s390x              Docker image for mysql-s390x                    2                    </span><br><span class="line">vitess/mysqlctld                vitess/mysqlctld                                1                    [OK]</span><br><span class="line">newrelic/mysql-plugin           New Relic Plugin for monitoring MySQL databa…   1                    [OK]</span><br><span class="line">hashicorp/mysql-portworx-demo                                                   0                    </span><br><span class="line">rapidfort/mysql-official        RapidFort optimized, hardened image for MySQ…   0                    </span><br><span class="line">mirantis/mysql                                                                  0                    </span><br><span class="line">docksal/mysql                   MySQL service images for Docksal - https://d…   0                    </span><br><span class="line">rapidfort/mysql8-ib             RapidFort optimized, hardened image for MySQ…   0                    </span><br><span class="line">cimg/mysql                                                                      0                    </span><br><span class="line">eclipse/mysql                   Mysql 5.7, curl, rsync                          0                    [OK]</span><br><span class="line">drud/mysql                                                                      0                    </span><br><span class="line">silintl/mysql-backup-restore    Simple docker image to perform mysql backups…   0                    [OK]</span><br></pre></td></tr></table></figure></li><li><p>下载mysql镜像(这里我下载的是8.0版本)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker pull mysql:8.0</span><br><span class="line">8.0: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Pull complete </span><br><span class="line">93619dbc5b36: Pull complete </span><br><span class="line">99da31dd6142: Pull complete </span><br><span class="line">626033c43d70: Pull complete </span><br><span class="line">37d5d7efb64e: Pull complete </span><br><span class="line">ac563158d721: Pull complete </span><br><span class="line">d2ba16033dad: Pull complete </span><br><span class="line">688ba7d5c01a: Pull complete </span><br><span class="line">00e060b6d11d: Pull complete </span><br><span class="line">1c04857f594f: Pull complete </span><br><span class="line">4d7cfa90e6ea: Pull complete </span><br><span class="line">e0431212d27d: Pull complete </span><br><span class="line">Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709</span><br><span class="line">Status: Downloaded newer image for mysql:8.0</span><br><span class="line">docker.io/library/mysql:8.0</span><br></pre></td></tr></table></figure></li><li><p>查看下载的MySQL镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker images</span><br><span class="line">REPOSITORY   TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">nginx        latest    605c77e624dd   13 months ago   141MB</span><br><span class="line">tomcat       10.0      fb5657adc892   13 months ago   680MB</span><br><span class="line">mysql        8.0       3218b38490ce   13 months ago   516MB</span><br></pre></td></tr></table></figure></li><li><p>运行MySQL，设置相关的配置，挂载数据卷，环境配置等，进入MySQL容器添加数据，注意，当插入的数据有中文时，会乱码，原因是该MySQL的字符集不是UTF-8，需要设置成UTF-8即可，通过命令<code>show variables like &#39;character%&#39;;</code>进行查看，然后切换到卷的conf目录，添加文件my.cnf，文件里填写配置好字符集utf8即可，具体操作看下面。。。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"># -d：后台运行</span><br><span class="line"># -p：端口映射</span><br><span class="line"># -v：卷挂载</span><br><span class="line"># -e：环境配置</span><br><span class="line"># --name：容器别名</span><br><span class="line">[root@centos ~]# docker run -d -p 3333:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root --name mysql8.0 mysql:8.0</span><br><span class="line">24568c28a9d18237f7177647a3d8828dd4956cfe482683d955e703aa1bd4dee2</span><br><span class="line">[root@centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                                                  NAMES</span><br><span class="line">24568c28a9d1   mysql:8.0   &quot;docker-entrypoint.s…&quot;   29 seconds ago   Up 28 seconds   33060/tcp, 0.0.0.0:3333-&gt;3306/tcp, :::3333-&gt;3306/tcp   mysql8.0</span><br><span class="line">[root@centos ~]# docker exec -it 24568c28a9d1 /bin/bash</span><br><span class="line">root@24568c28a9d1:/# mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.27 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line">mysql&gt; show databases</span><br><span class="line">    -&gt; ;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.02 sec)</span><br><span class="line">mysql&gt; create database db01;</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line">mysql&gt; use db01;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table t1(id int,name varchar(20));</span><br><span class="line">Query OK, 0 rows affected (0.06 sec)</span><br><span class="line">mysql&gt; insert into t1 value(1,&#x27;guangzai&#x27;);</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1</span><br><span class="line">    -&gt; ;</span><br><span class="line">+------+----------+</span><br><span class="line">| id   | name     |</span><br><span class="line">+------+----------+</span><br><span class="line">|    1 | guangzai |</span><br><span class="line">+------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; show variables like &#x27;character%&#x27;;</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| Variable_name            | Value                          |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| character_set_client     | latin1                         |</span><br><span class="line">| character_set_connection | latin1                         |</span><br><span class="line">| character_set_database   | utf8mb4                        |</span><br><span class="line">| character_set_filesystem | binary                         |</span><br><span class="line">| character_set_results    | latin1                         |</span><br><span class="line">| character_set_server     | utf8mb4                        |</span><br><span class="line">| character_set_system     | utf8mb3                        |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 在SQLyog里手动添加了一条数据：id：7，name：光仔</span><br><span class="line">mysql&gt; select *from t1;</span><br><span class="line">+------+----------+</span><br><span class="line">| id   | name     |</span><br><span class="line">+------+----------+</span><br><span class="line">|    1 | guangzai |</span><br><span class="line">|    7 | ??       |</span><br><span class="line">+------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 退出MySQL容器，执行如下命令，新增文件，填写相应内容配置</span><br><span class="line">[root@centos ~]# cd /home/mysql/conf</span><br><span class="line">[root@centos conf]# ls</span><br><span class="line">[root@centos conf]# vim my.cnf</span><br><span class="line">[root@centos conf]# cat my.cnf</span><br><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line">character_set_server = utf8</span><br><span class="line"></span><br><span class="line"># 重启MySQL容器服务，重新执行即可</span><br><span class="line">[root@centos conf]# docker restart mysql8.0</span><br><span class="line">mysql8.0</span><br><span class="line">[root@centos conf]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                                                  NAMES</span><br><span class="line">3f0159bda066   mysql:8.0   &quot;docker-entrypoint.s…&quot;   34 minutes ago   Up 44 seconds   33060/tcp, 0.0.0.0:3333-&gt;3306/tcp, :::3333-&gt;3306/tcp   mysql8.0</span><br><span class="line">[root@centos conf]# docker exec -it 3f0159bda066 /bin/bash</span><br><span class="line">root@3f0159bda066:/# mysql -uroot -p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 8</span><br><span class="line">Server version: 8.0.27 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2021, Oracle and/or its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; use db01</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"># 这个就是修改字符集后的中文显示不乱码</span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;character%&#x27;;</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| Variable_name            | Value                          |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">| character_set_client     | utf8mb3                        |</span><br><span class="line">| character_set_connection | utf8mb3                        |</span><br><span class="line">| character_set_database   | utf8mb4                        |</span><br><span class="line">| character_set_filesystem | binary                         |</span><br><span class="line">| character_set_results    | utf8mb3                        |</span><br><span class="line">| character_set_server     | utf8mb3                        |</span><br><span class="line">| character_set_system     | utf8mb3                        |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql-8.0/charsets/ |</span><br><span class="line">+--------------------------+--------------------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 重新查询数据</span><br><span class="line">mysql&gt; select * from t1;</span><br><span class="line">+------+----------+</span><br><span class="line">| id   | name     |</span><br><span class="line">+------+----------+</span><br><span class="line">|    1 | guangzai |</span><br><span class="line">|    7 | 光仔     |</span><br><span class="line">+------+----------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></li><li><p>打开第三方可视化视图软件MySQL软件(SQLyog、Navicat)进行连接MySQL，建立新的连接，其中连接的SQL主机地址可通过<code>ifconfig</code>命令进行查看，如果MySQL的版本是5.7以上的，会报一个2058的错误，原因是MySQL的密码加密方式变了，由于我们下载的是MySQL8.0的版本，所以我们只需要在mysql容器中执行<code>ALTER USER ‘root’@’%’ IDENTIFIED WITH mysql_native_password BY &#39;password&#39;;</code>(注意分号要加上)改代码即可，其中password 是你自己设置的root密码，之后就可以在MySQL图形化界面进行操作MySQL数据即可，如下图所示</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230127195134175.png" alt="image-20230127195134175"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230127192022972.png" alt="image-20230127192022972"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER root@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230127194121304.png" alt="image-20230127194121304"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230127194235053.png" alt="image-20230127194235053"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230127193129843.png" alt="image-20230127193129843"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230127193503360.png" alt="image-20230127193503360"></p></li><li><p>删除MySQL8.0容器，但它并没有把数据删除掉，仍然保留在卷中，相当于是一个备份吧，防止误操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE       COMMAND                  CREATED          STATUS          PORTS                                                  NAMES</span><br><span class="line">24568c28a9d1   mysql:8.0   &quot;docker-entrypoint.s…&quot;   43 minutes ago   Up 43 minutes   33060/tcp, 0.0.0.0:3333-&gt;3306/tcp, :::3333-&gt;3306/tcp   mysql8.0</span><br><span class="line">[root@centos ~]# docker stop 24568c28a9d1</span><br><span class="line">24568c28a9d1</span><br><span class="line">[root@centos ~]# docker rm -f 24568c28a9d1</span><br><span class="line">24568c28a9d1</span><br><span class="line">[root@centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@centos ~]# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">[root@centos ~]# cd /home</span><br><span class="line">[root@centos home]# ls</span><br><span class="line">mysql  user</span><br><span class="line">[root@centos home]# cd mysql</span><br><span class="line">[root@centos mysql]# ll</span><br><span class="line">总用量 4</span><br><span class="line">drwxr-xr-x. 2 root    root    6 1月  27 18:02 conf</span><br><span class="line">drwxr-xr-x. 7 polkitd root 4096 1月  27 19:56 data</span><br><span class="line">[root@centos mysql]# cd data</span><br><span class="line">[root@centos data]# ll</span><br><span class="line">总用量 185760</span><br><span class="line">-rw-r-----. 1 polkitd input       56 1月  27 19:12 auto.cnf</span><br><span class="line">-rw-r-----. 1 polkitd input  3116921 1月  27 19:12 binlog.000001</span><br><span class="line">-rw-r-----. 1 polkitd input     1439 1月  27 19:56 binlog.000002</span><br><span class="line">-rw-r-----. 1 polkitd input       32 1月  27 19:12 binlog.index</span><br><span class="line">-rw-------. 1 polkitd input     1680 1月  27 19:12 ca-key.pem</span><br><span class="line">-rw-r--r--. 1 polkitd input     1112 1月  27 19:12 ca.pem</span><br><span class="line">-rw-r--r--. 1 polkitd input     1112 1月  27 19:12 client-cert.pem</span><br><span class="line">-rw-------. 1 polkitd input     1680 1月  27 19:12 client-key.pem</span><br><span class="line">drwxr-x---. 2 polkitd input       20 1月  27 19:16 db01</span><br><span class="line">-rw-r-----. 1 polkitd input   196608 1月  27 19:42 #ib_16384_0.dblwr</span><br><span class="line">-rw-r-----. 1 polkitd input  8585216 1月  27 19:12 #ib_16384_1.dblwr</span><br><span class="line">-rw-r-----. 1 polkitd input     3883 1月  27 19:56 ib_buffer_pool</span><br><span class="line">-rw-r-----. 1 polkitd input 12582912 1月  27 19:56 ibdata1</span><br><span class="line">-rw-r-----. 1 polkitd input 50331648 1月  27 19:42 ib_logfile0</span><br><span class="line">-rw-r-----. 1 polkitd input 50331648 1月  27 19:12 ib_logfile1</span><br><span class="line">drwxr-x---. 2 polkitd input        6 1月  27 19:56 #innodb_temp</span><br><span class="line">drwxr-x---. 2 polkitd input      143 1月  27 19:12 mysql</span><br><span class="line">-rw-r-----. 1 polkitd input 31457280 1月  27 19:40 mysql.ibd</span><br><span class="line">drwxr-x---. 2 polkitd input     8192 1月  27 19:12 performance_schema</span><br><span class="line">-rw-------. 1 polkitd input     1676 1月  27 19:12 private_key.pem</span><br><span class="line">-rw-r--r--. 1 polkitd input      452 1月  27 19:12 public_key.pem</span><br><span class="line">-rw-r--r--. 1 polkitd input     1112 1月  27 19:12 server-cert.pem</span><br><span class="line">-rw-------. 1 polkitd input     1680 1月  27 19:12 server-key.pem</span><br><span class="line">drwxr-x---. 2 polkitd input       28 1月  27 19:12 sys</span><br><span class="line">-rw-r-----. 1 polkitd input 16777216 1月  27 19:40 undo_001</span><br><span class="line">-rw-r-----. 1 polkitd input 16777216 1月  27 19:42 undo_002</span><br></pre></td></tr></table></figure></li></ul><h2 id="匿名和具名挂载"><a href="#匿名和具名挂载" class="headerlink" title="匿名和具名挂载"></a>匿名和具名挂载</h2><p>所有的docker容器内的卷，没有指定目录的情况下都是在<code>/var/lib/docker/volumes/xxxx/_data</code>，我们通过具名挂载可以方便的找到我们的一个卷，大多数情况下都是使用具名挂载</p><p>如何确定是匿名和具名挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-v 容器内路径 # 匿名挂载</span><br><span class="line">-v 卷名:容器内路径 # 具名挂载</span><br><span class="line">-v /宿主机路径::容器内路径 # 指定路径挂载</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 -v 容器内路径:ro/rw 可以改变读写权限</span></span><br><span class="line">ro readonly # 只读</span><br><span class="line">rw readwrite # 可读可写</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一旦设定了容器的权限，容器就对我们挂载出来的内容就有限定了！</span></span><br><span class="line">docker run -d -p --name nginx01 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -p --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作的</span></span><br></pre></td></tr></table></figure><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><h2 id="初识Dockerfile"><a href="#初识Dockerfile" class="headerlink" title="初识Dockerfile"></a>初识Dockerfile</h2><p>Dockerfile就是用来构建docker镜像的构建文件！命令脚本！</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本是一个一个的命令(大写)，每个命令都是一层！</p><p>在&#x2F;home目录下创建一个docker-test-volume目录用来测试学习Dockerfile，命令为<code>mkdir docker-test-volume</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个Dockerfile文件，名字可以随机，建议是Dockerfile</span></span><br><span class="line">[root@centos ~]# cd /home</span><br><span class="line">[root@centos home]# mkdir docker-test-volume</span><br><span class="line">[root@centos home]# ls</span><br><span class="line">docker-test-volume  mysql  user</span><br><span class="line">[root@centos home]# pwd</span><br><span class="line">/home</span><br><span class="line">[root@centos home]# cd docker-test-volume</span><br><span class="line">[root@centos docker-test-volume]# pwd</span><br><span class="line">/home/docker-test-volume</span><br><span class="line">[root@centos docker-test-volume]# vim dockerfile</span><br><span class="line">[root@centos docker-test-volume]# cat dockerfile</span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line">CMD echo &quot;----end----&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用docker build命令创建一个容器，名字为guangzai/centos</span></span><br><span class="line">[root@centos docker-test-volume]# docker build -f /home/docker-test-volume/dockerfile -t guangzai/centos:1.0 .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1/4 : FROM centos</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">5d0da3dc9764</span></span><br><span class="line">Step 2/4 : VOLUME [&quot;volume01&quot;,&quot;volume02&quot;]</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 616203511a15</span></span><br><span class="line">Removing intermediate container 616203511a15</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">60d1321edada</span></span><br><span class="line">Step 3/4 : CMD echo &quot;----end----&quot;</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 933a382004e2</span></span><br><span class="line">Removing intermediate container 933a382004e2</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">5a432450e96a</span></span><br><span class="line">Step 4/4 : CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 9082225927bd</span></span><br><span class="line">Removing intermediate container 9082225927bd</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">66847e0f972b</span></span><br><span class="line">Successfully built 66847e0f972b</span><br><span class="line">Successfully tagged guangzai/centos:1.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看自己创建的镜像容器</span></span><br><span class="line">[root@centos docker-test-volume]# docker images</span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">guangzai/centos   1.0       66847e0f972b   19 seconds ago   231MB</span><br><span class="line">nginx             latest    605c77e624dd   13 months ago    141MB</span><br><span class="line">tomcat            10.0      fb5657adc892   13 months ago    680MB</span><br><span class="line">mysql             8.0       3218b38490ce   13 months ago    516MB</span><br><span class="line">centos            latest    5d0da3dc9764   16 months ago    231MB</span><br><span class="line">[root@centos docker-test-volume]# docker run -it 66847e0f972b /bin/bash</span><br><span class="line">[root@1510e5c72d07 /]# ls -l</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx.   1 root root   7 Nov  3  2020 bin -&gt; usr/bin</span><br><span class="line">drwxr-xr-x.   5 root root 360 Jan 27 13:34 dev</span><br><span class="line">drwxr-xr-x.   1 root root  66 Jan 27 13:34 etc</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 home</span><br><span class="line">lrwxrwxrwx.   1 root root   7 Nov  3  2020 lib -&gt; usr/lib</span><br><span class="line">lrwxrwxrwx.   1 root root   9 Nov  3  2020 lib64 -&gt; usr/lib64</span><br><span class="line">drwx------.   2 root root   6 Sep 15  2021 lost+found</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 media</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 mnt</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 opt</span><br><span class="line">dr-xr-xr-x. 191 root root   0 Jan 27 13:34 proc</span><br><span class="line">dr-xr-x---.   2 root root 162 Sep 15  2021 root</span><br><span class="line">drwxr-xr-x.  11 root root 163 Sep 15  2021 run</span><br><span class="line">lrwxrwxrwx.   1 root root   8 Nov  3  2020 sbin -&gt; usr/sbin</span><br><span class="line">drwxr-xr-x.   2 root root   6 Nov  3  2020 srv</span><br><span class="line">dr-xr-xr-x.  13 root root   0 Jan 27 03:34 sys</span><br><span class="line">drwxrwxrwt.   7 root root 171 Sep 15  2021 tmp</span><br><span class="line">drwxr-xr-x.  12 root root 144 Sep 15  2021 usr</span><br><span class="line">drwxr-xr-x.  20 root root 262 Sep 15  2021 var</span><br><span class="line">drwxr-xr-x.   2 root root   6 Jan 27 13:34 volume01 # 这个是生成镜像时自动挂载的，数据卷目录</span><br><span class="line">drwxr-xr-x.   2 root root   6 Jan 27 13:34 volume02 # 这个是生成镜像时自动挂载的，数据卷目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入数据卷volume01里，新增一个test.txt文件，目的是验证数据卷的内容是否跟容器外绑定的目录（挂载）内容相同</span></span><br><span class="line">[root@8bd6ba269d7c /]# cd volume01</span><br><span class="line">[root@8bd6ba269d7c volume01]# touch test.txt</span><br><span class="line">[root@8bd6ba269d7c volume01]# ls</span><br><span class="line">test.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新开一个窗口</span></span><br><span class="line">[root@centos ~]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED              STATUS              PORTS     NAMES</span><br><span class="line">8bd6ba269d7c   66847e0f972b   &quot;/bin/bash&quot;   About a minute ago   Up About a minute             guangzai007</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker inspect,查看镜像的元数据，以下的元数据只显示了部分有用的数据，省略了其他无关的数据，以实际为准</span></span><br><span class="line">[root@centos ~]# docker inspect 8bd6ba269d7c</span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;4087cb2e81c0501be0914130c955cd5427f6287e891a75b4ce7b5ff037569848&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/4087cb2e81c0501be0914130c955cd5427f6287e891a75b4ce7b5ff037569848/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;volume02&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;77a768c4c81a998a68f34b68f8fa71bf2ad5e633f86f5fb2caebf093b4ca12fa&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;/var/lib/docker/volumes/77a768c4c81a998a68f34b68f8fa71bf2ad5e633f86f5fb2caebf093b4ca12fa/_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;volume01&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span>进入volume01的Source路径，证明容器挂载和数据卷的内容一致</span></span><br><span class="line">[root@centos home]# cd /var/lib/docker/volumes/77a768c4c81a998a68f34b68f8fa71bf2ad5e633f86f5fb2caebf093b4ca12fa/_data</span><br><span class="line">[root@centos _data]# ls -l</span><br><span class="line">总用量 0</span><br><span class="line">-rw-r--r--. 1 root root 0 1月  27 21:57 test.txt</span><br><span class="line">[root@centos _data]# ls</span><br><span class="line">test.txt</span><br></pre></td></tr></table></figure><h2 id="Dockerfile介绍"><a href="#Dockerfile介绍" class="headerlink" title="Dockerfile介绍"></a>Dockerfile介绍</h2><p>dockerfile是用来构建docker的镜像文件！命令参数脚本！（FROM、ADD、LABLE、CMD…)</p><p>构建步骤</p><ul><li>编写一个dockerfile文件</li><li>docker build 构建一个镜像</li><li>docker run 运行镜像</li><li>dockr push 发布镜像（Docker hub、阿里云镜像仓库）</li></ul><h2 id="Dockerfile构建过程"><a href="#Dockerfile构建过程" class="headerlink" title="Dockerfile构建过程"></a>Dockerfile构建过程</h2><p>基础知识</p><ul><li>每个命令(指令)都必须是大写字母</li><li>执行顺序是从上到下</li><li>用<code>#</code> 表示注释</li><li>每一个指令都会创建并提交一个镜像层，如下图所示</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230128140209857.png" alt="image-20230128140209857"></p><ul><li>dockerfile是面向开发的，以后要发布项目，做镜像，就需要编写dockerfile文件，这十分重要！！！</li><li>DockerFile：构建文件，定义一切的步骤，源代码</li><li>DockerImages：通过DockerFile生成的镜像，最终发布和运行产品项目</li></ul><h2 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM #基础镜像，一切从这里开始构建，99%的镜像都是从FROM scratch开始的</span><br><span class="line">MAINTAINER # 镜像的作者，姓名+邮箱</span><br><span class="line">RUN # 镜像构建时需要执行的命令</span><br><span class="line">WORKDIR # 镜像的工作目录</span><br><span class="line">VOLUME # 挂载的目录</span><br><span class="line">EXPOSE # 保留端口配置</span><br><span class="line">CMD # 指定这个容器启动时要运行的命令，只有最后一个会生效，可被替代</span><br><span class="line">ENTRYPOINT # 指定这个容器启动时要运行的命令，可以追加命令</span><br><span class="line">ONBUILD # 当构建一个被继承Dockerfile这个时候就会运行该指令，触发指令</span><br><span class="line">COPY # 类似ADD，将我们文件拷贝到镜像中</span><br><span class="line">ENV # 构建的时候设置环境变量</span><br></pre></td></tr></table></figure><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230128140803240.png" alt="image-20230128140803240"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230128135603566.png" alt="image-20230128135603566"></p><h2 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h2><p>可以发布到Docker hub或者阿里云镜像仓库,下面是发布到Docker hub上的</p><ol><li><p>在Docker hub上注册自己的账号,点击<a href="https://hub.docker.com/">这里</a>进入注册</p></li><li><p>确定这个账号可以登录</p></li><li><p>在我们服务器上提交自己的镜像</p></li><li><p>登录Docker hub,命令为<code>docker login</code>,账号密码登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@centos tomcat]# docker login --help</span><br><span class="line"></span><br><span class="line">Usage:  docker login [OPTIONS] [SERVER]</span><br><span class="line"></span><br><span class="line">Log in to a Docker registry.</span><br><span class="line">If no server is specified, the default is defined by the daemon.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --password string   Password</span><br><span class="line">      --password-stdin    Take the password from stdin</span><br><span class="line">  -u, --username string   Username</span><br></pre></td></tr></table></figure></li><li><p>将镜像推送到Docker hub上,命令为docker push</p></li></ol><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230128161413209.png" alt="image-20230128161413209"></p><h1 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h1><p>容器间的互联和通信以及端口映射，容器IP变动的时候可以通过服务名直接网络通信而不受到影响</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230129162729333.png" alt="image-20230129162729333"></p><h2 id="理解Docker0"><a href="#理解Docker0" class="headerlink" title="理解Docker0"></a>理解Docker0</h2><p>我们每启动一个docker容器，docker就会给docker容器分配一个IP地址，只需要安装docker，就会有一个网卡docker0，桥接模式，使用的技术是evth-pair技术！所有的容器在不指定网络的情况下，都是由docker0路由的，docker会给我们的容器分配一个默认的可用IP地址</p><p>查看网卡命令：ip addr，ifconfig</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">[root@centos home]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:9f:4f:7b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.88.88/24 brd 192.168.88.255 scope global noprefixroute ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::d9b7:d68b:dc07:19f7/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: virbr0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:dc:dd:dd brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.122.1/24 brd 192.168.122.255 scope global virbr0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: virbr0-nic: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc pfifo_fast master virbr0 state DOWN group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:dc:dd:dd brd ff:ff:ff:ff:ff:ff</span><br><span class="line">5: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:79:91:7a:f6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:79ff:fe91:7af6/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">       </span><br><span class="line">[root@centos ~]# ifconfig</span><br><span class="line">docker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255</span><br><span class="line">        ether 02:42:39:ff:d4:ff  txqueuelen 0  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.88.88  netmask 255.255.255.0  broadcast 192.168.88.255</span><br><span class="line">        inet6 fe80::d9b7:d68b:dc07:19f7  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:9f:4f:7b  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 2210  bytes 273980 (267.5 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 4694  bytes 1225200 (1.1 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 32  bytes 2592 (2.5 KiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 32  bytes 2592 (2.5 KiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">virbr0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.122.1  netmask 255.255.255.0  broadcast 192.168.122.255</span><br><span class="line">        ether 52:54:00:dc:dd:dd  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>使用docker network ls命令，可查看docker网络模式命令,默认的3个网络模式（bridge、host、none），可通过docker network –help，来查询常用的命令，如：docker network + create、connect、disconnect、inspect、ls、prune、rm等命令。。。</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230129163123933.png" alt="image-20230129163123933"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">a7788fd4cdc3   bridge    bridge    local</span><br><span class="line">f0894f2f8dcf   host      host      local</span><br><span class="line">f9a2338d6bcd   none      null      local</span><br><span class="line"></span><br><span class="line">[root@centos ~]# docker network --help</span><br><span class="line"></span><br><span class="line">Usage:  docker network COMMAND</span><br><span class="line"></span><br><span class="line">Manage networks</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  connect     Connect a container to a network</span><br><span class="line">  create      Create a network</span><br><span class="line">  disconnect  Disconnect a container from a network</span><br><span class="line">  inspect     Display detailed information on one or more networks</span><br><span class="line">  ls          List networks</span><br><span class="line">  prune       Remove all unused networks</span><br><span class="line">  rm          Remove one or more networks</span><br><span class="line"></span><br><span class="line">Run &#x27;docker network COMMAND --help&#x27; for more information on a command.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建my_network</span></span><br><span class="line">[root@centos ~]# docker network create my_network</span><br><span class="line">afa40579de3dd13698a8d1460f0689a689466017372b4a6be711924f197dac4b</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看网络命令<span class="built_in">ls</span></span></span><br><span class="line">[root@centos ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME         DRIVER    SCOPE</span><br><span class="line">a7788fd4cdc3   bridge       bridge    local</span><br><span class="line">f0894f2f8dcf   host         host      local</span><br><span class="line">afa40579de3d   my_network   bridge    local # 新增的docker网络</span><br><span class="line">f9a2338d6bcd   none         null      local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除my_network</span></span><br><span class="line">[root@centos ~]# docker network rm my_network</span><br><span class="line">my_network</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看网络<span class="built_in">ls</span></span></span><br><span class="line">[root@centos ~]# docker network ls</span><br><span class="line">NETWORK ID     NAME      DRIVER    SCOPE</span><br><span class="line">a7788fd4cdc3   bridge    bridge    local</span><br><span class="line">f0894f2f8dcf   host      host      local</span><br><span class="line">f9a2338d6bcd   none      null      local</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看网络源数据</span></span><br><span class="line">[root@centos ~]# docker network inspect host</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Name&quot;: &quot;host&quot;,</span><br><span class="line">        &quot;Id&quot;: &quot;f0894f2f8dcfb768ebed049f119a6ef9e6f314871eff16cde353503e6b644a2e&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2023-01-24T15:01:17.03792129+08:00&quot;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;host&quot;,</span><br><span class="line">        &quot;EnableIPv6&quot;: false,</span><br><span class="line">        &quot;IPAM&quot;: &#123;</span><br><span class="line">            &quot;Driver&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;Options&quot;: null,</span><br><span class="line">            &quot;Config&quot;: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Internal&quot;: false,</span><br><span class="line">        &quot;Attachable&quot;: false,</span><br><span class="line">        &quot;Ingress&quot;: false,</span><br><span class="line">        &quot;ConfigFrom&quot;: &#123;</span><br><span class="line">            &quot;Network&quot;: &quot;&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;ConfigOnly&quot;: false,</span><br><span class="line">        &quot;Containers&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="Docker微服务实战"><a href="#Docker微服务实战" class="headerlink" title="Docker微服务实战"></a>Docker微服务实战</h1><p>1、构建springboot项目</p><p>使用idea软件直接新建一个springboot项目，配置好自己的环境</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230129195124661.png" alt="image-20230129195124661"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230129195344319.png" alt="image-20230129195344319"></p><p>2、编写Dockerfile文件、写一个测试的Controller类、最后通过maven打包成jar包</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230129195903719.png" alt="image-20230129195903719"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230129200101650.png" alt="image-20230129200101650"></p><p>3、构建镜像、运行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看上传好的jar包和Dockerfile文件</span></span><br><span class="line">[root@centos idea]# ll</span><br><span class="line">总用量 17244</span><br><span class="line">-rw-r--r--. 1 root root 17650404 1月  29 19:39 Docker_Demo-0.0.1-SNAPSHOT.jar</span><br><span class="line">-rw-r--r--. 1 root root      122 1月  29 19:39 Dockerfile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包成镜像</span></span><br><span class="line">[root@centos idea]# docker build -t guangzai666 .</span><br><span class="line">Sending build context to Docker daemon  17.65MB</span><br><span class="line">Step 1/5 : FROM java:8</span><br><span class="line">8: Pulling from library/java</span><br><span class="line">5040bd298390: Pull complete </span><br><span class="line">fce5728aad85: Pull complete </span><br><span class="line">76610ec20bf5: Pull complete </span><br><span class="line">60170fec2151: Pull complete </span><br><span class="line">e98f73de8f0d: Pull complete </span><br><span class="line">11f7af24ed9c: Pull complete </span><br><span class="line">49e2d6393f32: Pull complete </span><br><span class="line">bb9cdec9c7f3: Pull complete </span><br><span class="line">Digest: sha256:c1ff613e8ba25833d2e1940da0940c3824f03f802c449f3d1815a66b7f8c0e9d</span><br><span class="line">Status: Downloaded newer image for java:8</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">d23bdf5b1b1b</span></span><br><span class="line">Step 2/5 : COPY *.jar /app.jar</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">de16befa9598</span></span><br><span class="line">Step 3/5 : CMD [&quot;--server.port=8080&quot;]</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> b19d40d6fce2</span></span><br><span class="line">Removing intermediate container b19d40d6fce2</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">df574d9e8e1d</span></span><br><span class="line">Step 4/5 : EXPOSE 8080</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 2dd647f640fa</span></span><br><span class="line">Removing intermediate container 2dd647f640fa</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">7ec63a260c54</span></span><br><span class="line">Step 5/5 : ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;/app.jar&quot;]</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="keyword">in</span> 8ea242f10c55</span></span><br><span class="line">Removing intermediate container 8ea242f10c55</span><br><span class="line"><span class="meta prompt_"> ---&gt; </span><span class="language-bash">2e6b760ba8a4</span></span><br><span class="line">Successfully built 2e6b760ba8a4</span><br><span class="line">Successfully tagged guangzai666:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像</span></span><br><span class="line">[root@centos idea]# docker images</span><br><span class="line">REPOSITORY        TAG       IMAGE ID       CREATED          SIZE</span><br><span class="line">guangzai666       latest    2e6b760ba8a4   15 minutes ago   661MB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行镜像</span></span><br><span class="line">[root@centos idea]# docker run -d -p6666:8080 --name guangzai-springboot-web guangzai666</span><br><span class="line">e4bb004eb9d44cf9e7e1d25392615ae4e7ac35802504d5d5e667d78a44a96417</span><br><span class="line">[root@centos idea]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND                  CREATED         STATUS         PORTS                                       NAMES</span><br><span class="line">e4bb004eb9d4   guangzai666   &quot;java -jar /app.jar …&quot;   6 seconds ago   Up 4 seconds   0.0.0.0:6666-&gt;8080/tcp, :::6666-&gt;8080/tcp   guangzai-springboot-web</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问本地的localhost：6666端口下的helloDocker地址，终端显示HelloDocker，即为成功！！！</span></span><br><span class="line">[root@centos idea]# curl localhost:6666</span><br><span class="line">&#123;&quot;timestamp&quot;:&quot;2023-01-29T12:05:07.729+00:00&quot;,&quot;status&quot;:404,&quot;error&quot;:&quot;Not Found&quot;,&quot;path&quot;:&quot;/&quot;&#125;</span><br><span class="line">[root@centos idea]# curl localhost:6666/helloDocker</span><br><span class="line">HelloDocker</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h1><h2 id="compose的初识"><a href="#compose的初识" class="headerlink" title="compose的初识"></a>compose的初识</h2><p>docker-compose是Docker官方开源的项目,负责对Docker容器集群的快速编排。</p><p>docker建议我们每一个容器中只运行一个服务,因为Docker容器本身占用资源极少,所以最好是将每个服务单独的分割开来,但是这样我们又面临一个问题?</p><p>如果我们需要同时部署好多个服务,难道要每个服务单独写一个dockerfile然后在构建镜像,构建容器,这样很费时费力,所以Docker官方提供了docker-compose多服务部署工具.</p><p>例如要实现一个Web微服务项目,除了Web容器本身,往往还需要加上后端的数据库MySQL服务容器,redis服务器,注册中心Eureka,甚至还包括负载均衡容器等等…</p><p>Compose允许用户通过一个单独的docker-compose.yml模板文件(ＹＡＭＬ格式)来定义一组相关联的容器为一个项目(project)。</p><p>可以很容易地用一个配置文件定义一个多容器的应用，然后使用一条指令安装这个应用的所有依赖，完成构建。docker-compose解决了容器与容器之间如何管理编排的问题。</p><h2 id="compose安装"><a href="#compose安装" class="headerlink" title="compose安装"></a>compose安装</h2><p>进入docker官网按照文档进行安装，检查是否安装成功，docker-compose –version，出现版本号即为安装成功！！！</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230131143530555.png" alt="image-20230131143530555"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos test]# curl -L https://get.daocloud.io/docker/compose/releases/download/v2.14.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_">  % </span><span class="language-bash">Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   425  100   425    0     0    423      0  0:00:01  0:00:01 --:--:--   423</span><br><span class="line">100 42.8M  100 42.8M    0     0  10.1M      0  0:00:04  0:00:04 --:--:-- 14.1M</span><br><span class="line">[root@centos test]# chmod +x /usr/local/bin/docker-compose</span><br><span class="line">[root@centos test]# docker-compose --version</span><br><span class="line">Docker Compose version v2.14.0</span><br></pre></td></tr></table></figure><h2 id="compose核心"><a href="#compose核心" class="headerlink" title="compose核心"></a>compose核心</h2><p>一个文件：docker-compose.yml</p><p>两个要素</p><ul><li>服务（service）：一个个应用容器实例，比如订单微服务 、库存微服务、mysql容器、nginx容器、redis容器</li><li>工程（project）：由一组关联的应用容器组成的一个完整业务单元，在docker-compose.yml文件中定义</li></ul><h2 id="compose常用命令"><a href="#compose常用命令" class="headerlink" title="compose常用命令"></a>compose常用命令</h2><ul><li>docker-compose -h：查看帮助</li><li>docker-compose up：启动所有docker-compose服务</li><li>docker-compose up -d：启动所有docker-compose服务并在后台运行</li><li>docker-compose down：停止并删除容器、网络、卷、镜像</li><li>docker-compose exec yml里面的服务器id：进入容器实例内部docker-compose exec docker-compose.yml文件中写的服务id &#x2F;bin&#x2F;bash</li><li>docker-compose ps：展示当前docker-compose编排过的运行过的所有容器</li><li>docker-compose top：展示当前docker-compose编排过的容器进程</li><li>docker-compose  logs yml里面的服务id：查看容器输出日志</li><li>docker-compose config：检查配置</li><li>docker-compose config -q：检查配置，有问题才输出</li><li>docker-compose restart：重启服务</li><li>docker-compose start：启动服务</li><li>docker-compose stop：停止服务</li></ul><h2 id="compose使用"><a href="#compose使用" class="headerlink" title="compose使用"></a>compose使用</h2><p>步骤 </p><ul><li>编写dockerfile定义各个微服务应用并构建出对应的镜像文件</li><li>使用docker-compose.yml定义一个完整的业务单元，安排好整体应用中的各个容器服务</li><li>最后执行docker-compose up命令来启动并运行整个应用程序，完成一键部署上线</li></ul><h1 id="Docker可视化工具"><a href="#Docker可视化工具" class="headerlink" title="Docker可视化工具"></a>Docker可视化工具</h1><h2 id="Portainer图形化工具"><a href="#Portainer图形化工具" class="headerlink" title="Portainer图形化工具"></a>Portainer图形化工具</h2><p>Docker轻量级可视化工具Portainer，它提供了docker图形化界面，用于方便地管理Docker环境，包括单机和集群环境。</p><p>点击<a href="https://www.portainer.io/">这里</a>进入Portainer官网</p><h2 id="Portainer安装"><a href="#Portainer安装" class="headerlink" title="Portainer安装"></a>Portainer安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos ~]# docker pull portainer/portainer</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from portainer/portainer</span><br><span class="line">94cfa856b2b1: Pull complete </span><br><span class="line">49d59ee0881a: Pull complete </span><br><span class="line">a2300fd28637: Pull complete </span><br><span class="line">Digest: sha256:fb45b43738646048a0a0cc74fcee2865b69efde857e710126084ee5de9be0f3f</span><br><span class="line">Status: Downloaded newer image for portainer/portainer:latest</span><br><span class="line">docker.io/portainer/portainer:latest</span><br></pre></td></tr></table></figure><h2 id="Portainer运行"><a href="#Portainer运行" class="headerlink" title="Portainer运行"></a>Portainer运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos test]# docker run -d -p 8000:8000 -p 9000:9000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br><span class="line">48d77b151b1fabb7eba632d8166971369761b486a521368436f83b3a79714e62</span><br><span class="line">[root@centos test]# docker images</span><br><span class="line">REPOSITORY            TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">portainer/portainer   latest    580c0e4e98b0   22 months ago   79.1MB</span><br><span class="line">[root@centos test]# docker ps</span><br><span class="line">CONTAINER ID   IMAGE                 COMMAND        CREATED          STATUS          PORTS                                                                                  NAMES</span><br><span class="line">48d77b151b1f   portainer/portainer   &quot;/portainer&quot;   16 seconds ago   Up 14 seconds   0.0.0.0:8000-&gt;8000/tcp, :::8000-&gt;8000/tcp, 0.0.0.0:9000-&gt;9000/tcp, :::9000-&gt;9000/tcp   portainer</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该命令可查看Docker详细信息,对应下面的图形化界面的数据</span></span><br><span class="line">[root@centos test]# docker system df</span><br><span class="line">TYPE            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span><br><span class="line">Images          1         1         79.09MB   0B (0%)</span><br><span class="line">Containers      1         1         0B        0B</span><br><span class="line">Local Volumes   7         1         131.9kB   0B (0%)</span><br><span class="line">Build Cache     0         0         0B        0B</span><br></pre></td></tr></table></figure><h2 id="Portainer登录"><a href="#Portainer登录" class="headerlink" title="Portainer登录"></a>Portainer登录</h2><p>首次登录需要设置admin用户和密码</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230131195953986.png" alt="image-20230131195953986"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230131200129573.png" alt="image-20230131200129573"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230131201532149.png" alt="image-20230131201532149"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230131201625635.png" alt="image-20230131201625635"></p>]]></content>
    
    
    <summary type="html">Docker容器的基础学习</summary>
    
    
    
    <category term="docker" scheme="https://blog.ydg.icu/categories/docker/"/>
    
    
    <category term="docker-learn" scheme="https://blog.ydg.icu/tags/docker-learn/"/>
    
  </entry>
  
  <entry>
    <title>Git工具常用命令</title>
    <link href="https://blog.ydg.icu/2023/01/15/Git%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://blog.ydg.icu/2023/01/15/Git%E5%B7%A5%E5%85%B7%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2023-01-14T16:00:00.000Z</published>
    <updated>2023-01-15T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>Git命令相关学习</p></div><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>点击<a href="https://git-scm.com/">这里</a>进入Git官网,进行下安装Git</p><h1 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h1><p><font color="red">注意</font>：Linux命令可以通用到Git命令里,最好先去学一点Linux基础知识的相关命令再来学习git，效果会更好哦</p><blockquote><table><thead><tr><th align="left">命令名称</th><th align="left">作用</th><th align="center">说明</th></tr></thead><tbody><tr><td align="left">git config –global  user.name 用户名</td><td align="left">设置用户签名</td><td align="center">签名的作用是区分不同操作者的身份,用户的签名在每一个版本的提交信息中都能够看到,以此确定本次提交是谁做的。<font color="red">Git首次安装必须设置一下签名，否则无法提交代码。</font></td></tr><tr><td align="left">git config –global user.email 邮箱</td><td align="left">设置用户邮箱</td><td align="center">这里的用户邮箱和上面的用户签名可以随便写，最好是真实的用户名和邮箱，方便以后提交代码时，可以定位到是谁提交的。</td></tr><tr><td align="left">git init</td><td align="left">初始化本地仓库</td><td align="center">在想要的文件夹内初始化本地仓库，使用鼠标右键打开Git bush命令，输入该git init命令即可创建一个空的本地仓库。</td></tr><tr><td align="left">git status</td><td align="left">查看本地库状态</td><td align="center">可以查看仓库的当前的状态，有无修改过的痕迹，根据仓库的状态会在运行窗口呈现出不同的状态</td></tr><tr><td align="left">git add 文件名</td><td align="left">添加到暂存区</td><td align="center">将本地的文件等内容，添加到暂存区的命令</td></tr><tr><td align="left">git commit -m “日志信息” 文件名</td><td align="left">提交到本地库</td><td align="center">将暂存区的文件提交到本地库</td></tr><tr><td align="left">git refolg</td><td align="left">查看历史记录</td><td align="center">查看历史提交版本信息</td></tr><tr><td align="left">git reset –hard 版本号</td><td align="left">版本穿梭</td><td align="center">跳转到指定的版本，每一个历史版本都有一个版本号</td></tr></tbody></table></blockquote><h2 id="分支的操作"><a href="#分支的操作" class="headerlink" title="分支的操作"></a>分支的操作</h2><table><thead><tr><th align="left">命令名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">git branch 分支名</td><td align="left">创建分支</td></tr><tr><td align="left">git branch -v</td><td align="left">查看分支</td></tr><tr><td align="left">git checkout 分支名</td><td align="left">切换分支</td></tr><tr><td align="left">git merge 分支名</td><td align="left">把指定的分支合并到当前的分支上</td></tr></tbody></table><h1 id="Github的Git命令"><a href="#Github的Git命令" class="headerlink" title="Github的Git命令"></a>Github的Git命令</h1><p>点击<a href="https://github.com/">这里</a>进入Github官网</p><h2 id="远程仓库操作"><a href="#远程仓库操作" class="headerlink" title="远程仓库操作"></a>远程仓库操作</h2><table><thead><tr><th align="left">命令名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">git remove -v</td><td align="left">查看所有远程仓库的别名</td></tr><tr><td align="left">git remove add 别名 远程仓库地址</td><td align="left">起别名</td></tr><tr><td align="left">git push 别名 分支</td><td align="left">推送本地分支上的内容到远程仓库</td></tr><tr><td align="left">git clone 远程地址</td><td align="left">将远程仓库的内容克隆到本地</td></tr><tr><td align="left">git pull 远程库地址别名 远程分支</td><td align="left">将远程仓库对于分支最新内容拉下来后与当前的本地分支直接合并</td></tr></tbody></table><h2 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h2><p>需要创建一个公钥</p><p>命令为：ssh -keygen -t rsa -C “填自己的邮箱地址”，输入了该命令，接着连续敲三次回车键即可生成公钥。公钥在.ssh文件里，最后在Github上创建SSH Keys，把公钥的代码填进去保存即可。</p>]]></content>
    
    
    <summary type="html">Git的基础命令学习</summary>
    
    
    
    <category term="git" scheme="https://blog.ydg.icu/categories/git/"/>
    
    
    <category term="git" scheme="https://blog.ydg.icu/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习</title>
    <link href="https://blog.ydg.icu/2023/01/07/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/"/>
    <id>https://blog.ydg.icu/2023/01/07/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-01-06T16:00:00.000Z</published>
    <updated>2023-01-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>Linux相关学习</p><p>基于win10&#x2F;win11电脑的Linux的相关学习</p><p>Linux操作系统有很多个发行版本，本文章主要是基于CentOS发行版的Linux操作系统来进行Linux的学习外加上Ubuntu发行版的Linux操作系统进行辅助学习。目前CentOS发行版在国内是比较流行的，Ubuntu发行版在国外比较流行。</p><p>本文的学习基于<a href="https://www.bilibili.com/video/BV1n84y1i7td?p=1&vd_source=73d15d6a3c5824665c87aa3c4b34c7c2">黑马程序员Linux快速入门到精通</a>，文章内容只记录了基础的Linux知识笔记(前四章)，并没有记录实战(第五章)的Linux学习笔记，目前该课程未更新完，只更新到了第五章</p></div><div class="note green icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>Linux操作系统的安装</p></div><h1 id="VMware软件安装"><a href="#VMware软件安装" class="headerlink" title="VMware软件安装"></a>VMware软件安装</h1><p>说明：VMware是一个收费软件,它有一个试用的版本(1个月),若在正式使用时,请购买正版哦。下面提供有官网下载的和百度网盘(提供了激活密钥，目前还是可以使用的）下载。</p><p>注意：仅供学习用，不可商用哦！！！</p><div class="tabs" id="vmware"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="vmware-1">官网下载地址</button><button type="button" class="tab " data-href="vmware-2">百度下载地址</button><button type="button" class="tab " data-href="vmware-3">注意事项</button></ul><div class="tab-contents"><div class="tab-item-content active" id="vmware-1"><p>点击<a href="https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html">这里</a>进入VMware官网下载</p><details class="folding-tag" green><summary> 点击查看图片 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108145803851.png" alt="image-20230108145803851"></p>              </div>            </details></div><div class="tab-item-content" id="vmware-2"><p>按照里面有说明文档和激活密钥进行操作就行了，win7，win10和win11都有！！！</p><p>链接：<a href="https://pan.baidu.com/s/1JInJ2LLD-zHCkGrL1xqgiA">https://pan.baidu.com/s/1JInJ2LLD-zHCkGrL1xqgiA</a><br>提取码：0814</p></div><div class="tab-item-content" id="vmware-3"><p>下载和傻瓜式安装完成后要检查电脑是否存在有虚拟网卡VMware1和VMware8，有就证明安装成功且在电脑上配置成功。下面有两种方式查看电脑是否有虚拟网卡。推荐使用方式二更加方便快捷哦。</p><div class="tip success"><p>方式一</p></div><p>以win11为例,打开设置,选择网络和Internet,找到相关设置里的更多网络适配器选项,点击打开就行了,在里面可以查看是否有虚拟网卡。其他win版本可能会跟win11有一些差别，都是大同小异。</p><details class="folding-tag" green><summary> 点击查看图片 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108151522520.png" alt="image-20230108151522520"></p>              </div>            </details><div class="tip success"><p>方式二</p></div><p>如果上面的方式一没有找到所在的位置，可以使用命令行的方式更加方便快捷，具体操作为：同时按住电脑的win+r键在左下角会打开一个运行小窗口，在里面输入代码ncpa.cpl,最后按回车确定就会弹出方式一的页面了，推荐使用该方法，不管是在window哪个操作系统版本都适用（win7，win10，win11）。</p><details class="folding-tag" green><summary> 点击查看图片 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108152053706.png" alt="image-20230108152053706"></p>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="CentOS的下载安装"><a href="#CentOS的下载安装" class="headerlink" title="CentOS的下载安装"></a>CentOS的下载安装</h1><p>为了方便找到该文件，最好下载完成放在自己指定的位置，后面还要使用它。</p><div class="tabs" id="centos"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="centos-1">官网下载</button><button type="button" class="tab " data-href="centos-2">百度网盘下载</button></ul><div class="tab-contents"><div class="tab-item-content active" id="centos-1"><p>点击<a href="https://vault.centos.org/7.6.1810/isos/x86_64/">这里</a>去CentOS官网下载哦</p><details class="folding-tag" green><summary> 点击查看图片 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108160556300.png" alt="image-20230108160556300"></p>              </div>            </details></div><div class="tab-item-content" id="centos-2"><p>链接：<a href="https://pan.baidu.com/s/1hmtNoDOeIxruehDeyI1Sdg">https://pan.baidu.com/s/1hmtNoDOeIxruehDeyI1Sdg</a><br>提取码：0814</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="Linux的部署"><a href="#Linux的部署" class="headerlink" title="Linux的部署"></a>Linux的部署</h1><p>打开软件VMware软件，点击创建新的虚拟机安装下面图片就行操作哦！！！</p><details class="folding-tag" blue><summary> 点击查看图片操作 </summary>              <div class='content'>              <div class="gallery">  <div class="fj-gallery page_img_lazyload  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108161628463.png","alt":"image-20230108161628463"},{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108162341154.png","alt":"image-20230108162341154"},{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108162536849.png","alt":"image-20230108162536849"},{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108162728593.png","alt":"image-20230108162728593"},{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108162917593.png","alt":"image-20230108162917593"},{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108163506808.png","alt":"image-20230108163506808"},{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108164239536.png","alt":"image-20230108164239536"},{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108164555177.png","alt":"image-20230108164555177"},{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108164740120.png","alt":"image-20230108164740120"}]</span>  </div><button class="gallery-load-more" style="opacity:0">  <span>加载更多</span>  <i class="anzhiyufont anzhiyu-icon-arrow-down"></i>  </button></div>              </div>            </details><h1 id="Final-Shell软件安装"><a href="#Final-Shell软件安装" class="headerlink" title="Final Shell软件安装"></a>Final Shell软件安装</h1><p>下载这个Final Shell目的是进行远程连接Linux，首先要去官网下载第三方软件Final Shell，才能进行远程连接，原理是用到SSH获取IP地址进行远程连接哦！！！</p><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>下载第三方软件Final Shell</p></div><div class="tabs" id="final-shell"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="final-shell-1">说明</button><button type="button" class="tab " data-href="final-shell-2">Final Shell的下载</button></ul><div class="tab-contents"><div class="tab-item-content active" id="final-shell-1"><p>使用第三方软件FinalShell来远程连接到Linux操作系统，并且可以通过Final Shell来操作Linux系统。</p><p>解释一下为什么不用VMware软件来操作Linux系统，原因如下</p><p>1.当我们对内容的复制和粘贴时，跨越VMware并不方便</p><p>2.当我们要文件上传和下载时，也是一样的不方便</p><p>3.还有一些其他的操作也是一样。</p></div><div class="tab-item-content" id="final-shell-2"><p>点击<a href="http://www.hostbuf.com/t/988.html">这里</a>进入Final Shell官网下载哦！！！下载傻瓜式安装就好了，注意安装这个软件时，在中途要按照一个依赖Winpcap(同样时傻瓜式按照，默认就好)，点击确定就行了，它会自己帮你按照好，这样就完成啦！！！按照好后会自动打开Final Shell官网和Final Shell软件哦！！!</p><details class="folding-tag" blue><summary> 点击查看官网图片 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108171104762.png" alt="image-20230108171104762"></p>              </div>            </details><details class="folding-tag" blue><summary> 点击查看FinalShell软件 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108171937894.png" alt="image-20230108171937894"></p>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>连接Linux系统</p></div><p>用到两个第三方软件（VMware和Final Shell）</p><div class="tabs" id="ssh连接"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="ssh连接-1">VMware软件</button><button type="button" class="tab " data-href="ssh连接-2">FinalShell</button></ul><div class="tab-contents"><div class="tab-item-content active" id="ssh连接-1"><p>打开VMware软件，记得要把Linux系统进行开机哦，在Linux系统的主界面里鼠标点击右键，选择Open Terminal，就是打开Linux系统的终端，输入命令ifconfig，回车就可以获取到IP地址啦！！！</p><details class="folding-tag" blue><summary> 点击查看图片 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108173127368.png" alt="image-20230108173127368"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108173325824.png" alt="image-20230108173325824"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108173531157.png" alt="image-20230108173531157"></p>              </div>            </details></div><div class="tab-item-content" id="ssh连接-2"><p>打开Final Shell软件，建立SSH连接，用到刚刚获取的IP地址。看图操作！</p><details class="folding-tag" blue><summary> 点击查看图片 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108185549911.png" alt="image-20230108185549911"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108185814512.png" alt="image-20230108185814512"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108190007443.png" alt="image-20230108190007443"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108190309650.png" alt="image-20230108190309650"></p>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="配置WSL-Ubuntu-环境"><a href="#配置WSL-Ubuntu-环境" class="headerlink" title="配置WSL(Ubuntu)环境"></a>配置WSL(Ubuntu)环境</h1><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>常见问题</p></div><p>提出问题：我们前面都已经完完整整的部署好了CentOS的Linux环境，为什么还要使用WSL来配置另一个Ubuntu的Linux环境呢？</p><p>回答问题：因为使用WSL来配置部署Linux系统是以十分轻量化的，它操作起来十分简单，轻量，好用，省内存，还很方便，不需要下载什么第三方软件，win10和win11都自带了WSL哦，直接去开启就可以了，并且WSL还深受广大开发人员的喜爱，所以WSL是值得我们学习的。但我们主要还是先要学会传统的方式，再一步步过渡到使用WSL方式来减轻不必要的工作量，总的来说，相比使用传统的方式获取Linux系统，十分繁琐，要安装完整的虚拟机，比如要下载VMware软件来配置一个Linux环境。</p><p>OK，废话不多说，现在我们开始操作。</p><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>开启电脑的WSL</p></div><div class="tabs" id="wsl"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="wsl-1">方式一</button><button type="button" class="tab " data-href="wsl-2">方式二</button></ul><div class="tab-contents"><div class="tab-item-content active" id="wsl-1"><p>在电脑设置里面，点击应用，找到可选功能点击，在可选功能里找到更多Windows功能点击，弹出一个小窗口，在里面找到“适用于Linux的Windows子系统”和“虚拟机平台”，把它们两个勾选，最后点击确定，它要重启才行，重启一下就行啦！</p><details class="folding-tag" green><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108193240027.png" alt="image-20230108193240027"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108193811986.png" alt="image-20230108193811986"></p>              </div>            </details></div><div class="tab-item-content" id="wsl-2"><p>这个方式通用win10和win11，按住键盘win+r键输入命令control,点击确定进入控制面板，</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108194543119.png" alt="image-20230108194543119"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108194716115.png" alt="image-20230108194716115"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108194837473.png" alt="image-20230108194837473"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108195001178.png" alt="image-20230108195001178"></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>获取安装Ubuntu</p></div><p>打开电脑自带的微软商城Microsoft Store，在里面搜索Ubuntu软件进行获取安装，安装好了直接点击打开即可，根据提示输入相关的信息完成部署。</p><details class="folding-tag" blue><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108200557195.png" alt="image-20230108200557195"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108201947452.png" alt="image-20230108201947452"></p>              </div>            </details><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>Windows终端窗口的使用</p></div><p>由于Ubuntu自带的运行窗口不太好用，建议使用win11自带的Windows终端窗口来代替Ubuntu自己的运行窗口，在任务栏里找到Windows图标右键它就能找到了，非常的简单，若是win10系统的话，则需要自己在去刚刚的微软商城Microsoft Store那里搜索Windows Terminal软件进行下载哦，由于上面演示了这么下载Ubuntu，这里就不演示这个了，这个下载跟Ubuntu一样，傻瓜式下载安装即可。然后打开刚刚提到的Windows终端窗口，进入设置界面，把默认配置文件改为Ubuntu，最后重启一下Windows终端窗口即可。</p><details class="folding-tag" blue><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108203614014.png" alt="image-20230108203614014"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108204133849.png" alt="image-20230108204133849"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108204308064.png" alt="image-20230108204308064"></p>              </div>            </details><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>虚拟机快照</p></div><p>可以理解为存档，备份或者是版本1.0&#x2F;2.0等等(我是这么理解的)，回到指定的某一个状态哦，不过这个是十分耗内存的哦。我们为什么要学习这个快照呢，因为由于我们可能会在操作Linux系统时会不小心误删了什么重要的文件之类的等等，我们就可以利用这个快照回到还没删除这个重要文件的版本。</p><p>注意：这个快照是需要自己手动保存某个时间点进行快照存档的哦(最好是在Linux系统环境关机的情况下进行快照，这样效率会高一点哦)，不然会没有存档，也就回不去了，就要重装Linux系统了，这样会很麻烦。</p><p>那我们该如何进行快照呢？下面就是具体的操作，在CentOS软件里操作(这个软件不能关掉的，让它在后台最小化运行就行了)</p><details class="folding-tag" blue><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108210001644.png" alt="image-20230108210001644"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108210211487.png" alt="image-20230108210211487"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230108211022604.png" alt="image-20230108211022604"></p>              </div>            </details><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p>阶段总结</p></div><p>学习到这里，第一阶段的学习就结束啦，上面是我了解基本的Linux系统的相关概念，并随之安装部署了Linux操作系统环境在Windows电脑上，学习了两种方法(CentOS和Ubuntu)安装Linux操作系统环境，第一种是传统的方式来安装Linux系统，就是在电脑上安装了一款第三方软件VMware创建了一个虚拟机环境，然后再去CentOS官网里下载安装包，最后就是再VMware软件里创建新的虚拟机，在这个虚拟机环境中添加CentOS的安装包路径来配置部署好Linux系统环境，里面有一些细节的地方要注意的，然后考虑到VMware软件里面复制粘贴和对文件下载和上传等问题跨越VMware不方便，又下载了Final Shell这个第三方软件来代替VMware软件的输入命令窗口，以后就可以在Final Shell软件里写命令代码就行了，但要注意的是VMware软件不能关闭，可以最小化再后台运行，不然的话Final Shell软件将无法使用，他这个Final Shell辅组软件的原理是使用SSH远程连接Linux操作系统来执行相关的命令行代码，总之安装的步骤和软件相对较多，但能够学习到一些重要的知识和额外的一点知识，能够更进一步地了解该Linux环境，十分有用，虽然这种方式不是最优，最简，最方便的方式，但对我来说它是不可或缺的；第二种方式相对来说比较简单，它是使用win10&#x2F;win11电脑自带的WSL来安装另一个同样是Linux系统环境的Ubuntu软件，这个软件是在微软商城Microsoft Store里下载安装的,安装十分简单，傻瓜式安装，下载完成打开后可能会出现错误窗口闪退的问题，自己也找到了解决方案，锻炼自己的解决问题的能力也是很重要的，特别是解决成功一个bug或者一件事情的那种feel真的不一样，感觉特有成就感😂，这样学习才有动力嘛，才不会这么的枯燥无趣 。</p><h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>Linux目录结构说明</p></div><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>Linux没有盘符这个概念,只有一个跟目录“&#x2F;”,所有文件都在它之下。当要查找某个文件或者文件夹的路径时，是以“&#x2F;”跟目录开头的，不同于Windows系统那样有几个盘符，例如：”D:\text\text.txt”(D盘下有一个text目录，text目录里有一个text.txt文件）,若再Linux系统里，则表示为：“&#x2F;text&#x2F;text.txt”。这就是两个不同操作系统的区别。</p>              </div>            </details><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>Linux命令基础格式</p></div><details class="folding-tag" ><summary> 点击查看命令格式 </summary>              <div class='content'>              <p>Linux有一个通用的格式（不管是什么命令，用于什么用途都可以）</p><p>command [-option] [parameter]</p><ul><li><p>command：命令本身</p></li><li><p>-option：[可选，非必填] 命令的一些选项，可以通过选项控制命令的行为细节</p></li><li><p>parameter：[可选，非必填] 命令的参数，多数用于命令的指向目标等</p></li></ul><p>示例：</p><p>ls -l&#x2F;home&#x2F;test，ls是命令本身，-l是选项，&#x2F;home&#x2F;test是参数</p><p>命令意思：一列表的形式，显示&#x2F;home&#x2F;test目录的所有内容</p><p>cp -r test1 test2，cp是命令本身，-r是选项，test1和test2是参数</p><p>命令意思：复制文件夹test1成为test2</p>              </div>            </details><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>Linux基础命令学习</p></div><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><details class="folding-tag" ><summary> 点击查看ls命令 </summary>              <div class='content'>              <p>语法：ls [-a -l -h] [Linux路径]</p><p>说明：-a，-l，-h是可选选项，Linux路径是可选参数</p><p>标注：这些命令可以灵活变通运用哦！！！</p>              </div>            </details><details class="folding-tag" ><summary> 查看无参ls命令 </summary>              <div class='content'>              <p>若不使用可选的选项和参数，直接使用ls命令本身，表示以平铺的形式，列出当前工作目录(默认是用户的HOME目录,后面会通过cd来变换工作目录,工作目录不是固定的，注意Home目录不是根目录)下的内容，列出目录。</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109132233646.png" alt="image-20230109132233646"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109132848388.png" alt="image-20230109132848388"></p>              </div>            </details><details class="folding-tag" ><summary> 查看ls /根目录 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109134307304.png" alt="image-20230109134307304"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109134504230.png" alt="image-20230109134504230"></p>              </div>            </details><details class="folding-tag" ><summary> 查看带有-a，-l，-h的选项 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 说明 </summary>              <div class='content'>              <ul><li><p>-a: 表示all的意思，即列出全部文件（包含隐藏文件&#x2F;文件夹），什么是隐藏文件&#x2F;文件夹？只要是以”.”点开头的文件名就是，会自动隐藏的，所以只有通过-a命令才能将它们显示出来，而ls命令（不加任何参数）不能显示出来。</p></li><li><p>-l: 表示以列表（竖向排列）的形式来展示内容，并展示更多的信息。</p></li><li><p>-h:表示以易于阅读的形式，列出文件的大小，单位：K，M，G等等，并且-h选项必须要搭配-l一起使用。</p></li></ul><p>其中”-a“和”-l“可以组合使用，写法有很多，例如：“ls -a -l”，”ls -la“，”ls -la“等等都表示一样的作用(以列表的形式展示隐藏文件&#x2F;文件夹）。</p>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109141510870.png" alt="image-20230109141510870"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109142522018.png" alt="image-20230109142522018"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109143118093.png" alt="image-20230109143118093"></p>              </div>            </details>              </div>            </details><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><details class="folding-tag" ><summary> 说明 </summary>              <div class='content'>              <p>当Linux终端命令行打开的时候，会默认以用户的HOME目录作为当前的工作目录</p><p>我们可以通过cd（Change Directory）命令来改变当前的工作目录</p><p>语法：cd [Linux路径]</p><ul><li><p>cd命令无需选项，只有参数选择，表示要切到哪个目录下</p></li><li><p>cd命令行直接执行，若无写Linux路径该选项，默认会把工作目录改为用户的HOME目录哦！！！</p></li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109144619667.png" alt="image-20230109144619667"></p>              </div>            </details><h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>查看当前的工作目录，pwd（Print Work Directory）无参数无选项，可直接使用就行</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109145159625.png" alt="image-20230109145159625"></p>              </div>            </details><h3 id="相对路径和绝对路径"><a href="#相对路径和绝对路径" class="headerlink" title="相对路径和绝对路径"></a>相对路径和绝对路径</h3><p>毋庸置疑，绝对路径是以根目录“&#x2F;”为起点的，相对路径是以当前的目录为起点的，路径无需以“&#x2F;”开头。</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109150412937.png" alt="image-20230109150412937"></p>              </div>            </details><h3 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <ul><li><p>“.”：表示当前目录，比如：cd.&#x2F;Desktop 表示切换到当前目录下的Desktop目录内，和cd Desktop效果一致。</p></li><li><p>”..”：表示上一级目录，比如：cd.. 即可切换到上一级目录，cd..&#x2F;..切换到上二级的目录</p></li><li><p>“<del>”：表示HOME目录，比如：cd</del> 即可切换到HOME目录或cd~&#x2F;Desktop，切换到HOME目录里的Desktop目录</p></li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109173618627.png" alt="image-20230109173618627"></p>              </div>            </details><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>通过mkdir(Make Directory)命令可以创建新的目录(文件夹)</p><p>语法：mkdir [-p] Linux路径</p><ul><li><p>Linux路径：即要创建的文件夹路径，可以写绝对路径，也可以写相对路径。</p></li><li><p>-p：可选，表示自动创建不存在的父目录，适用于创建连续多层级的目录。</p></li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109175333722.png" alt="image-20230109175333722"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109191501303.png" alt="image-20230109191501303"></p>              </div>            </details><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>可以通过touch命令来创建文件</p><p>语法：touch Linux路径(相对路径和绝对路径都行)</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109191712569.png"></p>              </div>            </details><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>cat命令是用来查看文件的内容，我先手动在yuan.txt文件里加入了”hello world“,使用cat命令来查看。</p><p>语法：cat Linux路径</p><p>Linux路径里可以写相对路径，绝对路径和特殊路径都行，cat命令里有一个参数且是必须要写的。</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109193033733.png" alt="image-20230109193033733"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109194145099.png" alt="image-20230109194145099"></p>              </div>            </details><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>more命令同样是可以查看文件的内容，但和cat命令不同的是，cat是直接将全部内容显示出来的，而more比较人性化，如果内容比较多的话它可以将内容进行一页页展示出来，会分页的。</p><p>语法：more Linux路径</p><p>同cat命令一样只有一个参数且是必须的。</p><p>案例：Linux系统内置有一个文件，路径为：&#x2F;etc&#x2F;services，可以使用more命令来查看，more &#x2F;etc&#x2F;services</p><p>提醒：在查看的过程中可以通过空格来进行翻页，通过q退出查看。</p>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109195607848.png" alt="image-20230109195607848"></p>              </div>            </details><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>cp(copy)命令是可以用来复制文件&#x2F;文件夹</p><p>语法：cp [-r] 参数1 参数2</p><ul><li><p>-r：可选，用于复制文件夹使用，用于递归</p></li><li><p>参数1：必选，写Linux路径，表示复制的文件&#x2F;文件夹</p></li><li><p>参数2：必选，写Linux路径，表示要复制到的地方</p></li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109201202531.png" alt="image-20230109201202531"></p>              </div>            </details><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>mv(move)命令是移动文件&#x2F;文件夹</p><p>语法：mv 参数1 参数2</p><ul><li><p>参数1：Linux路径，表示要移动的文件&#x2F;文件夹</p></li><li><p>参数2：Linux路径，表示要移动去的地方，且可以把移动的文件&#x2F;文件夹进行改名(在同级目录下），若移动到的地方无该名字的文件&#x2F;文件夹，则会自动创建。</p></li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109204306831.png" alt="image-20230109204306831"></p>              </div>            </details><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>rm（remove）命令为删除文件&#x2F;文件夹</p><p>语法：rm [-r -f] 参数1 参数2……参数N</p><ul><li><p>-r：用于删除文件夹</p></li><li><p>-f：表示强制删除，不会有提示是否确定删除的选项（普通用户删除内容不会弹出信息，只有root管理员删除内容才会有提示信息，所以一般的用户用不到-f选项。</p></li><li><p>参数1 参数2…….参数N：表示要删除的文件&#x2F;文件夹路径，按照空格隔开，可以删除很多个，若删除的参数不存在会提示用户，但不会影响其他存在的文件&#x2F;文件夹的删除。</p></li></ul><p>如何切换为管理员用户root呢？</p><ul><li><p>可以输入su -root 命令输入登录密码（就是登录Linux系统的用户密码）</p></li><li><p>输入exit命令，退回普通用户模式。</p></li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109210415780.png" alt="image-20230109210415780"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109220624346.png" alt="image-20230109220624346"></p>              </div>            </details><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><details class="folding-tag" ><summary> 通配符* </summary>              <div class='content'>              <p>符号*表示通配符</p><p>慎用通配符*，若操作不当可能会造成极大的损失！！！</p><p>rm命令支持通配符，即匹配任何内容（包含空）</p><ul><li><p>test*，表示匹配任何以test开头的内容</p></li><li><p>*test，表示匹配任何以test结尾的内容</p></li><li><p><code>*test*</code>：表示匹配任何包含test的内容</p></li></ul>              </div>            </details><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>grep命令可以从文件中通过关键字过滤文件行。</p><p>语法：grep [-n] 关键字 文件路径</p><ul><li>-n：可选，表示结果中显示匹配的行的行号。</li><li>关键字：必选，表示过滤的关键字，若带有空格或者特殊符号，建议使用“ ”把它们包裹起来</li><li>文件路径：必选，表示过滤文件内容的文件路径，可作为内容输入窗口(可以跟后面学到的管道符”|“搭配使用)</li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109222335685.png" alt="image-20230109222335685"></p>              </div>            </details><h3 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h3><p>含义：将管道符”|“左边的命令结果作为右边命令的输入。</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109225348825.png" alt="image-20230109225348825"></p>              </div>            </details><h2 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>wc命令是统计文件行数、单词数量等</p><p>语法：wc [-c -n -l -w] 文件路径</p><ul><li>-c：可选，统计bytes数量</li><li>-m：可选，统计字符数量</li><li>-l：可选，统计行数</li><li>-w：可选，统计单词数量</li><li>文件路径：必选，被统计的文件，可作为内容输入端口(可以跟前面学到的管道符”|“搭配使用)</li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109224113383.png" alt="image-20230109224113383"></p>              </div>            </details><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>在前面学习了许多命令，其实它们的本体是一个个的二进制可执行程序。</p><p>和Windows系统中的.exe文件时同一个意思。</p><p>而which命令的作用是查看其他一系列命令的可执行程序文件存放在哪里</p><p>语法：which 想要查询的命令</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109230320300.png" alt="image-20230109230320300"></p>              </div>            </details><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>在Linux系统中，通过find命令去搜索指定的文件。</p><p>语法1：find 起始路径 -name ”被查找的文件名“。</p><ul><li>-name：按文件名字查询</li></ul><p>语法2：find 起始路径 -size +|-n[KMG]</p><ul><li>-size：按文件大小查询</li><li>+、-：表示大于和小于</li><li>KMG：表示单位大小，k小写字母表示kb，M表示MB，G表示GB。</li><li>示例①查找小于10kb的文件：find &#x2F; -size -10k；</li><li>示例②查找大于100MB的文件：find &#x2F;  -size +100M；</li><li>示例③查找大于1GB的文件：find &#x2F; -size +1G</li></ul><p>为了能够有更好的展示效果，切换到root管理员权限（上面已经学习到了如何切换root权限，su - root命令）进行搜索更加清晰明了。</p>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片查找 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109231456313.png" alt="image-20230109231456313"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109231652568.png" alt="image-20230109231652568"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109233007460.png" alt="image-20230109233007460"></p>              </div>            </details><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>echo命令作用是在命令行内输入指定的内容（若输入的内容有空格等特殊字符最好使用双引号“ ”把它们括起来）。</p><p>echo命令可以结合反引号(&#96;)来使用。具体看图片操作。</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109233545776.png" alt="image-20230109233545776"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109234019709.png" alt="image-20230109234019709"></p>              </div>            </details><h3 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h3><p>重定向符：&gt;和&gt;&gt;。</p><ul><li><p><code>&gt;</code>：将左侧的命令结果覆盖写入到右侧指定的文件中去。</p></li><li><p><code>&gt;&gt;</code>：将左侧命令的结果，追加写入到指定的文件中去。</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230109235340238.png" alt="image-20230109235340238"></p>              </div>            </details></li></ul><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>tail命令可以查看文章尾部的内容，跟踪文章的最新更改</p><p>语法：tail [-f -num] Linux路径</p><ul><li>Linux路径：表式被跟踪的文件路径</li><li>-f：表示持续跟踪</li><li>-num：表示查看尾部多少行，不填默认10行</li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110000717776.png" alt="image-20230110000717776"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110001748382.png" alt="image-20230110001748382"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110001952632.png" alt="image-20230110001952632"></p>              </div>            </details><h2 id="vi-vim命令"><a href="#vi-vim命令" class="headerlink" title="vi&#x2F;vim命令"></a>vi&#x2F;vim命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>vi&#x2F;vim命令是用来编辑文件的。</p><p>语法：vi&#x2F;vim 文件路径</p><ul><li>vim：兼容全部vi功能，一般都是使用vim命令。</li><li>如果文件路径不存在，那么vim命令会用于编辑新的文件</li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110122308860.png" alt="image-20230110122308860"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110125541698.png" alt="image-20230110125541698"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110125656460.png" alt="image-20230110125656460"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110125835365.png" alt="image-20230110125835365"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110125937126.png" alt="image-20230110125937126"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110123915316.png" alt="image-20230110123915316"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110124204540.png" alt="image-20230110124204540"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110124443401.png" alt="image-20230110124443401"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110124907140.png" alt="image-20230110124907140"></p>              </div>            </details><h2 id="su和exit命令"><a href="#su和exit命令" class="headerlink" title="su和exit命令"></a>su和exit命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>su（Switch User）命令用于账户切换的系统命令，</p><p>语法 su [-] [用户名]</p><ul><li>-：可选，表示在切换用户后加载环境变量，建立带上</li><li>用户名：可选，表示要切换的用户，默认是root管理员用户</li><li>切换用户后，可以通过exit命令退回上一个用户，也可以使用Ctrl+d来退回。</li><li>普通用户：无需密码直接切换，root转普通用户。root管理员用户权限最大。</li><li>root用户：需要密码才能切换到，普通用户转root。</li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110132827157.png" alt="image-20230110132827157"></p>              </div>            </details><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>当我们得知root管理员用户的登录密码时，可以通过su命令来登录root用户来获取最大的权限管理。但不建立长期使用root用户，避免带来系统损坏，可以使用sudo命令来为普通用户来授权，临时使用root管理员用户身份执行。</p><p>语法：sudo 其他命令</p><ul><li>在其他命令之前带上sudo命令即为这一条命令赋予临时的管理员用户root，进行用户授权登录</li><li>但是不是所有的用户都可以使用sudo命令来临时获取root权限，需要为普通用户配置sudo认证才行</li></ul><p>如何为普通用户配置sudo认证呢？</p><ul><li>先要用su命令登录到root用户，再使用命令visudo，它会自动打开vi编辑器（路径为：&#x2F;etc&#x2F;sudoers）</li><li>然后在文件最后添加代码：<code>user ALL=(ALL)  NOPASSWD：ALL</code>，其中user是你想要配置sudo认证的用户名，NOPASSWD：ALL意思是不用使用密码进行操作</li><li>最后通过wq命令保存（上面vi&#x2F;vim命令里有学）</li><li>切换回普通用户user，命令前加上sudo命令均与root运行</li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110143005321.png" alt="image-20230110143005321"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110143249712.png" alt="image-20230110143249712"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110143708538.png" alt="image-20230110143708538"></p>              </div>            </details><h2 id="用户和用户组命令"><a href="#用户和用户组命令" class="headerlink" title="用户和用户组命令"></a>用户和用户组命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>用户组管理（需在root用户权限下执行命令）</p><ul><li><p>创建用户组</p><ul><li>groupadd 用户组名</li></ul></li><li><p>删除用户组</p><ul><li>groupdel 用户组名</li></ul></li><li><p>创建用户</p><ul><li>useradd [-g -d] 用户名<ul><li>-g：可选，指定用户的组，不指定会创建同名组并自动加入，若同名的组已经存在，则必选使用选项-g</li><li>-d：可选，指定用户的HOME路径，不指定则，HOME目录默认在：&#x2F;home&#x2F;用户名</li></ul></li></ul></li><li><p>删除用户</p><ul><li>userdel [-r] 用户名<ul><li>-r：可选，删除用户的HOME目录，不加-r，在删除用户时，HOME将被保存</li></ul></li></ul></li><li><p>查看用户所属的组</p><ul><li>id [用户名]<ul><li>用户名：可选，填写要查看的用户名，若不填，则查看自身</li></ul></li></ul></li><li><p>修改用户所属的组</p><ul><li>usermod -aG 用户组 用户名，将指定用户加入指定用户组</li></ul></li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110155115215.png" alt="image-20230110155115215"></p>              </div>            </details><h3 id="getent命令"><a href="#getent命令" class="headerlink" title="getent命令"></a>getent命令</h3><p>语法:getent passwd&#x2F;group</p><ul><li>passed:查看有哪些用户信息,展示的内容为:用户名:密码(X):用户ID:组ID:描述信息(无用):HOME目录:执行终端(默认bash)</li><li>group:   查看有哪些组,且展示相关信息为:    组名称:组认证(显示为x):组ID</li></ul><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110155447122.png" alt="image-20230110155447122"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110155854479.png" alt="image-20230110155854479"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110155955940.png" alt="image-20230110155955940"></p>              </div>            </details><h2 id="查看权限控制信息"><a href="#查看权限控制信息" class="headerlink" title="查看权限控制信息"></a>查看权限控制信息</h2><details class="folding-tag" ><summary> 认知权限信息 </summary>              <div class='content'>              <p>通过ls-l可以以列表的形式查看内容，并显示权限细节</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110161646799.png" alt="image-20230110161646799"></p><ul><li>序号1：表示文件&#x2F;文件夹的的权限控制信息</li><li>序号2：表示文件&#x2F;文件夹所属用户</li><li>序号3：表示文件&#x2F;文件夹所属用户组</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110162056631.png" alt="image-20230110162056631"></p><p>举例：drwxr-xr-x，表示：（其中rwx意思分别为可读，可写，可执行，小横杠-表示无该权限）</p><ul><li>这是一个文件夹首字母为d，后面每三个字母字符为一组权限</li><li>紧接着的rwx是所属用户权限，可读可写可执行</li><li>再后r-x是所属用户组的权限，有可读，可执行权限，无可写权限</li><li>最后三个r-x是其他用户权限，有可读，可执行权限，无可写权限</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110162620011.png" alt="image-20230110162620011"></p>              </div>            </details><h2 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>chmod命令用来修改文件&#x2F;文件夹的权限信息的</p><p>注意：只有文件&#x2F;文件夹的用户或者root用户才可以修改</p><p>语法：chmod [-r] 权限 文件&#x2F;文件夹</p><ul><li>-r：操作文件夹时必选，对文件夹的全部内容应用同样的权限修改操作</li><li>权限：里面填写”u&#x3D;写要修改的权限（rwx）,g&#x3D;权限（rwl），o&#x3D;权限（rwl)”<ul><li>u：用户本身</li><li>g：用户所属用户组</li><li>o：其他用户</li></ul></li><li>文件&#x2F;文件夹：填写要修改的文件&#x2F;文件夹的权限</li></ul><p>示例：</p><p>chmod u&#x3D;rwx,g&#x3D;rx,o&#x3D;x hello.txt，意思是将hello.txt文件权限修改为用户自己（u）的权限rwx，该用户组（g）使用该文件的权限为rx，其他用户使用该文件的权限为x</p>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110171244327.png" alt="image-20230110171244327"></p>              </div>            </details><h3 id="权限的数字序号"><a href="#权限的数字序号" class="headerlink" title="权限的数字序号"></a>权限的数字序号</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>权限用3位数字来代表，第一位数字表示用户权限，第二位表示用户权限组，第三位表示其他用户权限</p><p>数字代表的功能如下（r&#x3D;4，w&#x3D;2，x&#x3D;1），可以通过这个推出来其他的权限</p><ul><li>0：无任何权限，即—</li><li>1：仅有x权限，即–x</li><li>2：仅有w权限，即-w-</li><li>3：有w和x权限，即-wx</li><li>4：仅有r权限，即r–</li><li>5：有r和x权限，即r-x</li><li>6：有r和w权限，即rw-</li><li>7：有全部权限，即rwx</li></ul><p>示例：chmod 751表示chmod rwx</p>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110175242428.png" alt="image-20230110175242428"></p>              </div>            </details><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>chown命令可以修改文件&#x2F;文件夹的所属用户和用户组</p><p>普通用户无法修改所属为其他用户或组，所以此命令只适用于root用户执行</p><p>语法：chown [-R] [用户] [:] [用户组] 文件和文件夹</p><ul><li>-R：同chmod，对文件夹内全部内容应用相同规则</li><li>用户：修改所属用户</li><li>用户组：修改所属用户组</li><li>“:”：用于分隔用户和用户组，若只修改用户组，”:“左边的用户可以省略不写，只写右边的用户组就行</li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110191453826.png" alt="image-20230110191453826"></p>              </div>            </details><h1 id="Linux实用操作"><a href="#Linux实用操作" class="headerlink" title="Linux实用操作"></a>Linux实用操作</h1><h2 id="各类快捷键小技巧"><a href="#各类快捷键小技巧" class="headerlink" title="各类快捷键小技巧"></a>各类快捷键小技巧</h2><h3 id="ctrl-c"><a href="#ctrl-c" class="headerlink" title="ctrl+c"></a>ctrl+c</h3><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p>作用：ctrl+c强制停止，使用了这个快捷键会在终端里显示^c这个符号</p><p>场景：Linux的某些程序的运行，如果想要强制停止它们，就可以使用，如：tail命令；又或者命令输入错误等情况，使用快捷键，退出当前的输入，重新输入。</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110192513623.png" alt="image-20230110192513623"></p>              </div>            </details><h3 id="ctrl-d"><a href="#ctrl-d" class="headerlink" title="ctrl+d"></a>ctrl+d</h3><details class="folding-tag" ><summary> 点击查看 </summary>              <div class='content'>              <p>ctrl+d退出或登出，或者退出某些特定程序的专属页面，但它不能用于退出vi&#x2F;vim命令的编辑。</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110192920182.png" alt="image-20230110192920182"></p>              </div>            </details><h3 id="历史搜索"><a href="#历史搜索" class="headerlink" title="历史搜索"></a>历史搜索</h3><ul><li><p><strong>history</strong></p><p>history命令，查看历史输入过的命令</p></li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110205232230.png" alt="image-20230110205232230"></p><ul><li>！<br>  ！命令前缀，自动执行上一次匹配前缀的命令</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110205659060.png" alt="image-20230110205659060"></p><ul><li>ctrl+r<ul><li>ctrl+r输入内容匹配历史命令</li><li>如果搜到的内容是你所需要的直接按回车键执行</li><li>如果搜到的内容不全是你需要的，可以按键盘左右键，可以得到这个命令且可以进行修改，再执行</li></ul></li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110210501427.png" alt="image-20230110210501427"></p><h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><ul><li>ctrl+a，跳到命令开头</li><li>ctrl+e，跳到命令结尾</li><li>ctrl+键盘左键，向左跳一个单词</li><li>ctrl+键盘右键，向右跳一个单词</li></ul><h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><ul><li>ctrl+l，可以清除终端内容</li><li>clear命令，可以清除终端内容</li></ul><h2 id="安装程序命令"><a href="#安装程序命令" class="headerlink" title="安装程序命令"></a>安装程序命令</h2><p>列举出了CentOS和Ubuntu两个Linux系统环境的安装命令</p><div class="tabs" id="安装命令"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="安装命令-1">yum</button><button type="button" class="tab " data-href="安装命令-2">apt</button></ul><div class="tab-contents"><div class="tab-item-content active" id="安装命令-1"><p>yum是CentOS的安装程序命令</p><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>yum：RPM包软件管理器，用于自动化按照配置Linux软件，并可以自动解决依赖问题</p><p>语法：yum [-y] [install | remove | search] 软件名称</p><ul><li>-y：自动确认，无需手动确定按照或者卸载过程</li><li>install：按照</li><li>remove：卸载</li><li>search：搜索</li></ul><p>权限：yum命令需要管理员root权限哦，使用su命令切换到root，或使用临时root权限，命令为sudo，执行这些命令都需要联网才行</p><p>例子：使用yum命令安装wget程序，看图操作</p>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110212910901.png" alt="image-20230110212910901"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110213114768.png" alt="image-20230110213114768"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110213515465.png" alt="image-20230110213515465"></p>              </div>            </details></div><div class="tab-item-content" id="安装命令-2"><p>apt是Ubuntu的安装程序命令</p><p> 同CentOS的安装程序yum命令一样的语法，就是换了个命令，其他的都不变</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110215146362.png" alt="image-20230110215146362"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110215505735.png" alt="image-20230110215505735"></p>              </div>            </details></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>Linux系统很多软件（内置或者第三方）均支持systemctl命令控制：启动、停止、开机自启，能被systemctl管理的软件，一般称之为服务</p><p>语法：systemctl start | stop | status | enable | disable 服务器</p><ul><li>start：启动</li><li>stop：关闭</li><li>status：查看状态</li><li>enable：开启开机自启</li><li>disable：关闭开机自启</li></ul><p>系统内置的服务比较多，例如：</p><ul><li>NetWorkManager，主网络服务</li><li>network，副网络服务</li><li>firewalld，防火墙服务</li><li>sshd，ssh服务（Final Shell远程登录Linux就是使用的这个服务</li></ul><p>除了内置的服务外，部分第三方软件安装也可以以systemctl进行控制</p><ul><li><p>yum install -y ntp ，安装ntp软件（时间同步的软件）</p><p>可以通过ntp服务名，配合systemctl进行控制</p></li><li><p>yum install -y httpd，安装httpd服务软件</p><p>可以通过httpd服务名，配合systemctl进行控制</p></li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230110222001133.png" alt="image-20230110222001133"></p>              </div>            </details><h3 id="软连接ln命令"><a href="#软连接ln命令" class="headerlink" title="软连接ln命令"></a>软连接ln命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>在Linux系统中创建软连接,可以将文件&#x2F;文件夹链接到其他位置,类似widows系统中的快捷方式</p><p>语法：ln -s 参数1 参数2</p><ul><li>-s：创建软连接</li><li>参数1：被链接的文件&#x2F;文件夹</li><li>参数2：要链接去的目的地</li><li>最好使用绝对路径</li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111123656535.png" alt="image-20230111123656535"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111131838652.png" alt="image-20230111131838652"></p>              </div>            </details><h2 id="日期和时区"><a href="#日期和时区" class="headerlink" title="日期和时区"></a>日期和时区</h2><h3 id="date命令"><a href="#date命令" class="headerlink" title="date命令"></a>date命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>通过date命令可以在命令行中查看系统的时间</p><p>语法：date [-d] [+格式化字符串]</p><ul><li>-d：按照给定的字符串显示信息，一般用于日期计算，且-d还可以和格式化字符串一起使用哦<ul><li>year年</li><li>mouth月</li><li>day日</li><li>hour时间</li><li>Minute分钟</li><li>second秒</li><li>例子：date -d “+1 day” +%Y%m%d ，含义是显示后一天的日期，以此类推</li></ul></li><li>格式化字符串：通过给定的字符串标记，来控制显示的日期格式<ul><li>%Y：年</li><li>%y：年份的后两位数字（00-99）</li><li>%M：月份（01-12）</li><li>%d：日（01-31）</li><li>%H：小时（00-23）</li><li>%M：分钟（00-59）</li><li>%S：秒（00-60）</li><li>%s：自1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111135014701.png" alt="image-20230111135014701"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111135815866.png" alt="image-20230111135815866"></p>              </div>            </details><h3 id="ntp程序"><a href="#ntp程序" class="headerlink" title="ntp程序"></a>ntp程序</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>可以通过ntp程序来自动校准系统时间</p><p>直接使用学过的yum&#x2F;apt（CentOS和Ubuntu）命令安装就行，例：CentOS系统下为：yum -y install ntp，</p><p>设置开机自启：使用学过的命令systemctl，systemctl start ntpd和systemctl enable ntpd，当ntpd启动后会定期帮助我们联网校准标准系统的时间，也可以手动校准（需要root权限），使用命令：ntpdate -u ntp.aliyun.com，该命令的含义是通过阿里云提供的服务网址配合ntpdate（安装ntp后会附带这个命令）命令自动校准。</p>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111141314312.png" alt="image-20230111141314312"></p>              </div>            </details><h2 id="IP地址和主机名"><a href="#IP地址和主机名" class="headerlink" title="IP地址和主机名"></a>IP地址和主机名</h2><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>每一台联网的电脑都会有一个IP地址，用来和其他计算机就行通信</p><p>IP地址有V4和V6两个版本，其中V4是常用，V6很少用到</p><p>IPV4版本的地址格式是：a.b.c.d，其中abcd表示是数字0-255的数字，如：192.168.88.101,这是一个标准的ip地址</p><p>上面学习到了使用SSH远程连接Linux系统时要用到Linux系统的ip地址，使用ifconfig命令来查看Linux系统的ip地址（ip地址会变的），如果无法使用ifconfig命令可以通过yum命令下载安装net-tools程序解决，命令为yum -y install net-tools。</p><p>特殊的ip地址</p><ul><li>127.0.0.1：该ip地址是本机的意思</li><li>0.0.0.0：可以用来指代本机，可以在端口绑定中用来确定绑定关系，在一些ip地址限制中，表示所有ip地址的意思，如放行规则设置为0.0.0.0，表示允许任意ip访问</li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111142529345.png" alt="image-20230111142529345"></p>              </div>            </details><h3 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>没一台电脑除了对外联络地址（ip地址外），还可以有一个名字，称为主机名</p><p>无论是Windows&#x2F;Linux系统，都可以给系统设置主机名</p><p>使用hostname命令查看主机名</p><p>使用hostnamectl set-hostname 主机名，此命令可以修改主机名，修改时要使用root权限</p><p>查看已修改的主机名，需要重启&#x2F;重新登录Final Shell才可以看到</p>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111144318644.png" alt="image-20230111144318644"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111144535440.png" alt="image-20230111144535440"></p>              </div>            </details><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>由于IP地址（一串数字）实在是难以记忆，就出现了域名解析这个概念，例如打开百度网址（百度IP为<code>14.215.177.39</code>），没有人会通过ip地址来访问吧，都是通过百度的域名<code>www.baidu.com</code>来访问百度网址，这个网址就是域名，域名解析的原理是通过域名来映射ip地址进行访问。我们可以试试直接使用百度的IP地址去访问百度也是可以的，直接在网址上输入百度ip搜索即可。</p><p>示例：访问<code>www.baidu.com</code>的流程是怎么样的？</p><p>电脑会现在本机里查看是否有记录该网址，Windows系统则查看”C:\Windows\System32\drivers\etc\hosts”这个文件，Linux系统查看”&#x2F;etc&#x2F;hosts”，若查看没有，则会联网去公开的DNS服务器（如114.114.114.114，8.8.8.8等）访问，DNS服务器的原理是可以通过域名来解析到对应的ip地址，最后在进行访问，所以我们就只需要记住百度的域名（比记百度的ip地址简单）就行了，若都没有查找到（就是在DNS服务器里并没有记录到该域名，或者说压根就没有该域名网址）则查找网址失败404状态码。</p><ul><li>C:\Windows\System32\drivers\etc\hosts：这个文件是可以自行修改的，配置自己需要的IP地址和域名解析即可，Linux系统里的这个文件也是一样，例如，配置Linux系统远程连接的使用到的SSH的IP地址，我们可以把这个IP地址的域名解析为自己Linux系统的主机名（我的Linux系统的主机名是centos，IP是192.168.132.134），即把”192.168.132.134 centos”这段代码加入hosts文件最后一行保存即可，记得要使用管理员的方式进行配置，不然不行（原因是没有权限）。</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111145612324.png" alt="image-20230111145612324"></p>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p>注意：下面配置的Linux的IP地址会变化的，过了一段时间或者重启时会变化的，再次使用该IP或者域名会连接不到，所以这是临时的域名和IP，接下来会学习到如何固定连接Linux系统的IP地址和域名，这样子过了一段时间断开连接了，再次访问时就不会访问不到了。</p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111152427690.png" alt="image-20230111152427690"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111152919855.png" alt="image-20230111152919855"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111153107936.png" alt="image-20230111153107936"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111153545588.png" alt="image-20230111153545588"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111153252699.png" alt="image-20230111153252699"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111153738783.png" alt="image-20230111153738783"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111153850724.png" alt="image-20230111153850724"></p>              </div>            </details><h3 id="固定IP"><a href="#固定IP" class="headerlink" title="固定IP"></a>固定IP</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>提出问题：为什么需要固定IP地址呢？</p><ul><li><p>当前我们的虚拟机的Linux操作系统，其IP地址是通过DHCP服务获取的。</p></li><li><p>DHCP：动态获取IP地址，即每次重启设备后会获取一次，可能会导致IP地址频繁的变更</p></li><li><p>办公电脑IP地址变化无所谓，但是我们要远程连接到Linux系统，如果IP地址经常更换变化，我们就要频繁的修改配置变化，会很麻烦</p></li><li><p>在我们刚刚配置好的Linux系统的IP和域名为Linux系统的主机名的映射，如果频繁更换了IP地址，则也需要频繁修改配置好的映射关系</p></li></ul><p>解决方案：在VMware Workstation软件中配置固定的IP地址</p><ul><li><p>在VMware Workstation（或Fusion）中配置IP地址网关和网段（IP地址的范围）</p><ul><li>首先要把Linux系统关机，在主页面点击<code>编辑</code>选项，再选择<code>虚拟网络编辑器</code>选项，需要先在页面右下角开启管理员root模式才可以修改，然后在该页面内选中<code>VMnet8</code>选项，把下面的子网IP改为192.168.xxx.0，其中xxx可以自己自定义，子网掩码改为255.255.255.0（有些默认是这个的），再同一页面点击选项<code>NAT设置</code>选项，再新的页面把网关IP改为192.168.xxx.2，点击确定，退回之前的<code>虚拟网络编辑器</code>页面点击确定即可</li></ul><details class="folding-tag" ><summary> 点击查看图片操作 </summary>            <div class='content'>            <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111162134011.png" alt="image-20230111162134011"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111162558284.png" alt="image-20230111162558284"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111162658526.png" alt="image-20230111162658526"></p>            </div>          </details></li></ul><ul><li><p>在Linux系统中手动修改配置文件，固定IP地址，这里可以选择使用Final Shell软件修改（这个要确保Linux系统时开机状态的），也可以直接选择Vmware软件修改也行，下面是使用VMware软件进行修改的</p><ul><li><p>上面的步骤做完后，将Linux系统进行开机，开机后在Linux系统桌面点击右键，选择Open Terminal选项进入终端，输入命令vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33，vim命令操作之前已经学过了，不再讲了，点击确定进入编辑ens33文件，然后找到BOOTPROTO&#x3D;”dhcp”，大概是文件内容的第4行，把它修改为BOOTPROTO&#x3D;”static”，然后在最后添加代码IPADDR&#x3D;”196.168.xxx.xxx”，第一个xxx：我上面是改为了88，根据自己改的修改，第二个xxx：自定义一个数字（0-254之间），以后这个就是固定的ILinux系统的P地址了，接着在其后面一行再添加一行代码：NETMASK&#x3D;”255.255.255.0”，在后一行再添加代码：GATEWAY&#x3D;”192.168.xxx.2”，xxx跟上面一样，我填的是88，最后在后一行再添加一行代码：DNS1&#x3D;”192.168.xxx.2”，这个xxx跟上面一样的意思，然后wq保存退出，这样就修改成功了</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111165953625.png" alt="image-20230111165953625"></p>              </div>            </details></li><li><p>修改完成后，重启网卡，先把网卡停止，命令为：systemctl stop network，再通过systemctl start network，开启网卡，或者直接使用systemctl restart network命令这样就修改成功了，最后通过ip a&#x2F;ifconfig命令查看是否修改成功就行了</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111175022271.png" alt="image-20230111175022271"></p>              </div>            </details></li></ul></li><li><p>上面的步骤都做完后，再去配置Linux系统的IP地址域名就行了，这样IP地址不会更换了，配置的文件是Windows系统下的文件，路径为C:\Windows\System32\drivers\etc\hosts，记得要保存，最后修改Final Shell软件SSH连接的IP地址为域名（其实不用写域名也可以的哦，直接写IP地址也行，只不过学了域名嘛，就用一下域名）就行啦！！！双击打开验证是否可以连接到就ok啦。</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111175617173.png" alt="image-20230111175617173"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111175947906.png" alt="image-20230111175947906"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111180213927.png" alt="image-20230111180213927"></p>              </div>            </details></li></ul>              </div>            </details><h2 id="网络请求和下载"><a href="#网络请求和下载" class="headerlink" title="网络请求和下载"></a>网络请求和下载</h2><h3 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>ping命令检查网络服务器是否可连通状态</p><p>语法：ping [-c num] ip&#x2F;主机名</p><ul><li>-c num：可选的，num检查的次数，若不加此选项，则无限次检查</li><li>ip&#x2F;主机名：必选，被检查的ip&#x2F;主机名的地址，若IP地址不存在，报Unreachable不可达信号</li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111190010160.png" alt="image-20230111190010160"></p>              </div>            </details><h3 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>wget是非交互式的文件下载器，可以在命令行内下载网络文件</p><p>语法：wget [-b] url</p><ul><li>-b：可选，后台下载，会将日志写入当前的工作目录的wget-log文件</li><li>url：下载链接</li></ul><p>注意：即使是终止了下载，它也会在生成文件保存在当前目录下，只是这个文件并不完整，打开不了等问题</p>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111192644538.png" alt="image-20230111192644538"></p>              </div>            </details><h3 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>curl命令可以发送http网络请求，可用于：下载文件和获取信息等</p><p>语法：curl [-O] url</p><ul><li>-O：用于下载文件，当url是下载链接时，可以使用此选项保存文件</li><li>url：要发起请求的网络地址</li></ul><p>例子：向cip.cc发起网络请求，它会返回你主机的公网IP地址</p>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111193949530.png" alt="image-20230111193949530"></p>              </div>            </details><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>计算机程序之间的通讯，通过IP只能锁定计算机，但无法确定具体的程序，因此出现了端口的概念，通过端口可以找到计算机里的具体某个程序，确保了程序之间的通讯</p><p>Linux系统可以支持65535个端口，这6万个端口分为3类</p><ul><li>1~1023：公认端口，通常用于一些系统内置或知名程序的预留使用，如SSH服务远程连接Linux系统的22端口，HTTPS服务的443端口，非特殊需要不要占用这个范围内的端口</li><li>1024~49151：注册端口，通常可以随便使用，用于松散的绑定一些程序&#x2F;服务</li><li>49152~65535：动态端口，通常不会固定绑定程序，而是当程序对外进行网络连接时，用于临时使用</li></ul><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111194733958.png" alt="image-20230111194733958"></p>              </div>            </details><h3 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h3><p>可以通过nmap命令来查看端口占用情况，先要在Linux环境中安装该程序，使用yum&#x2F;apt -y nmap</p><p>语法：nmap 被查看的IP地址</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111200045767.png" alt="image-20230111200045767"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111200353189.png" alt="image-20230111200353189"></p>              </div>            </details><h3 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>netstat命令可以查看指定的端口的占用情况，先使用命令yum&#x2F;apt 安装哦，yum -y install net-tools</p><p>语法：netstat -anp | grep 端口号，其中grep命令已经学过了，过滤命令”|“为管道符也学过了</p>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111201152549.png" alt="image-20230111201152549"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111201546136.png" alt="image-20230111201546136"></p>              </div>            </details><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>程序运行在操作系统中，是被操作系统所管理的，为管理运行的程序，每一个程序在运行的时候，便被操作系统注册为系统中的一个进程，并为每一个进程都分配一个独有的id，称为进程id（进程号）。</p><h3 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>ps命令用来查看Linux系统中的进程信息，这个命令可以灵活使用管道符”|”和grep等命令来一起运用使用的。</p><p>语法：ps [-e -f]</p><ul><li>-e：显示全部的进程</li><li>-f：以完全格式化的形式展示全部信息</li><li>常用的命令是ps -ef，列出全部进程的全部信息</li></ul><p>列表菜单的名称</p><ul><li>UID：进程所属的用户ID</li><li>PID：进程的进程号</li><li>PPID：进程的父ID</li><li>C：此进程CPU占有率（百分比）</li><li>STIME：进程的启动时间</li><li>TTY：启动此进程终端序号，如显示？，表示非终端启动</li><li>TIME：进程占用的CPU时间</li><li>CMD：进程对应的名称或启动连接或启动命令</li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111202709982.png" alt="image-20230111202709982"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111202809936.png" alt="image-20230111202809936"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111203243897.png" alt="image-20230111203243897"></p>              </div>            </details><h3 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>kill命令可以关闭进程</p><p>语法：kill [-9] 进程ID</p><ul><li>-9：表示强制关闭进程，不使用此选项会向进程发送信号要求其关闭，但是是否关闭要看进程自身的处理机制</li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111204318295.png" alt="image-20230111204318295"></p>              </div>            </details><h2 id="主机状态监控"><a href="#主机状态监控" class="headerlink" title="主机状态监控"></a>主机状态监控</h2><h3 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>top命令可以查看系统资源的占用情况，通过top命令查看CPU、内存使用情况，类似于Windows系统的任务管理器，默认5秒刷新一次，</p><p>下面的选项太多，就不一一操作图片展示了，自己多动手操作就完了！！！</p><p>语法：top [-p -d -c -n -b -i -u]</p><ul><li>-p：只显示某个进程的信息</li><li>-d：设置刷新时间，默认是5秒</li><li>-c：显示产生进程的完整命令</li><li>-n：指定刷新次数，刷新完会退出，例如：top -n 3</li><li>-b：以非交互非全屏模式运行，以批次的方式执行top，一般配合-n指定刷新次数来统计信息，将输出重定向到指定文件，比如top -b -n 3 &gt; &#x2F;tmp&#x2F;top.tmp</li><li>-i：不显示任何闲置（idle）或无用（zombie）的进程</li><li>-u：查找特定用户启动的进程</li><li>按键盘q键退出</li><li>ctrl+c快捷键也可以退出</li></ul>              </div>            </details><details class="folding-tag" ><summary> 查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111205105157.png" alt="image-20230111205105157"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111205234798.png" alt="image-20230111205234798"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111205838130.png" alt="image-20230111205838130"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111205746603.png" alt="image-20230111205746603"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111211034432.png" alt="image-20230111211034432"></p>              </div>            </details><h3 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h3><p>使用df命令，可以查看硬盘的使用情况</p><p>语法：df [-h]</p><ul><li>-h：以更加人性化的单位显示</li></ul><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111211359368.png" alt="image-20230111211359368"></p>              </div>            </details><h3 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h3><p>使用iostat命令查看CPU、磁盘的相关信息</p><p>语法：iostat [-x] [num1] [num2]</p><ul><li>-x：显示更多信息</li><li>num1：数字，刷新间隔</li><li>num2：数字，刷新几次</li></ul><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111212210166.png" alt="image-20230111212210166"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111212117359.png" alt="image-20230111212117359"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111212338456.png" alt="image-20230111212338456"></p>              </div>            </details><h3 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h3><p>使用sar命令查看网络相关的统计（sar命令十分的复杂，这里仅简单用于统计网络）</p><p>语法：sar -n DEV num1 num2</p><ul><li>-n：查看网络，DEV表示查看网络接口</li><li>num1：刷新间隔（不填就表示查看1次结束）</li><li>num2：查看次数（不填则查看无数次）</li></ul><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111212849895.png" alt="image-20230111212849895"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111212940020.png" alt="image-20230111212940020"></p>              </div>            </details><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h3><p>使用env命令可以查看当前系统中记录的环境变量，会以键值对的形式展示出来，例如：USER&#x3D;user，表示当前的操作用户为user。</p><p>其中env命令查到的信息里有PATH的键值对，它的值</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111213450113.png" alt="image-20230111213450113"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111214124045.png" alt="image-20230111214124045"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111214158740.png" alt="image-20230111214158740"></p>              </div>            </details><h3 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h3><p>$符号在Linux系统中用于取“变量”的值</p><p>语法：$环境变量名</p><p>例子：echo$PATH</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111214958189.png" alt="image-20230111214958189"></p>              </div>            </details><h3 id="export命令"><a href="#export命令" class="headerlink" title="export命令"></a>export命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>Linux环境变量可以用户自行设置，其中分为：</p><ul><li>临时设置：语法：export 变量名&#x3D;变量值</li><li>永久生效：<ul><li>针对当前用户生效，配置在当前用户的：~&#x2F;.bashrc文件中</li><li>针对所有用户生效，配置在系统的：&#x2F;etc&#x2F;profile文件中</li><li>并通过语法：source 配置文件，进行立刻生效，后重新启动Final Shell生效</li></ul></li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111215836226.png" alt="image-20230111215836226"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111221705862.png" alt="image-20230111221705862"></p>              </div>            </details><h2 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h2><details class="folding-tag" ><summary> 点击查看 </summary>              <div class='content'>              <p>使用Final Shell软件工具，在Final Shell软件的主界面下有个视图窗体，提供了Linux文件系统视图，可以直接使用简单粗暴的方式来上传和下载</p><ul><li><p>下载：在视图中找到想要下载的文件，鼠标右键点击，选择下载选项，可直接下载，它会下载到桌面fsdownload目录(没有该目录会创建)里</p></li><li><p>上传：在Windows系统中找到想要上传的文件，直接使用鼠标按住左键把它拖进去Final Shell软件视图中去，或者跟下载一样,点击上传，Final Shell会自动同步到Linux虚拟机中</p><details class="folding-tag" ><summary> 点击查看图片操作 </summary>            <div class='content'>            <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230111224452480.png" alt="image-20230111224452480"></p>            </div>          </details></li></ul>              </div>            </details><h3 id="rz、sz命令"><a href="#rz、sz命令" class="headerlink" title="rz、sz命令"></a>rz、sz命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>rz，sz命令分别是上传和下载的命令，使用rz、sz命令需要通过yum命令先安装lrzsz程序，命令为yum -y install lrzsz，安装依赖程序</p><ul><li>rz命令，语法：rz</li><li>sz命令，语法：sz 要下载的文件，文件会自动下载到Windows系统桌面的fsdownload文件夹中</li></ul><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230112172806816.png" alt="image-20230112172806816"></p>              </div>            </details>              </div>            </details><h2 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h2><details class="folding-tag" ><summary> 压缩格式说明 </summary>              <div class='content'>              <p>压缩格式</p><ul><li>zip格式：Linux、Windows、MasOS系统常用</li><li>7zip格式：Windows系统系统常用</li><li>rar格式：Windows系统常用</li><li>tar格式：Linux、MasOS系统常用</li><li>gzip格式：Linux、MasOS系统常用</li></ul><p>在Windows系统中常用的软件如：winrar、bandizip等软件，都支持各类常见的压缩格式，Linux系统主要要学习的压缩格式为tar、gzip、zip三种压缩方式，完成文件的压缩和解压操作，压缩和解压的时候遇到同名的文件，会将同名文件覆盖，取名要谨慎！！！</p>              </div>            </details><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>Linux系统常用的两种压缩格式，后缀分别是：</p><ul><li>.tar，称之为tarball，归档文件，即简单的将文件组装到一个.tar的文件内，并没有太多的文件体积的减少，仅仅是简单的封装</li><li>.gz，即使用gzip压缩算法将文件压缩到一个文件内，可以极大的减少压缩后的体积</li></ul><p>以上两种格式，使用tar命令均可以进行压缩和解压缩的操作</p><p>语法：tar [-c -v -x -f -z -C] 参数1 参数2…参数N</p><ul><li>-c：创建压缩文件，用于压缩模式</li><li>-v：显示压缩、解压过程，用于查看进度</li><li>-x：解压模式</li><li>-f：要创建的文件，或要解压的文件，-f选项必须在所有选项中位置处于最后一个</li><li>-z：gzip模式，不使用-z就是普通的tarball格式，若要使用该选项，一般放在选项的第一个</li><li>-C：选择解压的目的地，用于解压模式</li></ul><p>tar压缩的常用的一些组合：</p><ul><li><p>tar -cvf test.tar 1.txt 2.txt 3.txt </p><p>将1.txt 2.txt 3.txt压缩到test.tar文件内</p></li><li><p>tar -zcvf test.tar.gz 1.txt 2.txt 3.txt</p><p>将1.txt 2.txt 3.txt 压缩到test.tar.gz文件内，使用gzip模式</p></li></ul><p>tar解压的常用的一些组合：</p><ul><li><p>tar -xvf test.tar</p><p>解压test.tat文件，将文件解压到当前的目录下</p></li><li><p>tar -xvf test.tar -C &#x2F;home&#x2F;user</p><p>解压test.tar文件，将文件解压到指定目录下（&#x2F;home&#x2F;user）</p></li><li><p>tar -zxvf test.tar.gz -C &#x2F;home&#x2F;user</p><p>以Gzip模式解压test.tar.gz，将文件解压到指定目录（&#x2F;home&#x2F;user）</p></li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230112211914499.png" alt="image-20230112211914499"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230112212936169.png" alt="image-20230112212936169"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230112213313652.png" alt="image-20230112213313652"></p>              </div>            </details><h3 id="zip-unzip命令"><a href="#zip-unzip命令" class="headerlink" title="zip&#x2F;unzip命令"></a>zip&#x2F;unzip命令</h3><details class="folding-tag" ><summary> 点击查看说明 </summary>              <div class='content'>              <p>zip命令也可以压缩文件，将文件压缩为zip压缩包</p><p>语法：zip [-r] 参数1 参数2…参数N</p><ul><li>-r：被压缩的文件包含文件夹时，需要使用-r选项，和rm、cp等命令的-r选项的效果一样</li></ul><p>示例：</p><ul><li><p>zip test.zip a.txt b.txt c.txt</p><p>将a.txt、b.txt和c.txt文件压缩到test.zip文件内</p></li><li><p>zip -r test.zip a.txt b.txt test</p><p>将a.txt、b.txt文件和test文件夹压缩到test.zip文件内</p></li></ul><p>unzip命令也可以用来解压.zip文件</p><p>语法：unzip 参数 [-d]</p><ul><li>-d：指定要解压去的地方，同tar的-r选项，功能一样</li><li>参数：被解压的.zip压缩包文件</li></ul><p>示例：</p><ul><li><p>unzip test.zip</p><p>将test.zip文件解压到当前的目录</p></li><li><p>unzip test.zip -d &#x2F;home&#x2F;test</p><p>将test.zip文件解压到指定的目录下（&#x2F;home&#x2F;test)</p></li></ul>              </div>            </details><details class="folding-tag" ><summary> 点击查看图片操作 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230112214852460.png" alt="image-20230112214852460"></p><p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/learn/image-20230112220233597.png" alt="image-20230112220233597"></p>              </div>            </details>]]></content>
    
    
    <summary type="html">linux基础学习</summary>
    
    
    
    <category term="linux" scheme="https://blog.ydg.icu/categories/linux/"/>
    
    
    <category term="linux" scheme="https://blog.ydg.icu/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>外挂标签</title>
    <link href="https://blog.ydg.icu/2023/01/01/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/"/>
    <id>https://blog.ydg.icu/2023/01/01/%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/</id>
    <published>2022-12-31T16:00:00.000Z</published>
    <updated>2023-01-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>基于基本的MarkDown语法上添加一些额外的标签语法,使得博客文章更加漂亮高级美观,<br>本文资源来自<a href="https://akilar.top/posts/615e2dec/">Akilar</a>,有需要的同学可以去看他的,比较全。</p></div><h1 id="行内文本样式text"><a href="#行内文本样式text" class="headerlink" title="行内文本样式text"></a>行内文本样式text</h1><div class="tabs" id="行内文本样式text"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="行内文本样式text-1">标签语法</button><button type="button" class="tab " data-href="行内文本样式text-2">样式预览</button><button type="button" class="tab " data-href="行内文本样式text-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="行内文本样式text-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="行内文本样式text-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol></div><div class="tab-item-content" id="行内文本样式text-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="number">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="number">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="number">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="number">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="number">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="行内文本span"><a href="#行内文本span" class="headerlink" title="行内文本span"></a>行内文本span</h1><div class="tabs" id="行内文本span"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="行内文本span-1">标签语法</button><button type="button" class="tab " data-href="行内文本span-2">配置参数</button><button type="button" class="tab " data-href="行内文本span-3">样式预览</button><button type="button" class="tab " data-href="行内文本span-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="行内文本span-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="行内文本span-2"><p>字体: logo, code<br>颜色: red,yellow,green,cyan,blue,gray<br>大小: small, h4, h3, h2, h1, large, huge, ultra<br>对齐方向: left, center, right</p></div><div class="tab-item-content" id="行内文本span-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul></div><div class="tab-item-content" id="行内文本span-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line">- 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme <span class="keyword">for</span> Hexo %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="段落文本"><a href="#段落文本" class="headerlink" title="段落文本"></a>段落文本</h1><div class="tabs" id="段落文本"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="段落文本-1">标签语法</button><button type="button" class="tab " data-href="段落文本-2">配置参数</button><button type="button" class="tab " data-href="段落文本-3">样式预览</button><button type="button" class="tab " data-href="段落文本-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="段落文本-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="段落文本-2"><p>字体: logo, code<br>颜色: red,yellow,green,cyan,blue,gray<br>大小: small, h4, h3, h2, h1, large, huge, ultra<br>对齐方向: left, center, right</p></div><div class="tab-item-content" id="段落文本-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul></div><div class="tab-item-content" id="段落文本-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line">- 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme <span class="keyword">for</span> Hexo %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="分栏"><a href="#分栏" class="headerlink" title="分栏"></a>分栏</h1><div class="tabs" id="分栏"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="分栏-1">标签语法</button><button type="button" class="tab " data-href="分栏-2">配置参数</button><button type="button" class="tab " data-href="分栏-3">样式预览</button><button type="button" class="tab " data-href="分栏-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [<span class="meta">@icon</span>] --&gt;</span><br><span class="line">Any <span class="title function_">content</span> <span class="params">(support inline tags too)</span>.</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="分栏-2"><p>Unique name :<br>    选项卡块标签的唯一名称，不带逗号。<br>    将在#id中用作每个标签及其索引号的前缀。<br>    如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。<br>    仅当前帖子&#x2F;页面的URL必须是唯一的！<br>[index]:<br>    活动选项卡的索引号。<br>    如果未指定，将选择第一个标签（1）。<br>    如果index为-1，则不会选择任何选项卡。<br>    可选参数。<br>[Tab caption]:<br>    当前选项卡的标题。<br>    如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。<br>    如果未指定标题，但指定了图标，则标题将为空。<br>    可选参数。<br>[@icon]:<br>    FontAwesome图标名称（全名，看起来像“ fas fa-font”）<br>    可以指定带空格或不带空格；<br>    例如’Tab caption @icon’ 和 ‘Tab caption@icon’.<br>    可选参数。</p></div><div class="tab-item-content" id="分栏-3"><div class="tip success"><p>Demo1-默认展开第一个</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tip success"><p>Demo2-预设选择tabs</p></div><div class="tabs" id="test2"><ul class="nav-tabs"><button type="button" class="tab " data-href="test2-1">test2 1</button><button type="button" class="tab " data-href="test2-2">test2 2</button><button type="button" class="tab  active" data-href="test2-3">test2 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tip success"><p>Demo3-不展开</p></div><div class="tabs" id="test3"><ul class="nav-tabs no-default"><button type="button" class="tab " data-href="test3-1">test3 1</button><button type="button" class="tab " data-href="test3-2">test3 2</button><button type="button" class="tab " data-href="test3-3">test3 3</button></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="tip success"><p>Demo4-自定义Tab名 + 只有icon + icon和Tab名</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">第一个Tab</button><button type="button" class="tab " data-href="test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button><button type="button" class="tab " data-href="test4-3"><i class="fas fa-bomb"></i>炸弹</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div></div><div class="tab-item-content" id="分栏-4"><div class="tip success"><p>Demo1-默认展开第一个</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab <span class="number">1.</span>**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab <span class="number">2.</span>**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab <span class="number">3.</span>**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tip success"><p>Demo2-预设选择tabs</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, <span class="number">3</span> %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab <span class="number">1.</span>**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab <span class="number">2.</span>**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab <span class="number">3.</span>**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tip success"><p>Demo3-不展开</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -<span class="number">1</span> %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab <span class="number">1.</span>**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab <span class="number">2.</span>**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab <span class="number">3.</span>**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tip success"><p>Demo4-自定义Tab名 + 只有icon + icon和Tab名</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line">**tab名字为第一个Tab**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab <span class="meta">@fab</span> fa-apple-pay --&gt;</span><br><span class="line">**只有图标 没有Tab名字**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹<span class="meta">@fas</span> fa-bomb --&gt;</span><br><span class="line">**名字+icon**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="折叠框"><a href="#折叠框" class="headerlink" title="折叠框"></a>折叠框</h1><div class="tabs" id="折叠框"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="折叠框-1">标签语法</button><button type="button" class="tab " data-href="折叠框-2">配置参数</button><button type="button" class="tab " data-href="折叠框-3">样式预览</button><button type="button" class="tab " data-href="折叠框-4">实例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="折叠框-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](https:<span class="comment">//cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="折叠框-2"><p>颜色：blue, cyan, green, yellow, red<br>状态：状态填写 open 代表默认打开。</p></div><div class="tab-item-content" id="折叠框-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/bg.jpg"></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/bg.jpg' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details></div><div class="tab-item-content" id="折叠框-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line">![](https:<span class="comment">//cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line">- haha</span><br><span class="line">- hehe</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line">&#123;% folding blue, 查看嵌套测试<span class="number">2</span> %&#125;</span><br><span class="line">&#123;% folding 查看嵌套测试<span class="number">3</span> %&#125;</span><br><span class="line">hahaha &lt;span&gt;&lt;img src=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> style=<span class="string">&#x27;height:24px&#x27;</span>&gt;&lt;/span&gt;</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="时间轴"><a href="#时间轴" class="headerlink" title="时间轴"></a>时间轴</h1><div class="tabs" id="时间轴"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="时间轴-1">标签语法</button><button type="button" class="tab " data-href="时间轴-2">配置参数</button><button type="button" class="tab " data-href="时间轴-3">样式预览</button><button type="button" class="tab " data-href="时间轴-4">实例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="时间轴-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="时间轴-2"><p>title标题&#x2F;时间线<br>colortimeline颜色:default(留空) &#x2F; blue &#x2F; pink &#x2F; red &#x2F; purple &#x2F; orange &#x2F; green</p></div><div class="tab-item-content" id="时间轴-3"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div></div><div class="tab-item-content" id="时间轴-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline <span class="number">2020</span>-<span class="number">07</span>-<span class="number">24</span> [<span class="number">2.6</span><span class="number">.6</span> -&gt; <span class="number">3.0</span>](https:<span class="comment">//github.com/volantis-x/hexo-theme-volantis/releases) --&gt;</span></span><br><span class="line">        <span class="number">1.</span> 如果有 `hexo-lazyload-image` 插件，需要删除并重新安装最新版本，设置 `lazyload.isSPA: <span class="literal">true</span>`。</span><br><span class="line">        <span class="number">2.</span> <span class="number">2.</span>x 版本的 css 和 js 不适用于 <span class="number">3.</span>x 版本，如果使用了 `use_cdn: <span class="literal">true</span>` 则需要删除。</span><br><span class="line">        <span class="number">3.</span> <span class="number">2.</span>x 版本的 fancybox 标签在 <span class="number">3.</span>x 版本中被重命名为 gallery 。</span><br><span class="line">        <span class="number">4.</span> <span class="number">2.</span>x 版本的置顶 `top: <span class="literal">true</span>` 改为了 `pin: <span class="literal">true</span>`，并且同样适用于 `layout: page` 的页面。</span><br><span class="line">        <span class="number">5.</span> 如果使用了 `hexo-offline` 插件，建议卸载，<span class="number">3.0</span> 版本默认开启了 pjax 服务。</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline <span class="number">2020</span>-<span class="number">05</span>-<span class="number">15</span> [<span class="number">2.6</span><span class="number">.3</span> -&gt; <span class="number">2.6</span><span class="number">.6</span>](https:<span class="comment">//github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6) --&gt;</span></span><br><span class="line">不需要额外处理。</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline <span class="number">2020</span>-<span class="number">04</span>-<span class="number">20</span> [<span class="number">2.6</span><span class="number">.2</span> -&gt; <span class="number">2.6</span><span class="number">.3</span>](https:<span class="comment">//github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3) --&gt;</span></span><br><span class="line"><span class="number">1.</span> 全局搜索 `seotitle` 并替换为 `seo_title`。</span><br><span class="line"><span class="number">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，`group: group_name` 对应的组件名必须是 `group_name`。</span><br><span class="line"><span class="number">2.</span> group 组件的列表名优先显示文章的 `short_title` 其次是 `title`。</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="上标标签"><a href="#上标标签" class="headerlink" title="上标标签"></a>上标标签</h1><div class="tabs" id="折叠框"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="折叠框-1">标签语法</button><button type="button" class="tab " data-href="折叠框-2">配置参数</button><button type="button" class="tab " data-href="折叠框-3">样式预览</button><button type="button" class="tab " data-href="折叠框-4">实例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="折叠框-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="折叠框-2"><p>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell<br>自定义图标: 支持fontawesome。</p></div><div class="tab-item-content" id="折叠框-3"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div></div><div class="tab-item-content" id="折叠框-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;<span class="keyword">default</span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="引用note"><a href="#引用note" class="headerlink" title="引用note"></a>引用note</h1><div class="tabs" id="note"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="note-1">标签语法</button><button type="button" class="tab " data-href="note-2">配置参数</button><button type="button" class="tab " data-href="note-3">样式预览</button><button type="button" class="tab " data-href="note-4">示例代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any <span class="title function_">content</span> <span class="params">(support inline tags too.io)</span>.</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="note-2"><p>class【可选】标识，不同的标识有不同的配色(default &#x2F; blue &#x2F; pink &#x2F; red &#x2F; purple &#x2F; orange &#x2F; green)<br>no-icon【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )<br>style【可选】可以覆盖配置中的 style（simple&#x2F;modern&#x2F;flat&#x2F;disabled）</p></div><div class="tab-item-content" id="note-3"><div class="tip success"><p>1.simple样式</p></div><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><div class="tip success"><p>2.modern样式</p></div><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><div class="tip success"><p>3.flat样式</p></div><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><div class="tip success"><p>4.disabled样式</p></div><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><div class="tip success"><p>5.no-icon样式</p></div><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div></div><div class="tab-item-content" id="note-4"><div class="tip success"><p>1.simple样式</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note <span class="string">&#x27;fab fa-cc-visa&#x27;</span> simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue <span class="string">&#x27;fas fa-bullhorn&#x27;</span> simple %&#125;<span class="number">2021</span>年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink <span class="string">&#x27;fas fa-car-crash&#x27;</span> simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red <span class="string">&#x27;fas fa-fan&#x27;</span> simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange <span class="string">&#x27;fas fa-battery-half&#x27;</span> simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple <span class="string">&#x27;far fa-hand-scissors&#x27;</span> simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green <span class="string">&#x27;fab fa-internet-explorer&#x27;</span> simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="tip success"><p>2.modern样式</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note <span class="string">&#x27;fab fa-cc-visa&#x27;</span> modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue <span class="string">&#x27;fas fa-bullhorn&#x27;</span> modern %&#125;<span class="number">2021</span>年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink <span class="string">&#x27;fas fa-car-crash&#x27;</span> modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red <span class="string">&#x27;fas fa-fan&#x27;</span> modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange <span class="string">&#x27;fas fa-battery-half&#x27;</span> modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple <span class="string">&#x27;far fa-hand-scissors&#x27;</span> modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green <span class="string">&#x27;fab fa-internet-explorer&#x27;</span> modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="tip success"><p>3.flat样式</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note <span class="string">&#x27;fab fa-cc-visa&#x27;</span> flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue <span class="string">&#x27;fas fa-bullhorn&#x27;</span> flat %&#125;<span class="number">2021</span>年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink <span class="string">&#x27;fas fa-car-crash&#x27;</span> flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red <span class="string">&#x27;fas fa-fan&#x27;</span> flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange <span class="string">&#x27;fas fa-battery-half&#x27;</span> flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple <span class="string">&#x27;far fa-hand-scissors&#x27;</span> flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green <span class="string">&#x27;fab fa-internet-explorer&#x27;</span> flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="tip success"><p>4.disabled样式</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note <span class="string">&#x27;fab fa-cc-visa&#x27;</span> disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue <span class="string">&#x27;fas fa-bullhorn&#x27;</span> disabled %&#125;<span class="number">2021</span>年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink <span class="string">&#x27;fas fa-car-crash&#x27;</span> disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red <span class="string">&#x27;fas fa-fan&#x27;</span> disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange <span class="string">&#x27;fas fa-battery-half&#x27;</span> disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple <span class="string">&#x27;far fa-hand-scissors&#x27;</span> disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green <span class="string">&#x27;fab fa-internet-explorer&#x27;</span> disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="tip success"><p>5.no-icon样式</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue no-icon %&#125;<span class="number">2021</span>年快到了....&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="链接卡片"><a href="#链接卡片" class="headerlink" title="链接卡片"></a>链接卡片</h1><div class="tabs" id="链接卡片"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="链接卡片-1">标签语法</button><button type="button" class="tab " data-href="链接卡片-2">样式预览</button><button type="button" class="tab " data-href="链接卡片-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="链接卡片-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="链接卡片-2"><div calss='anzhiyu-tag-link'><a class="tag-Link" target="_blank" href="https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg">    <div class="tag-link-tips">引用站外地址</div>    <div class="tag-link-bottom">        <div class="tag-link-left" style="">          <i class="anzhiyufont anzhiyu-icon-link" style=""></i>        </div>        <div class="tag-link-right">            <div class="tag-link-title">光仔の小破站</div>            <div class="tag-link-sitename"> https://ydg-0814.github.io/</div>        </div>        <i class="anzhiyufont anzhiyu-icon-angle-right"></i>    </div>    </a></div></div><div class="tab-item-content" id="链接卡片-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 光仔の小破站, https:<span class="comment">//ydg-0814.github.io/, https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg %&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="按钮btns"><a href="#按钮btns" class="headerlink" title="按钮btns"></a>按钮btns</h1><div class="tabs" id="按钮btns"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="按钮btns-1">标签语法</button><button type="button" class="tab " data-href="按钮btns-2">配置参数</button><button type="button" class="tab " data-href="按钮btns-3">样式预览</button><button type="button" class="tab " data-href="按钮btns-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="按钮btns-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="按钮btns-2"><p>圆角样式：rounded, circle<br>增加文字样式：可以在容器内增加<code>&lt;b&gt;标题&lt;/b&gt;和&lt;p&gt;描述文字&lt;/p&gt;</code><br>布局方式：默认为自动宽度，适合视野内只有一两个的情况。<br>wide:宽一点的按钮<br>fill:填充布局，自动铺满至少一行，多了会换行<br>center:居中，按钮之间是固定间距<br>around:居中分散<br>grid2:等宽最多2列，屏幕变窄会适当减少列数<br>grid3:等宽最多3列，屏幕变窄会适当减少列数<br>grid4:等宽最多4列，屏幕变窄会适当减少列数<br>grid5:等宽最多5列，屏幕变窄会适当减少列数</p></div><div class="tab-item-content" id="按钮btns-3"><div class="tip success"><p>如果需要显示类似「团队成员」之类的一组含有头像的链接</p></div><div class="btns circle grid5">            <a class="button no-text-decoration" href='https://ydg-0814.github.io/' title='光仔の小破站'><img src='https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg'>光仔の小破站</a><a class="button no-text-decoration" href='https://ydg-0814.github.io/' title='光仔の小破站'><img src='https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg'>光仔の小破站</a><a class="button no-text-decoration" href='https://ydg-0814.github.io/' title='光仔の小破站'><img src='https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg'>光仔の小破站</a><a class="button no-text-decoration" href='https://ydg-0814.github.io/' title='光仔の小破站'><img src='https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg'>光仔の小破站</a><a class="button no-text-decoration" href='https://ydg-0814.github.io/' title='光仔の小破站'><img src='https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg'>光仔の小破站</a>          </div><div class="tip success"><p>含有图标的按钮</p></div><div class="btns rounded grid5">            <a class="button no-text-decoration" href='https://ydg-0814.github.io/' title='YDG-0814'><img src='fas fa-heartbeat'>YDG-0814</a><a class="button no-text-decoration" href='https://ydg-0814.github.io/' title='光仔の小破站'><img src='fas fa-leaf'>光仔の小破站</a>          </div><div class="tip success"><p>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p></div><div class="btns circle center grid5">            <a href='https://ydg-0814.github.io/'><i class='fas fa-heartbeat'></i><b>YDG-0814</b><p class='p red'>专业版</p><img src='https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg'></a><a href='https://ydg-0814.github.io/'><i class='fas fa-heartbeat'></i><b>YDG-0814</b><p class='p green'>免费版</p><img src='https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg'></a>          </div></div><div class="tab-item-content" id="按钮btns-4"><div class="tip success"><p>如果需要显示类似「团队成员」之类的一组含有头像的链接</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell 光仔の小破站, https:<span class="comment">//ydg-0814.github.io/, https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg %&#125;</span></span><br><span class="line">&#123;% cell 光仔の小破站, https:<span class="comment">//ydg-0814.github.io/, https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg %&#125;</span></span><br><span class="line">&#123;% cell 光仔の小破站, https:<span class="comment">//ydg-0814.github.io/, https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg %&#125;</span></span><br><span class="line">&#123;% cell 光仔の小破站, https:<span class="comment">//ydg-0814.github.io/, https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg %&#125;</span></span><br><span class="line">&#123;% cell 光仔の小破站, https:<span class="comment">//ydg-0814.github.io/, https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg %&#125;</span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><div class="tip success"><p>含有图标的按钮</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell YDG-0814, https:<span class="comment">//ydg-0814.github.io/, fas fa-heartbeat %&#125;</span></span><br><span class="line">&#123;% cell 光仔の小破站, https:<span class="comment">//ydg-0814.github.io/, fas fa-leaf %&#125;</span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><div class="tip success"><p>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">&#x27;https://ydg-0814.github.io/&#x27;</span>&gt;</span><br><span class="line">&lt;i class=<span class="string">&#x27;fas fa-heartbeat&#x27;</span>&gt;&lt;/i&gt;</span><br><span class="line">&lt;b&gt;YDG-0814&lt;/b&gt;</span><br><span class="line">&#123;% p red, 专业版 %&#125;</span><br><span class="line">&lt;img src=<span class="string">&#x27;https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg&#x27;</span>&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">&#x27;https://ydg-0814.github.io/&#x27;</span>&gt;</span><br><span class="line">&lt;i class=<span class="string">&#x27;fas fa-heartbeat&#x27;</span>&gt;&lt;/i&gt;</span><br><span class="line">&lt;b&gt;YDG-0814&lt;/b&gt;</span><br><span class="line">&#123;% p green, 免费版 %&#125;</span><br><span class="line">&lt;img src=<span class="string">&#x27;https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg&#x27;</span>&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="行内图片"><a href="#行内图片" class="headerlink" title="行内图片"></a>行内图片</h1><div class="tabs" id="行内图片"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="行内图片-1">标签语法</button><button type="button" class="tab " data-href="行内图片-2">配置参数</button><button type="button" class="tab " data-href="行内图片-3">样式预览</button><button type="button" class="tab " data-href="行内图片-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="行内图片-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="行内图片-2"><p>高度：height&#x3D;20px</p></div><div class="tab-item-content" id="行内图片-3"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。<br>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p></div><div class="tab-item-content" id="行内图片-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https:<span class="comment">//cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span></span><br><span class="line">这又是 &#123;% inlineimage https:<span class="comment">//cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h1><div class="tabs" id="音频"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="音频-1">标签语法</button><button type="button" class="tab " data-href="音频-2">样式预览</button><button type="button" class="tab " data-href="音频-3">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="音频-1"><div class="audio"><audio controls preload><source src='音频链接' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></div><div class="tab-item-content" id="音频-2"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div></div><div class="tab-item-content" id="音频-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https:<span class="comment">//github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span></span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h1><div class="tabs" id="视频"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="视频-1">标签语法</button><button type="button" class="tab " data-href="视频-2">配置参数</button><button type="button" class="tab " data-href="视频-3">样式预览</button></ul><div class="tab-contents"><div class="tab-item-content active" id="视频-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="视频-2"><p>对其方向：left, center, right<br>列数：逗号后面直接写列数，支持 1 ～ 4 列。</p></div><div class="tab-item-content" id="视频-3"><div class="tip success"><p>100%宽度</p></div><div class="video"><video controls preload><source src='left' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="tip success"><p>50%宽度</p></div><div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><div class="tip success"><p>25%宽度</p></div><div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><div class="tabs" id="图片"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="图片-1">标签语法</button><button type="button" class="tab " data-href="图片-2">配置参数</button><button type="button" class="tab " data-href="图片-3">样式预览</button><button type="button" class="tab " data-href="图片-4">示例源码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="图片-1"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="图片-2"><p>在语法体里添加Markdown语法格式的图片就行了，并且它自己会自适应屏幕不用自己调节图片的大小等，非常的实用。</p></div><div class="tab-item-content" id="图片-3"><div class="gallery">  <div class="fj-gallery page_img_lazyload  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg","alt":""},{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/6b4b354362aac651f305720875897867.jpg","alt":""},{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/3a3235363f6736604606d0af83de7c4b.jpeg","alt":""},{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/waiguaMD.jpg","alt":""},{"url":"https://proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/bg.jpg","alt":""}]</span>  </div><button class="gallery-load-more" style="opacity:0">  <span>加载更多</span>  <i class="anzhiyufont anzhiyu-icon-arrow-down"></i>  </button></div></div><div class="tab-item-content" id="图片-4"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https:<span class="comment">//proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images6.jpg)</span></span><br><span class="line">![](https:<span class="comment">//proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/6b4b354362aac651f305720875897867.jpg)</span></span><br><span class="line">![](https:<span class="comment">//proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/3a3235363f6736604606d0af83de7c4b.jpeg)</span></span><br><span class="line">![](https:<span class="comment">//proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/waiguaMD.jpg)</span></span><br><span class="line">![](https:<span class="comment">//proxy.ydg.icu/proxy/raw.githubusercontent.com/ixiaoyuer/pic_bed/main/images/bg.jpg)</span></span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
    
    
    <summary type="html">自己常用的MarkDown的外挂标签</summary>
    
    
    
    <category term="外挂标签" scheme="https://blog.ydg.icu/categories/%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/"/>
    
    
    <category term="外挂标签" scheme="https://blog.ydg.icu/tags/%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot的pom.xml依赖</title>
    <link href="https://blog.ydg.icu/2022/12/12/springboot%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96/"/>
    <id>https://blog.ydg.icu/2022/12/12/springboot%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96/</id>
    <published>2022-12-11T16:00:00.000Z</published>
    <updated>2023-11-12T06:03:53.981Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>SpringBoot项目常用的pom.xml依赖<br>总结关于一些springboot项目常用到的依赖坐标，基于maven项目</p></div><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><p>pom.xml是Maven项目的核心配置文件，其中包含了项目的依赖、插件、构建配置等重要信息。下面是一个pom.xml的示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>myproject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，project是根元素，modelVersion指定POM模型的版本号，groupId指定项目的包名，artifactId指定项目的名称，version指定项目的版本号。dependencies指定项目的依赖，可以添加多个dependency元素，每个dependency指定一个依赖项的groupId、artifactId和version。build指定项目的构建配置，其中plugins指定构建过程中使用的插件，可以添加多个plugin元素，每个plugin指定一个插件的groupId、artifactId和version。</p><p>在这个示例中，项目依赖了Spring Boot、MySQL和MyBatis，并且构建过程中使用了Spring Boot插件。如果有其他需要添加的依赖或插件，可以在pom.xml文件中进行配置。</p><p>总结：</p><p>pom.xml是Maven项目的核心配置文件，其中包含了项目的依赖、插件、构建配置等重要信息。在pom.xml中添加依赖和插件可以简化项目的构建和管理。需要注意配置文件的格式、元素名称、元素属性等规范。</p><h2 id="mysql驱动"><a href="#mysql驱动" class="headerlink" title="mysql驱动"></a>mysql驱动</h2><p>mysql-connector-java是用于Java连接MySQL数据库的驱动程序。它提供了一个标准的Java数据库连接（JDBC）API，可以很方便地使用Java语言与MySQL数据库进行交互。</p><p>在Maven项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    mysql驱动依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.29<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Gradle项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;mysql:mysql-connector-java:&#123;版本号&#125;&#x27;</span><br></pre></td></tr></table></figure><p>使用mysql-connector-java依赖时，需要先在MySQL数据库中创建相应的数据库和表。在Java代码中，需要使用JDBC API来连接MySQL数据库，并执行相应的操作。</p><p>需要注意的是，mysql-connector-java依赖的版本与MySQL数据库的版本要匹配，否则可能会出现连接失败等问题。</p><p>配置mysql依赖时，不写版本号<version>xx.xx.xx</version>的话，就会引入mysql依赖的默认版本<br>SpringBoot2.1.x之前默认使用的是mysql 5.x版本<br>SpringBoot2.1.x以后默认使用的是mysql8版本<br>在配置数据源的时候，就有差异</p><p>总结：</p><p>mysql-connector-java是用于Java连接MySQL数据库的驱动程序，提供了一个标准的Java数据库连接（JDBC）API。使用mysql-connector-java依赖需要先在MySQL数据库中创建相应的数据库和表，在Java代码中使用JDBC API连接并执行相应的操作。注意版本的匹配。</p><h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><p>mybatis-spring-boot-starter是一个Spring Boot官方提供的MyBatis集成工具，它整合了Spring Boot和MyBatis，可以方便地使用MyBatis的所有功能。</p><p>使用mybatis-spring-boot-starter可以省去配置MyBatis相关的许多繁琐的步骤，例如配置数据源、SqlSessionFactory等，从而让MyBatis开发变得更加简单和高效。</p><p>在Maven项目中，使用mybatis-spring-boot-starter可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    mybatis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Gradle项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;org.mybatis.spring.boot:mybatis-spring-boot-starter:&#123;版本号&#125;&#x27;</span><br></pre></td></tr></table></figure><p>使用mybatis-spring-boot-starter依赖后，会自动集成MyBatis和Spring Boot，同时会自动配置数据源、SqlSessionFactory等，并且会自动扫描Mapper接口和映射文件，不需要手动配置。</p><p>需要注意的是，在使用mybatis-spring-boot-starter时，需要在配置文件中配置MyBatis的相关配置，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.example.demo.entity # 实体类所在包</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mapper/**/*.xml # 映射文件路径</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>mybatis-spring-boot-starter是一个Spring Boot官方提供的MyBatis集成工具，整合了Spring Boot和MyBatis，可以方便地使用MyBatis的所有功能。使用mybatis-spring-boot-starter可以省去配置MyBatis相关的许多繁琐的步骤，使得开发变得更加简单和高效。需要注意在配置文件中配置MyBatis的相关配置。</p><h2 id="mybatis-plus"><a href="#mybatis-plus" class="headerlink" title="mybatis-plus"></a>mybatis-plus</h2><p>mybatis-plus是一款基于MyBatis的增强工具，可以简化MyBatis的使用和开发。它提供了一系列的增强功能，如自动生成主键、分页查询、条件构造器等，可以大幅提高开发效率和代码质量。</p><p>使用mybatis-plus依赖可以更加方便地使用这些增强功能，mybatis-plus提供了与Spring Boot的集成依赖mybatis-plus-boot-starter。</p><p>在Maven项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MyBatis-Plus 的依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Gradle项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;com.baomidou:mybatis-plus-boot-starter:&#123;版本号&#125;&#x27;</span><br></pre></td></tr></table></figure><p>需要注意的是，使用mybatis-plus需要配置mapper扫描路径，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mybatis-plus.mapper-locations=classpath*:mapper/**/*.xml</span><br></pre></td></tr></table></figure><p>此外，需要在数据源配置中添加MyBatis配置，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.example.demo.entity # 实体类所在包</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true # 开启驼峰命名转换</span></span><br></pre></td></tr></table></figure><p>总结：</p><p>mybatis-plus是一款基于MyBatis的增强工具，可以简化MyBatis的使用和开发，提供了一系列的增强功能。使用该工具需要添加mybatis-plus-boot-starter依赖，并在配置文件中添加mapper扫描路径和MyBatis配置。mybatis-plus与Spring Boot集成，可以更加方便地使用。</p><h2 id="Druid数据库连接池"><a href="#Druid数据库连接池" class="headerlink" title="Druid数据库连接池"></a>Druid数据库连接池</h2><p>druid-spring-boot-starter是Spring Boot集成Druid数据库连接池的依赖，可以简化Druid的使用和配置。</p><p>Druid是阿里巴巴开源的一个高效、可靠的数据库连接池，具有监控、日志功能，可以有效地提高数据库连接的使用效率和安全性。</p><p>使用druid-spring-boot-starter依赖可以更加方便地集成Druid到Spring Boot项目中，开发者只需要在配置文件中添加Druid的相关配置，即可自动创建DataSource对象，并启用Druid的监控和日志功能。</p><p>在Maven项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Gradle项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;com.alibaba:druid-spring-boot-starter:&#123;版本号&#125;&#x27;</span><br></pre></td></tr></table></figure><p>需要注意的是，使用druid-spring-boot-starter依赖时，需要在配置文件中添加Druid的相关配置，如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Druid configuration</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.druid.initial-size</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">spring.datasource.druid.min-idle</span>=<span class="string">5</span></span><br><span class="line"><span class="attr">spring.datasource.druid.max-active</span>=<span class="string">20</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>其中，spring.datasource.type&#x3D;com.alibaba.druid.pool.DruidDataSource 表示使用Druid数据源，spring.datasource.druid.xxx 表示Druid的相关配置。</p><p>总结：</p><p>druid-spring-boot-starter是Spring Boot集成Druid数据库连接池的依赖，可以简化Druid的使用和配置。使用该依赖需要在配置文件中添加Druid的相关配置，开发者可以根据自己的需求进行配置。Druid具有监控、日志等功能，可以有效提高数据库连接的使用效率和安全性。</p><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p><font color="#00c4b6" size="5">springboot相关依赖</font></p></div><h2 id="父依赖"><a href="#父依赖" class="headerlink" title="父依赖"></a>父依赖</h2><p>spring-boot-starter-parent是Spring Boot提供的一个“父项目”依赖，它包含了一些默认的配置和依赖管理，可以帮助开发者更快速地搭建和管理基于Spring Boot的项目。</p><p>使用spring-boot-starter-parent依赖时，可以继承该依赖并在pom.xml文件中指定自己的项目信息和依赖，而无需手动配置Spring Boot的版本号和其他一些常用的依赖。</p><p>在Maven项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>&#123;版本号&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Gradle项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &#x27;org.springframework.boot&#x27; version &#x27;&#123;版本号&#125;&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation &#x27;org.springframework.boot:spring-boot-starter&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，spring-boot-starter-parent并不包含所有的依赖，它只包含了一些常用的依赖管理和默认配置，如Java版本、编码方式、资源过滤等。在实际开发中，开发者还需要根据自己的需求手动添加其他的依赖。</p><p>总结：</p><p>spring-boot-starter-parent是Spring Boot提供的一个“父项目”依赖，包含了一些默认的配置和依赖管理，可以帮助开发者更快速地搭建和管理基于Spring Boot的项目。在使用该依赖时，需要继承该依赖并在pom.xml文件中指定自己的项目信息和依赖。需要注意的是，该依赖并不包含所有的依赖，需要根据实际需求手动添加其他依赖。</p><h2 id="spring-boot-starter"><a href="#spring-boot-starter" class="headerlink" title="spring-boot-starter"></a>spring-boot-starter</h2><p>spring-boot-starter是Spring Boot提供的一个基础依赖，包含了Spring框架和常用的第三方库等组件，可以帮助开发者快速构建基于Spring的应用程序。</p><p>添加spring-boot-starter依赖可以避免繁琐的依赖管理，因为该依赖已经封装了常用的依赖配置，可以自动引入相关的jar包。</p><p>在Maven项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Gradle项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;org.springframework.boot:spring-boot-starter&#x27;</span><br></pre></td></tr></table></figure><p>使用spring-boot-starter依赖，可以轻松地使用Spring Boot提供的各种功能和组件，例如：自动配置、日志、数据库访问、Web开发、安全框架等。开发者只需要编写业务逻辑代码，即可快速搭建一个基于Spring Boot的应用程序。</p><p>需要注意的是，spring-boot-starter并不是一个完整的依赖，它只是一个聚合依赖，包含了多个子依赖。具体使用时，需要根据实际需求选择相应的子依赖。例如，如果需要使用Web开发功能，可以添加spring-boot-starter-web依赖；如果需要使用数据库访问功能，可以添加spring-boot-starter-data-jpa或spring-boot-starter-jdbc等依赖。</p><p>总结：</p><p>spring-boot-starter是Spring Boot提供的一个基础依赖，包含了Spring框架和常用的第三方库等组件，可以帮助开发者快速构建基于Spring的应用程序。开发者可以根据实际需求选择相应的子依赖，例如：spring-boot-starter-web、spring-boot-starter-data-jpa等。使用spring-boot-starter可以避免繁琐的依赖管理，提高开发效率。</p><h2 id="Web依赖"><a href="#Web依赖" class="headerlink" title="Web依赖"></a>Web依赖</h2><p>spring-boot-starter-web是Spring Boot提供的一个Web应用程序开发的依赖，包含了Spring MVC、Tomcat、Jackson等常用的Web框架和组件，可以帮助开发者更方便地进行Web应用程序开发。</p><p>在Spring Boot中，可以通过添加spring-boot-starter-web依赖来使用Spring MVC和Tomcat等Web组件：</p><p>用于web开发场景，包含了 RESTful 和 Spring MVC，并且默认使用了内置的Tomcat服务器。<br>支持注解：@RestController、@RequestMapping、@ResponseBody</p><p>在Maven项目中，可以添加如下依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    springWeb依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在Gradle项目中，可以添加如下依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span><br></pre></td></tr></table></figure><p>使用Spring Boot和Spring MVC进行Web开发时，可以像使用普通的Spring MVC一样编写控制器和视图等组件。例如，下面是一个简单的Spring MVC控制器示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;Hello, Spring Boot!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上控制器使用@GetMapping注解映射了&#x2F;hello路径，并在其中使用了Spring MVC的Model类来传递数据到视图中。在返回值中指定了视图名称hello，Spring Boot会自动查找名为hello的Thymeleaf模板文件。</p><p>需要注意的是，在使用Spring Boot进行Web开发时，还需要在Spring Boot应用程序的配置文件application.properties或application.yml中配置Web服务器的相关属性，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server.port=8080</span><br><span class="line">server.servlet.context-path=/</span><br></pre></td></tr></table></figure><p>以上配置中，指定了Web服务器的端口号和上下文路径。</p><p>总结：</p><p>spring-boot-starter-web是Spring Boot提供的一个Web应用程序开发的依赖，包含了Spring MVC、Tomcat、Jackson等常用的Web框架和组件。在使用Spring Boot和Spring MVC进行Web开发时，可以像使用普通的Spring MVC一样编写控制器和视图等组件，同时还需要在配置文件中配置Web服务器的相关属性。</p><h2 id="Thymeleaf依赖"><a href="#Thymeleaf依赖" class="headerlink" title="Thymeleaf依赖"></a>Thymeleaf依赖</h2><p>spring-boot-starter-thymeleaf是Spring Boot提供的一个基于Thymeleaf模板引擎的依赖，可以帮助开发者更方便地进行Web开发。Thymeleaf是一个Java模板引擎，通过标签和属性来定义模板，可以方便地在模板中使用动态数据、表达式和条件判断等。</p><p>thymeleaf是一个很强大的视图解析工具,SpringBoot支持的thymeleaf页面模板技术<br>默认存放模板页面的路径在src&#x2F;main&#x2F;resources&#x2F;templates 或者 src&#x2F;main&#x2F;view&#x2F;templates,默认的页面文件后缀是.html</p><p>在Spring Boot中，可以通过添加spring-boot-starter-thymeleaf依赖来使用Thymeleaf模板引擎：</p><p>在Maven项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Gradle项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;org.springframework.boot:spring-boot-starter-thymeleaf&#x27;</span><br></pre></td></tr></table></figure><p>使用Spring Boot和Thymeleaf进行Web开发时，可以像使用普通HTML一样编写模板，并在其中使用Thymeleaf标签和属性来定义动态数据和表达式。例如，下面是一个包含了Thymeleaf标签和属性的模板示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Thymeleaf Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;title&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;showMessage&#125;&quot;</span>&gt;</span>Hello, Thymeleaf!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">&quot;item : $&#123;items&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;item&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上模板中，使用了Thymeleaf的th:text、th:if和th:each属性来定义动态数据、条件判断和循环等操作。</p><p>需要注意的是，在使用Thymeleaf进行Web开发时，还需要在Spring Boot应用程序的配置文件application.properties或application.yml中配置模板引擎的相关属性，如下所示：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.thymeleaf.prefix</span>=<span class="string">classpath:/templates/</span></span><br><span class="line"><span class="attr">spring.thymeleaf.suffix</span>=<span class="string">.html</span></span><br><span class="line"><span class="attr">spring.thymeleaf.cache</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><p>以上配置中，指定了模板文件的位置和后缀、是否开启模板缓存等属性。</p><p>总结：</p><p>spring-boot-starter-thymeleaf是Spring Boot提供的一个基于Thymeleaf模板引擎的依赖，可以帮助开发者更方便地进行Web开发。使用Thymeleaf进行Web开发时，可以像使用普通HTML一样编写模板，并在其中使用Thymeleaf标签和属性来定义动态数据和表达式，同时还需要在配置文件中配置模板引擎的相关属性。</p><h2 id="单元测试JUnit依赖"><a href="#单元测试JUnit依赖" class="headerlink" title="单元测试JUnit依赖"></a>单元测试JUnit依赖</h2><p>spring-boot-starter-test是Spring Boot提供的测试依赖，包含了许多在开发和测试中常用的测试框架和工具，如JUnit、Hamcrest、Mockito等，可以帮助开发者更方便地进行单元测试、集成测试和功能测试等。</p><p>在Spring Boot中，可以通过添加spring-boot-starter-test依赖来使用测试框架和工具：</p><p>在Maven项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Gradle项目中，可以添加如下依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testImplementation &#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span><br></pre></td></tr></table></figure><p>在添加完依赖后，就可以使用JUnit、Hamcrest、Mockito等测试框架进行单元测试和集成测试了。Spring Boot还提供了一些方便的测试注解和工具类，如@SpringBootTest、@RunWith和TestRestTemplate等，可以帮助开发者更方便地进行功能测试。</p><p>需要注意的是，在进行完整的集成测试时，可能需要启动完整的Spring Boot应用程序。在这种情况下，需要使用@SpringBootTest注解，并指定使用的Spring Boot启动类，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = MyApplication.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyIntegrationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在这里编写集成测试代码...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码中，使用@SpringBootTest注解指定了使用MyApplication作为Spring Boot启动类，在进行集成测试时会启动完整的应用程序。使用@RunWith注解指定了使用SpringRunner作为测试运行器，以便进行Spring集成测试。</p><p>总结：</p><p>spring-boot-starter-test是Spring Boot提供的测试依赖，包含了许多常用的测试框架和工具。在使用时，可以使用JUnit、Hamcrest、Mockito等测试框架进行单元测试和集成测试，并使用@SpringBootTest、@RunWith和TestRestTemplate等测试注解和工具类进行功能测试。</p><h2 id="springboot热部署"><a href="#springboot热部署" class="headerlink" title="springboot热部署"></a>springboot热部署</h2><p>spring-boot-devtools是Spring Boot提供的一个开发工具包，可以帮助开发者在开发过程中自动重启应用程序、禁用模板缓存、提供LiveReload等功能，提高开发效率。该工具包主要依赖于两个模块：spring-boot-devtools和spring-boot-autoconfigure。</p><p>在Spring Boot中，可以通过添加spring-boot-devtools依赖来使用开发工具包：</p><p>在Maven项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    springboot热部署--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Gradle项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runtimeOnly &#x27;org.springframework.boot:spring-boot-devtools&#x27;</span><br></pre></td></tr></table></figure><p>添加完依赖后，在IDEA或Eclipse中启用devtools需要进行相应的配置。</p><p>在IDEA中，可以在Preferences -&gt; Build, Execution, Deployment -&gt; Compiler中勾选Build project automatically选项。此外，还需要在Registry中勾选compiler.automake.allow.when.app.running选项。</p><p>在Eclipse中，可以在Preferences -&gt; Workspace中勾选Build automatically选项。</p><p>需要注意的是，在生产环境中可以将spring-boot-devtools依赖移除，以避免自动重启和禁用模板缓存等功能对性能造成影响。</p><p>总结：</p><p>spring-boot-devtools是Spring Boot提供的一个开发工具包，可以提高开发效率。该工具包主要依赖于两个模块：spring-boot-devtools和spring-boot-autoconfigure。在使用时需要进行相应的配置，并在生产环境中移除依赖，以避免影响性能。</p><p>修改java代码后，不用重启项目就能直接最新测试，省略了不断修改代码不断重启项目的麻烦</p><h2 id="aop依赖"><a href="#aop依赖" class="headerlink" title="aop依赖"></a>aop依赖</h2><p>AOP（面向切面编程）是一种编程思想，可以将应用程序业务逻辑和横切关注点（如日志、安全、事务等）分离开来，提高代码的可维护性和复用性。Spring Boot提供了一个简单易用的AOP框架，可以通过添加相应的依赖来使用。</p><p>在Spring Boot中，可以通过添加spring-boot-starter-aop依赖来使用AOP框架：</p><p>在Maven项目中，可以添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在Gradle项目中，可以添加如下依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;org.springframework.boot:spring-boot-starter-aop&#x27;</span><br></pre></td></tr></table></figure><p>使用AOP框架的一个常见场景是对方法进行拦截并添加额外的逻辑，如打印日志、记录性能指标等。以下是一个使用AOP框架的例子：</p><p>定义一个切面类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoggingAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LoggingAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.example.myservice..*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;调用方法：&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，定义了一个切面类LoggingAspect，并使用@Before注解定义了一个切入点，该切入点会拦截com.example.myservice包中的所有方法，并在方法执行前打印日志。</p><p>需要注意的是，使用AOP时需要配合表达式语言（如AspectJ）来定义切入点，可以在execution()语句中使用通配符(*)来匹配相应的方法。</p><p>在Spring Boot应用程序中启用AOP功能需要在配置类上添加@EnableAspectJAutoProxy注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上配置将开启AOP功能并允许Spring自动代理切面，以便在方法执行时进行拦截。</p><p>总结：</p><p>Spring Boot提供了一个简单易用的AOP框架，可以通过添加spring-boot-starter-aop依赖来使用。使用AOP框架可以将应用程序业务逻辑和横切关注点分离开来，提高代码的可维护性和复用性。在Spring Boot应用程序中启用AOP功能需要在配置类上添加@EnableAspectJAutoProxy注解。</p><h2 id="邮箱依赖"><a href="#邮箱依赖" class="headerlink" title="邮箱依赖"></a>邮箱依赖</h2><p>要用到邮箱登录时使用到该依赖,结合邮箱工具类使用,在Java项目常用工具类的MarkDown文章中有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/javax.mail/mail --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.mail&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mail&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.4</span><span class="number">.7</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.apache.commons/commons-email --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;commons-email&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">1.4</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="springboot集成redis"><a href="#springboot集成redis" class="headerlink" title="springboot集成redis"></a>springboot集成redis</h2><p>spring-boot-starter-data-redis是Spring Boot中的一个Redis相关的依赖，它是基于Spring Data Redis实现的，提供了与Redis交互的各种功能和工具。</p><p>在使用spring-boot-starter-data-redis时，只需要在Maven或Gradle中添加相应的依赖即可，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该依赖提供了以下功能：</p><ol><li>RedisTemplate：一个通用的Redis操作类，可以执行Redis常见的操作（如SET、GET等），支持多种数据格式（如String、List、Set、ZSet、Hash等）。</li><li>RedisRepository：一个Redis的数据访问接口，支持CRUD操作，类似于JPA中的Repository。</li><li>RedisCacheManager：一个Spring Cache的缓存管理器，可以将数据存储在Redis中，提高访问效率。</li><li>RedisMessageListenerContainer：一个Redis消息监听容器，可以监听Redis中的消息，实现发布-订阅模式。</li><li>RedisConnectionFactory：一个Redis连接工厂，用于创建Redis连接。它可以自动集成Spring Boot中的连接池（如JedisPool、LettuceConnectionPool等）。</li></ol><p>在进行Redis开发时，我们只需要注入相应的RedisTemplate或RedisRepository即可使用Redis的各种功能。</p><p>总结：</p><p>spring-boot-starter-data-redis是Spring Boot中的一个Redis相关的依赖，它提供了与Redis交互的各种功能和工具，包括RedisTemplate、RedisRepository、RedisCacheManager、RedisMessageListenerContainer等。在进行Redis开发时，只需要注入相应的组件即可使用Redis的各种功能。</p><p>Redis是一个高速缓存数据库，是一种key-value（键值对）形式的存储系统，非关系型数据库。<br>Redis的数据 是放在内存里的，所以读写会很快，Redis才能实现持久化（两种实现方式）<br>redis的用处<br>1.用作缓存，优点（1.可以减轻数据库压力 2.可以提高查询效率）<br>2.点赞数，访问量<br>3.鉴权，cookie和session<br>登陆成功后，将对应的可以和value放到redis里，下次如果再进来，先访问redis，如果说key存在，说明登陆过，鉴权通过了，如果key不存在，说明鉴权失败，去重新登陆。</p><h2 id="redisson分布式锁"><a href="#redisson分布式锁" class="headerlink" title="redisson分布式锁"></a>redisson分布式锁</h2><p>Redisson是基于Redis实现的分布式Java对象和服务框架，提供了分布式锁、分布式集合、分布式对象等功能，是一个很好的分布式应用开发工具。在使用Redisson时，可以通过添加Maven或Gradle依赖来集成到Spring Boot项目中。</p><p>例如，在Maven项目中，可以添加如下依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- redisson分布式锁 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;redisson-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.16.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在Gradle项目中，可以添加如下依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;org.redisson:redisson-spring-boot-starter:3.14.1&#x27;</span><br></pre></td></tr></table></figure><p>通过添加这个依赖，我们可以很容易地使用Redisson提供的分布式锁、分布式集合等功能，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 获取分布式锁</span><br><span class="line">RLock lock = redissonClient.getLock(&quot;myLock&quot;);</span><br><span class="line">lock.lock();</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    // 执行业务逻辑</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 获取分布式集合</span><br><span class="line">RSet&lt;String&gt; set = redissonClient.getSet(&quot;mySet&quot;);</span><br><span class="line">set.add(&quot;value1&quot;);</span><br><span class="line">set.add(&quot;value2&quot;);</span><br></pre></td></tr></table></figure><p>需要注意的是，在使用Redisson时，需要配置相应的Redis连接信息，例如Redis的host、port等，可以通过在配置文件（如application.yml或application.properties）中添加如下配置来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br></pre></td></tr></table></figure><p>总结：</p><p>Redisson是基于Redis实现的分布式Java对象和服务框架，提供了分布式锁、分布式集合等功能，可以通过添加Maven或Gradle依赖来集成到Spring Boot项目中。在使用Redisson时，需要配置相应的Redis连接信息。</p><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><p>application.properties是Spring Boot中的一个配置文件，用于存储应用程序的配置信息，包括服务器端口、数据库连接、日志级别等。它采用key&#x3D;value的格式，比YAML文件更易学习，但也比较冗长。</p><p>application.properties文件通常存放在src&#x2F;main&#x2F;resources目录下。它的主要作用是为应用程序提供默认的配置信息，开发人员可以在其中指定应用程序所需的任何配置。在Spring Boot应用程序中，我们可以使用@ConfigurationProperties注解将配置文件的属性映射为Java对象的属性，从而更方便地进行读取和操作。</p><p>总结：</p><p>application.properties是Spring Boot中的一个配置文件，用于存储应用程序的配置信息，采用key&#x3D;value的格式，便于开发人员进行配置。它可以在Spring Boot应用程序中使用@ConfigurationProperties注解映射成Java对象，方便读取和操作。配置文件的作用是为应用程序提供默认的配置信息，使得应用程序在启动时可以使用这些配置信息。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">spring.datasource.url</span> <span class="string">=</span> <span class="string">jdbc:mysql://localhost:3306/数据库名称?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">        <span class="string">spring.datasource.username</span> <span class="string">=</span> <span class="string">root</span></span><br><span class="line">        <span class="string">spring.datasource.password</span> <span class="string">=</span> <span class="string">root</span></span><br><span class="line">        <span class="string">spring.datasource.driverClassName</span> <span class="string">=</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="string">server.port=8080</span> <span class="comment">#项目启动后的端口号，springboot自带tomcat容器</span></span><br></pre></td></tr></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><p>application.yml是Spring Boot中的一个配置文件，用于存储应用程序的配置信息，包括服务器端口、数据库连接、日志级别等。它采用YAML语法，比传统的.properties文件更易读、易写。</p><p>application.yml文件通常存放在src&#x2F;main&#x2F;resources目录下。它的主要作用是为应用程序提供默认的配置信息，开发人员可以在其中指定应用程序所需的任何配置。在Spring Boot应用程序中，我们可以使用@ConfigurationProperties注解将配置文件的属性映射为Java对象的属性，从而更方便地进行读取和操作。</p><p>总结：</p><p>application.yml是Spring Boot中的一个配置文件，用于存储应用程序的配置信息，采用YAML语法，便于开发人员进行配置。它可以在Spring Boot应用程序中使用@ConfigurationProperties注解映射成Java对象，方便读取和操作。配置文件的作用是为应用程序提供默认的配置信息，使得应用程序在启动时可以使用这些配置信息。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">port</span>: <span class="string">8080</span></span><br><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">项目名称</span></span><br><span class="line">  <span class="attr">datasource</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">druid</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">driver-class-name</span>: <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url</span>: <span class="string">jdbc:mysql://localhost:3306/数据库名称?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">      <span class="attr">username</span>: <span class="string">root</span></span><br><span class="line">      <span class="attr">password</span>: <span class="string">root</span></span><br></pre></td></tr></table></figure><h2 id="security安全框架"><a href="#security安全框架" class="headerlink" title="security安全框架"></a>security安全框架</h2><p>Spring Boot提供了一个名为spring-boot-starter-security的依赖，它可以轻松地将安全性集成到Spring Boot应用程序中。它提供了身份验证和授权功能，支持多种身份验证机制，例如基于表单的身份验证、基于HTTP Basic和Digest的身份验证以及OAuth2和OpenID Connect等。它还提供了许多安全功能，例如HTTPS支持、CSRF保护、Session管理、安全事件监听器等。</p><p>以下是spring-boot-starter-security依赖的主要组件：</p><ol><li>Spring Security：Spring Security是一个基于Spring框架的安全框架，提供了身份验证和授权功能。</li><li>Spring Boot Security Starter：Spring Boot的安全启动器，提供了自动配置和默认配置，使得使用Spring Security的安全功能更加简单。</li><li>Security Filter Chain：Spring Security的过滤器链，用于处理HTTP请求并提供身份验证和授权功能。</li><li>Authentication Providers：身份验证提供者，用于验证用户的身份。</li><li>Authorization Providers：授权提供者，用于授权用户访问资源。</li></ol><p>使用spring-boot-starter-security依赖可以轻松地将安全性集成到Spring Boot应用程序中，并且可以选择使用多种身份验证机制和安全功能，提高应用程序的安全性和可靠性。</p><p>以下是一个基于spring-boot-starter-security的例子：</p><ol><li>添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>配置安全性</li></ol><p>在application.properties文件中配置用户凭证和访问权限，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.security.user.name</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">spring.security.user.password</span>=<span class="string">admin123</span></span><br><span class="line"><span class="attr">spring.security.user.roles</span>=<span class="string">admin</span></span><br></pre></td></tr></table></figure><p>这表示只有用户”admin”能够访问应用程序，并且他具有”admin”角色。</p><ol><li>在代码中使用安全性</li></ol><p>在需要保护的方法上添加@Secured注解，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@Secured(&quot;ROLE_ADMIN&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这表示只有具有”ROLE_ADMIN”角色的用户才能调用该方法。</p><p>总结：</p><p>spring-boot-starter-security为Spring Boot提供了安全性支持，可以轻松地将安全性集成到Spring Boot应用程序中，并提供了多种身份验证机制和安全功能，例如HTTPS支持、CSRF保护、Session管理等。使用该依赖可以提高应用程序的安全性和可靠性。</p><h2 id="springboot缓存"><a href="#springboot缓存" class="headerlink" title="springboot缓存"></a>springboot缓存</h2><p>Spring Boot提供了spring-boot-starter-cache依赖，可用于简化缓存配置。它基于Spring框架的Cache抽象，支持多个缓存提供者，例如EhCache、Redis、Guava等。这个Starter提供了自动配置，使得在你创建并注入一个CacheManager的时候，Spring Boot可以自动配置它。这个Starter还提供了几种流行的缓存依赖，你可以选择使用它们。</p><p>主要组件：</p><ul><li>spring-context：Spring框架的核心容器</li><li>spring-context-support：支持Spring框架的扩展功能</li><li>spring-beans：Spring框架的Bean容器</li><li>spring-aop：Spring框架的AOP实现</li><li>spring-expression：Spring框架的表达式语言</li><li>spring-cache：Spring框架对Cache的抽象</li><li>cache-api：对统一缓存API的封装</li></ul><p>以下是一个基于spring-boot-starter-cache的例子：</p><ol><li>添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>配置缓存</li></ol><p>在application.properties文件中配置缓存提供者，以EhCache为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.cache.type=ehcache</span><br></pre></td></tr></table></figure><ol><li>在类中使用缓存</li></ol><p>在需要实现缓存的方法上添加@Cacheable注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(&quot;myCache&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMyData</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里实现获取数据的逻辑</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，getMyData方法将被自动缓存，下次调用同样的方法并使用相同的参数将不会触发实际的方法调用，而是直接从缓存中获取结果。如果需要刷新缓存，可以使用@CacheEvict注解。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(&quot;myCache&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMyData</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里实现获取数据的逻辑</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CacheEvict(&quot;myCache&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearCache</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里为空，只是用于清空缓存</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调用clearCache方法时，将清空myCache缓存中的所有内容。</p><p>总结：</p><p>spring-boot-starter-cache为Spring Boot提供了缓存功能的支持，可以简化我们对缓存的配置和使用。缓存提供者可以轻松切换，缓存的使用也非常简单，只需要在需要缓存的方法上添加@Cacheable注解即可。当然，如果需要清空缓存，也可以使用@CacheEvict注解来实现。</p><h2 id="common-pool2"><a href="#common-pool2" class="headerlink" title="common-pool2"></a>common-pool2</h2><p><code>common-pool2</code>是一个通用的对象池组件，提供了复用和管理对象的功能，可以帮助我们优化对象的创建和销毁，从而提高应用程序的性能。</p><p>要在项目中使用<code>common-pool2</code>依赖，可以在pom.xml文件中添加以下依赖关系：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加该依赖后，我们就可以在应用程序中使用对象池功能了。例如，以下代码片段演示了如何使用<code>common-pool2</code>来管理数据库连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPool;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.pool2.impl.GenericObjectPoolConfig;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectionPool</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> GenericObjectPool&lt;Connection&gt; pool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConnectionPool</span><span class="params">(String url, String user, String password)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverManagerConnectionFactory</span>(url, user, password);</span><br><span class="line">        <span class="type">GenericObjectPoolConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericObjectPoolConfig</span>();</span><br><span class="line">        pool = <span class="keyword">new</span> <span class="title class_">GenericObjectPool</span>&lt;&gt;(factory, config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> pool.borrowObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">releaseConnection</span><span class="params">(Connection conn)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        pool.returnObject(conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们通过<code>GenericObjectPool</code>类来创建一个对象池，它包含了一些可配置的属性，例如最大空闲对象数、最大活动对象数等等。我们可以将连接工厂类<code>DriverManagerConnectionFactory</code>设置为对象池中的实例工厂。最后，我们通过<code>borrowObject()</code>方法来获取对象，并通过<code>returnObject()</code>方法将对象放回池中。</p><p>在应用程序中，可以通过以下方式使用连接池中的数据库连接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ConnectionPool</span> <span class="variable">pool</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionPool</span>(<span class="string">&quot;jdbc:mysql://localhost/mydb&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> pool.getConnection();</span><br><span class="line"><span class="comment">// execute queries with connection</span></span><br><span class="line">pool.releaseConnection(conn);</span><br></pre></td></tr></table></figure><p>在这个示例中，我们首先创建一个连接池并设置在应用程序中共享。然后，我们通过<code>getConnection()</code>方法从连接池中获取数据库连接，使用完后通过<code>releaseConnection()</code>方法将连接放回池中。</p><p>使用<code>common-pool2</code>可以很好地管理资源，例如数据库连接、线程等等。它可以帮助我们降低对象创建和销毁的开销，提高应用程序的性能。</p><h2 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h2><p><code>spring-boot-starter-websocket</code>是一个Spring Boot的起步依赖，它将Spring WebSocket模块与一个嵌入式的Tomcat WebSocket支持结合在一起。此外，它还包括了其他支持WebSocket开发的相关工具和依赖关系，例如<code>spring-websocket</code>, <code>spring-messaging</code>等等。</p><p>要在项目中使用<code>spring-boot-starter-websocket</code>依赖，可以在pom.xml文件中添加以下依赖关系：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加该依赖后，Spring Boot应用程序就可以使用WebSocket来实现双向通信了。你可以通过@Controller注释的类来处理WebSocket请求。例如，以下代码片段演示了如何创建一个简单的WebSocket处理程序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSocketController</span> &#123;</span><br><span class="line">    <span class="meta">@MessageMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@SendTo(&quot;/topic/greetings&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Greeting <span class="title function_">greet</span><span class="params">(String message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Greeting</span>(<span class="string">&quot;Hello, &quot;</span> + message + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，当客户端发送一个WebSocket请求到<code>/hello</code>时，<code>greet</code>方法将被调用。然后，处理程序会将响应发送回客户端，并将其广播到所有已经订阅了<code>/topic/greetings</code>的客户端。</p><p>在浏览器端，你可以使用JavaScript来创建WebSocket连接并与WebSocket处理程序进行通信。以下是一个使用jQuery的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080/hello&#x27;</span>);</span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> greeting = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(event.<span class="property">data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(greeting.<span class="property">content</span>);</span><br><span class="line">&#125;;</span><br><span class="line">socket.<span class="title function_">send</span>(<span class="string">&#x27;world&#x27;</span>);</span><br></pre></td></tr></table></figure><p>此会将一个包含字符串”world”的WebSocket消息发送到服务器，并打印从处理程序返回的响应。</p><h2 id="spring-data-jpa"><a href="#spring-data-jpa" class="headerlink" title="spring-data-jpa"></a>spring-data-jpa</h2><p>Spring Data JPA是Spring Framework的一个子项目，用于简化使用JPA进行数据库访问的开发工作。通过Spring Data JPA，我们可以减少大量的样板代码，提高开发效率。要使用Spring Data JPA，需要将其依赖添加到项目中。以下是使用Spring Data JPA的Maven依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-data-jpa&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.5.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>使用Spring Data JPA的示例代码如下：</p><ul><li>定义一个数据实体类：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import javax.persistence.*;</span><br><span class="line"></span><br><span class="line">@Entity</span><br><span class="line">@Table(name = &quot;users&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="line">    private Long id;</span><br><span class="line"></span><br><span class="line">    @Column(nullable = false)</span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    @Column(nullable = false)</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    // getter 和 setter 方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义一个Repository接口：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line">public interface UserRepository extends JpaRepository&lt;User, Long&gt; &#123;</span><br><span class="line">    User findByUsername(String username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用了@Entity和@Table注解来定义一个数据实体类User。在定义Repository时，我们继承了JpaRepository接口，并使用泛型指定了实体类类型和主键类型。在Repository中，我们定义了一个findByUsername()方法，用于根据username字段查询User实体。这里的方法名是根据方法名规则自动生成的，即findBy + 属性名。</p><ul><li>在Service中使用Repository：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    public User findByUsername(String username) &#123;</span><br><span class="line">        return userRepository.findByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public User save(User user) &#123;</span><br><span class="line">        return userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用了@Autowired注解将UserRepository注入到UserService中。在UserService中，我们定义了一个findByUsername()方法和一个save()方法，根据需要调用UserRepository中的方法。由于我们使用了Spring Data JPA，因此可以很方便地使用这些方法对数据库进行访问。</p><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p><font color="#00c4b6" size="5">常用第三方工具依赖</font></p></div><h2 id="hutool依赖"><a href="#hutool依赖" class="headerlink" title="hutool依赖"></a>hutool依赖</h2><p>Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。Hutool的目标是使用一个工具方法代替一段复杂代码，从而最大限度的避免“复制粘贴”代码的问题，彻底改变我们写代码的方式。Hutool是项目中“util”包友好的替代，它节省了开发人员对项目中公用类和公用工具方法的封装时间，使开发专注于业务，同时可以最大限度的避免封装不完善带来的bug。一个Java基础工具类，对文件、流、加密解密、转码、正则、线程、XML等JDK方法进行封装，组成各种Util工具类，同时提供以下组件：也可以根据需求对每个模块单独引入，也可以通过引入<code>hutool-all</code>方式引入所有模块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--hutool--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">5.7</span><span class="number">.17</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">模块</th><th align="left">介绍</th></tr></thead><tbody><tr><td align="left">hutool-aop</td><td align="left">JDK动态代理封装，提供非IOC下的切面支持</td></tr><tr><td align="left">hutool-bloomFilter</td><td align="left">布隆过滤，提供一些Hash算法的布隆过滤</td></tr><tr><td align="left">hutool-cache</td><td align="left">简单缓存实现</td></tr><tr><td align="left">hutool-core</td><td align="left">核心，包括Bean操作、日期、各种Util等</td></tr><tr><td align="left">hutool-cron</td><td align="left">定时任务模块，提供类Crontab表达式的定时任务</td></tr><tr><td align="left">hutool-crypto</td><td align="left">加密解密模块，提供对称、非对称和摘要算法封装</td></tr><tr><td align="left">hutool-db</td><td align="left">JDBC封装后的数据操作，基于ActiveRecord思想</td></tr><tr><td align="left">hutool-dfa</td><td align="left">基于DFA模型的多关键字查找</td></tr><tr><td align="left">hutool-extra</td><td align="left">扩展模块，对第三方封装（模板引擎、邮件、Servlet、二维码、Emoji、FTP、分词等）</td></tr><tr><td align="left">hutool-http</td><td align="left">基于HttpUrlConnection的Http客户端封装</td></tr><tr><td align="left">hutool-log</td><td align="left">自动识别日志实现的日志门面</td></tr><tr><td align="left">hutool-script</td><td align="left">脚本执行封装，例如Javascript</td></tr><tr><td align="left">hutool-setting</td><td align="left">功能更强大的Setting配置文件和Properties封装</td></tr><tr><td align="left">hutool-system</td><td align="left">系统参数调用封装（JVM信息等）</td></tr><tr><td align="left">hutool-json</td><td align="left">JSON实现</td></tr><tr><td align="left">hutool-captcha</td><td align="left">图片验证码实现</td></tr><tr><td align="left">hutool-poi</td><td align="left">针对POI中Excel和Word的封装</td></tr><tr><td align="left">hutool-socket</td><td align="left">基于Java的NIO和AIO的Socket封装</td></tr><tr><td align="left">hutool-jwt</td><td align="left">JSON Web Token (JWT)封装实现</td></tr></tbody></table><p>Hutool的一些使用示例代码如下：</p><ul><li>使用StrUtil工具类进行字符串操作：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line">String str = &quot;  hello, world  &quot;;</span><br><span class="line">System.out.println(StrUtil.trim(str)); // 输出&quot;hello, world&quot;</span><br><span class="line">System.out.println(StrUtil.upperFirst(str)); // 输出&quot;  Hello, world  &quot;</span><br></pre></td></tr></table></figure><ul><li>使用DateUtil工具类进行日期处理：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import cn.hutool.core.date.DateUtil;</span><br><span class="line"></span><br><span class="line">Date now = new Date();</span><br><span class="line">Date tomorrow = DateUtil.offsetDay(now, 1);</span><br><span class="line">System.out.println(now); // 输出当前时间</span><br><span class="line">System.out.println(tomorrow); // 输出明天的这个时间</span><br></pre></td></tr></table></figure><ul><li>使用FileUtil工具类进行文件操作：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import cn.hutool.core.io.FileUtil;</span><br><span class="line"></span><br><span class="line">File file = new File(&quot;/path/to/file.txt&quot;);</span><br><span class="line">String content = &quot;hello, world&quot;;</span><br><span class="line">FileUtil.writeUtf8String(content, file);</span><br></pre></td></tr></table></figure><p>在这些示例中，我们使用了Hutool提供的工具类进行字符串操作、日期处理和文件操作。由于这些工具类提供了许多常用的方法，因此我们可以通过使用这些工具类减少编写样板代码的工作量。</p><h2 id="commons-lang3依赖"><a href="#commons-lang3依赖" class="headerlink" title="commons-lang3依赖"></a>commons-lang3依赖</h2><p>commons-lang3是一个Java语言的通用工具库，提供了许多常用的工具类和方法，例如字符串操作、数组处理、日期处理等等。要使用commons-lang3，需要将其依赖添加到项目中。以下是使用commons-lang3的Maven依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.12</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>commons-lang3的一些使用示例代码如下：</p><ul><li>使用StringUtils工具类进行字符串操作：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;  hello, world  &quot;</span>;</span><br><span class="line">System.out.println(StringUtils.trim(str)); <span class="comment">// 输出&quot;hello, world&quot;</span></span><br><span class="line">System.out.println(StringUtils.upperCase(str)); <span class="comment">// 输出&quot;  HELLO, WORLD  &quot;</span></span><br></pre></td></tr></table></figure><ul><li>使用ArrayUtils工具类进行数组处理：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.ArrayUtils;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>[] array = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] newArray = ArrayUtils.add(array, <span class="number">4</span>);</span><br><span class="line">System.out.println(Arrays.toString(newArray)); <span class="comment">// 输出&quot;[1, 2, 3, 4]&quot;</span></span><br></pre></td></tr></table></figure><ul><li>使用DateUtils工具类进行日期处理：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.time.DateUtils;</span><br><span class="line"></span><br><span class="line"><span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="type">Date</span> <span class="variable">tomorrow</span> <span class="operator">=</span> DateUtils.addDays(now, <span class="number">1</span>);</span><br><span class="line">System.out.println(now); <span class="comment">// 输出当前时间</span></span><br><span class="line">System.out.println(tomorrow); <span class="comment">// 输出明天的这个时间</span></span><br></pre></td></tr></table></figure><p>在这些示例中，我们使用了StringUtils、ArrayUtils和DateUtils等commons-lang3提供的工具类进行字符串操作、数组处理和日期处理。由于这些工具类提供了许多常用的方法，因此我们可以通过使用这些工具类减少编写样板代码的工作量。</p><h2 id="Lombok依赖"><a href="#Lombok依赖" class="headerlink" title="Lombok依赖"></a>Lombok依赖</h2><p>lombok最优秀的就是注解了，一个注解就干掉了很多代码<br>常用的注解:①@Data:直接可以省略了Get、Set方法;②@Slf4j:不需要单独引入日志依赖和配置日志，直接log.info()打印日志</p><p>Lombok是一个Java库，它通过注解方式简化了Java代码的编写。Lombok通过自动生成getter、setter、构造函数等代码来减少样板代码，提高开发效率。要使用Lombok，需要将其依赖添加到项目中。以下是使用Lombok的Maven依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    lombok 依赖 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">&lt;optional&gt;<span class="literal">true</span>&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Lombok的一些注解用法如下：</p><ul><li>@Getter &#x2F; @Setter：自动生成Getter &#x2F; Setter方法。</li><li>@ToString：自动生成toString()方法。</li><li>@EqualsAndHashCode：自动生成equals()和hashCode()方法。</li><li>@AllArgsConstructor &#x2F; @NoArgsConstructor：自动生成带参 &#x2F; 无参构造方法。</li><li>@Data：代替@Getter &#x2F; @Setter, @ToString, @EqualsAndHashCode和有参构造方法，其实就是个组合注解。</li></ul><p>使用Lombok的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(<span class="number">1L</span>);</span><br><span class="line">user.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(user.toString());</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用了@Data、@AllArgsConstructor和@NoArgsConstructor注解来简化User类的定义。由于@Data已经包含了@Getter、@Setter、@ToString和@EqualsAndHashCode，因此我们只需要使用@Data注解即可。此外，由于我们使用了@AllArgsConstructor注解，因此可以在创建User对象时使用带参构造方法。最后，我们使用了自动生成的toString()方法来输出User对象的信息。</p><h2 id="Fastjson依赖"><a href="#Fastjson依赖" class="headerlink" title="Fastjson依赖"></a>Fastjson依赖</h2><p>Fastjson是一个用于Java语言的高性能JSON处理库，支持各种数据格式的转换，同时也提供了多种解析、序列化的方式。要使用Fastjson，需要将其依赖添加到项目中。以下是使用Fastjson的Maven依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">1.2</span><span class="number">.76</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>使用Fastjson将Java对象序列化为JSON字符串的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setId(<span class="number">1</span>);</span><br><span class="line">user.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用了JSON类的toJSONString()方法将User对象序列化为JSON字符串。</p><p>使用Fastjson将JSON字符串反序列化为Java对象的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;id\&quot;:1,\&quot;username\&quot;:\&quot;admin\&quot;,\&quot;password\&quot;:\&quot;123456\&quot;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> JSON.parseObject(json, User.class);</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用了JSON类的parseObject()方法将JSON字符串反序列化为User对象。需要注意的是，第二个参数指定了反序列化的目标对象类型。</p><h2 id="java图形验证码"><a href="#java图形验证码" class="headerlink" title="java图形验证码"></a>java图形验证码</h2><p>easy-captcha 是一个基于Java的验证码库，可以快速生成各种类型的验证码。要使用easy-captcha，需要将其依赖添加到项目中。以下是使用easy-captcha的Maven依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.yingzhuo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;easy-captcha&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.7</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>使用easy-captcha生成验证码的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.wf.captcha.utils.CaptchaUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成中文验证码</span></span><br><span class="line">CaptchaUtil.out(<span class="number">130</span>, <span class="number">48</span>, <span class="number">4</span>, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成算术验证码</span></span><br><span class="line">CaptchaUtil.outArithmetic(<span class="number">130</span>, <span class="number">48</span>, <span class="number">4</span>, response);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成gif动画验证码</span></span><br><span class="line">CaptchaUtil.outGif(<span class="number">130</span>, <span class="number">48</span>, <span class="number">4</span>, response);</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用了CaptchaUtil类的out()、outArithmetic()和outGif()方法分别生成中文验证码、算术验证码和gif动画验证码。</p><p>使用easy-captcha验证验证码的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> com.wf.captcha.utils.CaptchaUtil;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> CaptchaUtil.ver(code, request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result) &#123;</span><br><span class="line">    <span class="comment">// 验证通过</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 验证失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用CaptchaUtil类的ver()方法验证用户输入的验证码是否正确。如果验证通过，将返回true；否则，将返回false。</p><h2 id="JWT依赖"><a href="#JWT依赖" class="headerlink" title="JWT依赖"></a>JWT依赖</h2><p>JJWT（Java JWT）是一个开源的Java库，用于生成、解析和验证JSON Web Tokens（JWT）。在用户注册或登录后，我们想记录用户的登录状态，或者为用户创建身份认证的凭证。我们不再使用Session认证机制，而使用Json Web Token认证机制。要使用JJWT，需要将其依赖添加到项目中。以下是使用JJWT实现JWT的Maven依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--jwt（JSON Web Token 依赖）--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">0.9</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>使用JJWT生成JWT的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> <span class="string">&quot;mySecretKey&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">        .setSubject(<span class="string">&quot;user123&quot;</span>)</span><br><span class="line">        .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">3600000</span>))</span><br><span class="line">        .signWith(SignatureAlgorithm.HS256, secretKey.getBytes())</span><br><span class="line">        .compact();</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用Jwts.builder()方法创建一个JWT生成器，然后设置了一些声明（例如，Subject和Expiration），并使用signWith()方法设置JWT的签名算法和密钥。</p><p>使用JJWT验证JWT的示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.security.Keys;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> ... <span class="comment">// [从请求中获取JWT]</span></span><br><span class="line"><span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> <span class="string">&quot;mySecretKey&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">            .setSigningKey(secretKey.getBytes())</span><br><span class="line">            .parseClaimsJws(jwt)</span><br><span class="line">            .getBody();</span><br><span class="line">    <span class="comment">// 验证通过，可以使用claims中的声明</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="comment">// 验证失败，无法信任该JWT</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个示例中，我们使用Jwts.parser()方法创建一个JWT解析器，然后使用setSigningKey()方法设置JWT的密钥，并使用parseClaimsJws()方法解析JWT。如果验证成功，将返回一个Claims对象，其中包含了JWT中的声明。如果验证失败，将抛出JwtException异常。</p><h2 id="定时任务Quartz"><a href="#定时任务Quartz" class="headerlink" title="定时任务Quartz"></a>定时任务Quartz</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- SpringBoot 整合 Quartz 定时任务 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-quartz&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.3</span><span class="number">.5</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p><font color="#00c4b6" size="5">辅助类工具依赖</font></p></div><h2 id="swagger-ui"><a href="#swagger-ui" class="headerlink" title="swagger-ui"></a>swagger-ui</h2><div class="tabs" id="swagger-ui"><ul class="nav-tabs no-default"><button type="button" class="tab " data-href="swagger-ui-1"><i class="fas fa-pencil"></i>说明</button><button type="button" class="tab " data-href="swagger-ui-2"><i class="fas fa-key"></i>依赖</button><button type="button" class="tab " data-href="swagger-ui-3"><i class="fas fa-leaf"></i>配置类</button></ul><div class="tab-contents"><div class="tab-item-content" id="swagger-ui-1"><p>Swagger是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。是一个实现了OpenAPI(OpenAPI Specification)规范的工具集。OpenAPI是Linux基金会的一个项目，试图通过定义一种用来描述API格式或API定义的语言，来规范RESTful服务开发过程。<br>Swagger大大方便了前后端开发人员，用过的人都说好。启动项目后访问：localhost:8080&#x2F;swagger-ui.html，就能看到生成的文档了，很是简单。</p><details class="folding-tag" ><summary> <font size=4 color=black>使用SwaggerAPI的步骤</font> </summary>              <div class='content'>              <p>1.添加Swagger依赖<br>2.添加配置:新建一个config包，写配置类,加入api注解，在controller类上面,每个方法上加入@ApiOperation注解，生成对应api<br>3.在线测试接口:重启项目打开网页进入访问地址(<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a>)</p>              </div>            </details><details class="folding-tag" ><summary> <font size=4 color=black>常用注解</font> </summary>              <div class='content'>              <p>@Api：修饰整个类，描述Controller的作用<br>@ApiOperation：描述一个类的一个方法，或者说一个接口<br>@ApiParam：单个参数描述<br>@ApiModel：用对象来接收参数<br>@ApiProperty：用对象接收参数时，描述对象的一个字段<br>@ApiResponse：HTTP响应其中1个描述<br>@ApiResponses：HTTP响应整体描述<br>@ApiIgnore：使用该注解忽略这个API<br>@ApiError ：发生错误返回的信息<br>@ApiImplicitParam：一个请求参数<br>@ApiImplicitParams：多个请求参数</p>              </div>            </details></div><div class="tab-item-content" id="swagger-ui-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--添加swagger的依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.7</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.7</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div><div class="tab-item-content" id="swagger-ui-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示这个类是一个配置类,会把这个类注入到ioc容器中</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//开启swagger2的功能</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里一定要标注你控制器的位置</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.qiu.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;Thymeleaf测试&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;SpringBoot整合Thymeleaf测试&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;https://angegit.gitee.io/myblog/&quot;</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;niechangan&quot;</span>,<span class="string">&quot;https://angegit.gitee.io/myblog/&quot;</span>,<span class="string">&quot;1351261434@qq.com&quot;</span>))</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="扫描xml文件"><a href="#扫描xml文件" class="headerlink" title="扫描xml文件"></a>扫描xml文件</h2><p>当xml文件不在resource目录下的mapper目录时，可以使用下面的代码添加到pom.xml文件中配置springboot下面扫描到mapper对应的xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在application.yml配置文件里添加下面的代码，配置扫描xml文件的路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/guangzai/edu/mapper/xml/*.xml</span></span><br></pre></td></tr></table></figure><h2 id="手机短信依赖"><a href="#手机短信依赖" class="headerlink" title="手机短信依赖"></a>手机短信依赖</h2><p>Spring Boot提供了许多发送手机短信的依赖，最常用的是阿里云短信SDK和腾讯云短信SDK。你需要根据自己使用的短信服务商选择相应的依赖。</p><ol><li>阿里云短信SDK依赖</li></ol><p>Maven:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aliyun-java-sdk-sms&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.aliyun&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Gradle:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;com.aliyun:aliyun-java-sdk-sms:1.1.0&#x27;</span><br></pre></td></tr></table></figure><ol><li>腾讯云短信SDK依赖</li></ol><p>Maven:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.tencentcloudapi&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;tencentcloud-sdk-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.0.52&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Gradle:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation &#x27;com.tencentcloudapi:tencentcloud-sdk-java:3.0.52&#x27;</span><br></pre></td></tr></table></figure><p>注意：使用腾讯云短信SDK需要在代码中配置密钥和签名，具体请参考腾讯云短信SDK的文档。</p><p>使用以上依赖后，你需要在代码中配置短信服务的相关信息，例如阿里云短信SDK需要配置Access Key和Access Secret，腾讯云短信SDK需要配置SecretId和SecretKey等。具体可参考对应SDK的文档。之后，你就可以使用相应的API发送手机短信了。</p><h2 id="HttpClient依赖"><a href="#HttpClient依赖" class="headerlink" title="HttpClient依赖"></a>HttpClient依赖</h2><p>HttpClient是Apache提供的一个Java开发的HTTP客户端库，用于发送HTTP请求和处理HTTP响应，可通过Maven或Gradle来引入相关依赖。以下是引入HttpClient的示例：</p><p>Maven:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.httpcomponents&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;httpclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.5.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Gradle:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;org.apache.httpcomponents:httpclient:4.5.13&#x27;</span></span><br></pre></td></tr></table></figure><p>其中，groupId为org.apache.httpcomponents，artifactId为httpclient，version为具体的版本号。</p><p>使用以上依赖后，在Java代码中可直接使用HttpClient相关的API发送HTTP请求和处理HTTP响应。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建HttpClient对象</span></span><br><span class="line"><span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClientBuilder.create().build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建HttpGet请求</span></span><br><span class="line"><span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送请求，获取响应</span></span><br><span class="line"><span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理响应</span></span><br><span class="line"><span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> EntityUtils.toString(entity);</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭响应和HttpClient</span></span><br><span class="line">response.close();</span><br><span class="line">httpClient.close();</span><br></pre></td></tr></table></figure><p>上面的示例通过HttpClient发送了一个HTTP GET请求，并打印了响应结果。其中，HttpGet是请求对象，CloseableHttpResponse是响应对象，HttpEntity是响应主体的封装对象。</p><h2 id="Gson依赖"><a href="#Gson依赖" class="headerlink" title="Gson依赖"></a>Gson依赖</h2><p>Gson是Google开发的一个Java库，用于将Java对象与JSON数据进行序列化和反序列化，可通过Maven或 Gradle来引入相关依赖。以下是引入Gson的示例：</p><p>Maven:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--gson--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;gson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.8</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Gradle:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.google.code.gson:gson:2.8.2&#x27;</span></span><br></pre></td></tr></table></figure><p>其中，groupId为com.google.code. gson，artifactId为gson，version为具体的版本号。</p><p>使用以上依赖后，在Java代码中可直接使用Gson相关的API进行JSON的序列化和反序列化操作。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将Java对象转换为JSON格式字符串</span></span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> gson.toJson(object);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将JSON格式字符串转换为Java对象</span></span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> gson.fromJson(json, Object.class);</span><br></pre></td></tr></table></figure><h2 id="nacos依赖"><a href="#nacos依赖" class="headerlink" title="nacos依赖"></a>nacos依赖</h2><p>Nacos（Naming and Configuration Service）是一个开源的动态服务注册、配置和服务发现平台，用于简化微服务架构中的服务管理和运维工作。</p><p>在Java项目中使用Nacos需要引入以下依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.2</span><span class="number">.0</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.2</span><span class="number">.0</span>.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>其中，spring-cloud-starter-alibaba-nacos-config用于Nacos配置中心的集成，spring-cloud-starter-alibaba-nacos-discovery用于Nacos服务注册和发现的集成。</p><p>这些依赖都是基于SpringCloud的，因此需要先引入SpringCloud的依赖，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;Hoxton.SR10&lt;/version&gt;</span><br><span class="line">    &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">    &lt;scope&gt;<span class="keyword">import</span>&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>需要注意的是，Nacos目前支持的SpringCloud版本是Hoxton及之后的版本，因此需要确保引入的SpringCloud版本符合要求。</p>]]></content>
    
    
    <summary type="html">SpringBoot项目常用的pom.xml依赖</summary>
    
    
    
    <category term="springboot" scheme="https://blog.ydg.icu/categories/springboot/"/>
    
    
    <category term="springboot" scheme="https://blog.ydg.icu/tags/springboot/"/>
    
    <category term="xml" scheme="https://blog.ydg.icu/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>Java Tool</title>
    <link href="https://blog.ydg.icu/2022/11/11/Java%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>https://blog.ydg.icu/2022/11/11/Java%E9%A1%B9%E7%9B%AE%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</id>
    <published>2022-11-10T16:00:00.000Z</published>
    <updated>2023-11-12T06:04:35.556Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>Java项目常用的工具类<br>主要是收集常用的Java项目工具类,减少写不必要的代码,专注写业务逻辑方面的代码</p></div><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p><font color="#00c4b6" size="5">生成随机数验证码(4-6位)工具类</font></p></div><h2 id="随机数验证码"><a href="#随机数验证码" class="headerlink" title="随机数验证码"></a>随机数验证码</h2><div class="tabs" id="java随机数验证码"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="java随机数验证码-1"><i class="fas fa-key"></i>说明</button><button type="button" class="tab " data-href="java随机数验证码-2"><i class="fas fa-paper-plane"></i>代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="java随机数验证码-1"><p><strong>十分简单的生成随机数验证码（4-6位），只包括数字和字母（大小写），原理很简单，定义两个String类型的字符串，一个是包括字母数字，另一个是空字符串，然后利用Random工具类再结合循环遍历添加指定多少个字符来生成随机验证码</strong></p></div><div class="tab-item-content" id="java随机数验证码-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerifyCodeTool</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成发送验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createVerifyCode</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;</span><br><span class="line">        <span class="comment">//随机数生成验证码</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//遍历循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> r.nextInt(data.length());</span><br><span class="line">            code += data.charAt(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p><font color="#00c4b6" size="5">邮箱工具类</font></p></div><h2 id="邮箱验证码"><a href="#邮箱验证码" class="headerlink" title="邮箱验证码"></a>邮箱验证码</h2><div class="tabs" id="邮箱工具类"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="邮箱工具类-1"><i class="fas fa-key"></i>说明</button><button type="button" class="tab " data-href="邮箱工具类-2"><i class="fas fa-paper-plane"></i>代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="邮箱工具类-1"><p><strong>之前学习瑞吉外卖项目时,登录移动端用户时实现用邮箱登录代替了手机号验证码登录(主要是邮箱不用钱😂)，但最重要还是图方便，因为手机验证码登录要去阿里云注册账号申请等一系列操作，很费时间，但并不代表手机验证码登录不重要，仍然还是要学习这个的，毕竟真实的项目中肯定用手机验证码登录的多，目前我还没有看见用邮箱登录的😂<br><span class='p red'>注意:</span>该工具类用于发送邮箱验证码来实现登录，首先你的邮箱要开启SMTP服务才行(在邮箱首页设置账号那里开启，会获得一个16位SMTP口令，把这个口令填写在工具类相应的位置里)，然后在maven项目中导入邮箱依赖，最后填写好相应的参数就可以直接使用了</strong></p></div><div class="tab-item-content" id="邮箱工具类-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailUtils</span> &#123;</span><br><span class="line">    <span class="comment">// 发送邮件验证码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendTestMail</span><span class="params">(String email, String code)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">// 1.创建Properties 类用于记录邮箱的一些属性</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">pros</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 1.1 表示SMTP发送邮件，必须进行身份验证</span></span><br><span class="line">        pros.put(<span class="string">&quot;mail.smtp.auth&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.2 此处填写SMTP服务器</span></span><br><span class="line">        pros.put(<span class="string">&quot;mail.smtp.host&quot;</span>, <span class="string">&quot;smtp.qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.3 端口号，QQ邮箱端口587</span></span><br><span class="line">        pros.put(<span class="string">&quot;mail.smtp.port&quot;</span>, <span class="string">&quot;587&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.4 此处填写，写信人的账号</span></span><br><span class="line">        pros.put(<span class="string">&quot;mail.user&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 1.5 此处填写16位SMTP口令</span></span><br><span class="line">        pros.put(<span class="string">&quot;mail.password&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.构建授权信息，用于进行SMTP进行身份验证</span></span><br><span class="line">        <span class="type">Authenticator</span> <span class="variable">authenticator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Authenticator</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> javax.mail.PasswordAuthentication <span class="title function_">getPasswordAuthentication</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 2.1 用户名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;mail.user&quot;</span>);</span><br><span class="line">                <span class="comment">// 2.2 16位STMP口令</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> pros.getProperty(<span class="string">&quot;mail.password&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">javax</span>.mail.PasswordAuthentication(userName, password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.使用环境属性和授权信息，创建邮件会话</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">mailSession</span> <span class="operator">=</span> Session.getInstance(pros, authenticator);</span><br><span class="line">        <span class="comment">// 4.创建邮件消息对象</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessage</span>(mailSession);</span><br><span class="line">        <span class="comment">// 4.1 设置发件人</span></span><br><span class="line">        <span class="type">InternetAddress</span> <span class="variable">from</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(pros.getProperty(<span class="string">&quot;mail.user&quot;</span>));</span><br><span class="line">        message.setFrom(from);</span><br><span class="line">        <span class="comment">// 4.2 设置收件人</span></span><br><span class="line">        <span class="type">InternetAddress</span> <span class="variable">to</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(email);</span><br><span class="line">        message.setRecipient(Message.RecipientType.TO, to);</span><br><span class="line">        <span class="comment">// 4.3 设置邮件标题</span></span><br><span class="line">        message.setSubject(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.4 设置邮件的正文</span></span><br><span class="line">        message.setContent(<span class="string">&quot;&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 5.最后，发送邮件</span></span><br><span class="line">        Transport.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取六位随机验证码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 由于数字 1 、 0 和字母 O 、l 有时分不清楚，所以，没有数字 1 、 0</span></span><br><span class="line">        String[] beforeShuffle = &#123;<span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>,</span><br><span class="line">                <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;a&quot;</span>,</span><br><span class="line">                <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>,</span><br><span class="line">                <span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">// 将数组转换成集合</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(beforeShuffle);</span><br><span class="line">        <span class="comment">// 打乱集合顺序，以达到随机的效果</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        <span class="comment">// 创建StringBuilder，不是线程安全的</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 将集合转变成StringBuilder字符串</span></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            sb.append(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回sb字符串中第10~17位的5位验证码，这个区间其实随便设的</span></span><br><span class="line">        <span class="keyword">return</span> sb.substring(<span class="number">10</span>, <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p><font color="#00c4b6" size="5">springboot静态资源映射工具类</font></p></div><h2 id="静态资源映射"><a href="#静态资源映射" class="headerlink" title="静态资源映射"></a>静态资源映射</h2><div class="tabs" id="静态资源映射工具类"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="静态资源映射工具类-1"><i class="fas fa-key"></i>说明</button><button type="button" class="tab " data-href="静态资源映射工具类-2"><i class="fas fa-paper-plane"></i>代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="静态资源映射工具类-1"><p><strong>配置springboot项目Tomcat服务器访问静态资源(html&#x2F;css&#x2F;js&#x2F;…)</strong></p></div><div class="tab-item-content" id="静态资源映射工具类-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry 注册表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@methodName</span> 添加资源处理程序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> 静态资源映射</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行静态资源映射...&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 其中&quot;classpath:&quot;表示目录Resource的路径,一般来说都是映射该目录下的资源</span></span><br><span class="line"><span class="comment">      * 例如:以下就是映射到Resource目录下的front目录下的所有资源</span></span><br><span class="line"><span class="comment">      * registry.addResourceHandler(&quot;/front/**&quot;).addResourceLocations(&quot;classpath:/front/&quot;);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;&quot;</span>).addResourceLocations(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;&quot;</span>).addResourceLocations(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> converters 转换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@methodName</span> 扩展消息转换器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="comment">//创建信息转换对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//设置对象转换器,底层使用JackSon将Java对象转为json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//将上面的信息转换器追加到mvc框架的转换器集合中</span></span><br><span class="line">        converters.add(<span class="number">0</span>, messageConverter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><div class="note green icon-padding flat"><i class="note-icon fas fa-fan"></i><p><font color="#00c4b6" size="5">基于Jackson将Java对象和json互转工具类</font></p></div><h2 id="Date序列化和反序列化"><a href="#Date序列化和反序列化" class="headerlink" title="Date序列化和反序列化"></a>Date序列化和反序列化</h2><div class="tabs" id="java转换工具类"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="java转换工具类-1"><i class="fas fa-key"></i>说明</button><button type="button" class="tab " data-href="java转换工具类-2"><i class="fas fa-paper-plane"></i>代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="java转换工具类-1"><p><strong>常用于存储和取出数据库Date字段的时候,进行序列化和反序列化，实现两个不同的对象进行互转</strong></p></div><div class="tab-item-content" id="java转换工具类-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象映射器:基于jackson将Java对象转为json，或者将json转为Java对象</span></span><br><span class="line"><span class="comment"> * 将JSON解析为Java对象的过程称为 [从JSON反序列化Java对象]</span></span><br><span class="line"><span class="comment"> * 从Java对象生成JSON的过程称为 [序列化Java对象到JSON]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JacksonObjectMapper</span> <span class="keyword">extends</span> <span class="title class_">ObjectMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_DATE_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_TIME_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JacksonObjectMapper</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="comment">//收到未知属性时不报异常</span></span><br><span class="line">        <span class="built_in">this</span>.configure(FAIL_ON_UNKNOWN_PROPERTIES, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化时，属性不存在的兼容处理</span></span><br><span class="line">        <span class="built_in">this</span>.getDeserializationConfig().withoutFeatures(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleModule</span> <span class="variable">simpleModule</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleModule</span>()</span><br><span class="line">                .addDeserializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addDeserializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeDeserializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)))</span><br><span class="line"></span><br><span class="line">                .addSerializer(BigInteger.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(Long.class, ToStringSerializer.instance)</span><br><span class="line">                .addSerializer(LocalDateTime.class, <span class="keyword">new</span> <span class="title class_">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_TIME_FORMAT)))</span><br><span class="line">                .addSerializer(LocalDate.class, <span class="keyword">new</span> <span class="title class_">LocalDateSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_DATE_FORMAT)))</span><br><span class="line">                .addSerializer(LocalTime.class, <span class="keyword">new</span> <span class="title class_">LocalTimeSerializer</span>(DateTimeFormatter.ofPattern(DEFAULT_TIME_FORMAT)));</span><br><span class="line">        <span class="comment">//注册功能模块 例如，可以添加自定义序列化器和反序列化器</span></span><br><span class="line">        <span class="built_in">this</span>.registerModule(simpleModule);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><div class="tabs" id="正则表达式"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="正则表达式-1"><i class="fas fa-key"></i>说明</button><button type="button" class="tab " data-href="正则表达式-2"><i class="fas fa-paper-plane"></i>代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="正则表达式-1"><p><strong>包括手机号、邮箱、密码、验证码的正则表达式验证</strong></p></div><div class="tab-item-content" id="正则表达式-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">RegexPatterns</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号正则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PHONE_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^1([38][0-9]|4[579]|5[0-3,5-9]|6[6]|7[0135678]|9[89])\\d&#123;8&#125;$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱正则</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EMAIL_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码正则。4~32位的字母、数字、下划线</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASSWORD_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^\\w&#123;4,32&#125;$&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证码正则, 6位数字或字母</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VERIFY_CODE_REGEX</span> <span class="operator">=</span> <span class="string">&quot;^[a-zA-Z\\d]&#123;6&#125;$&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div><h3 id="校验正则表达式"><a href="#校验正则表达式" class="headerlink" title="校验正则表达式"></a>校验正则表达式</h3><div class="tabs" id="正则表达式"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="正则表达式-1"><i class="fas fa-key"></i>说明</button><button type="button" class="tab " data-href="正则表达式-2"><i class="fas fa-paper-plane"></i>代码</button></ul><div class="tab-contents"><div class="tab-item-content active" id="正则表达式-1"><p><strong>对手机号、邮箱、验证码进行校验</strong></p></div><div class="tab-item-content" id="正则表达式-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是无效手机格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> phone 要校验的手机号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true:符合，false：不符合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPhoneInvalid</span><span class="params">(String phone)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mismatch(phone, RegexPatterns.PHONE_REGEX);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是无效邮箱格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> email 要校验的邮箱</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true:符合，false：不符合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isEmailInvalid</span><span class="params">(String email)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mismatch(email, RegexPatterns.EMAIL_REGEX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是无效验证码格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 要校验的验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true:符合，false：不符合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isCodeInvalid</span><span class="params">(String code)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mismatch(code, RegexPatterns.VERIFY_CODE_REGEX);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验是否不符合正则格式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">mismatch</span><span class="params">(String str, String regex)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(str)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> !str.matches(regex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="anzhiyufont anzhiyu-icon-arrow-up"></i></button></div></div>]]></content>
    
    
    <summary type="html">Java工具类</summary>
    
    
    
    <category term="java" scheme="https://blog.ydg.icu/categories/java/"/>
    
    <category term="工具" scheme="https://blog.ydg.icu/categories/java/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="java" scheme="https://blog.ydg.icu/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>My Blog</title>
    <link href="https://blog.ydg.icu/2022/08/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>https://blog.ydg.icu/2022/08/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-08-13T16:00:00.000Z</published>
    <updated>2022-12-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="tip home"><p>欢迎来到我的博客!!!</p></div><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2022-08-14</p></div></div><div class='timeline-item-content'><p>今天是个值得纪念的日子<br>在今天我创建了属于自己的博客<br>从今天开始，我骑着我的小、小🚲踏上了博客之旅<br>在我这个博客里主要是记录我自己的一些学习过程和笔记，偶尔可能会更新一些学习之外的博客，例如我的兴趣爱好之类的，目前我还在求学阶段，在学校读书中，更新会很慢<br>对了，今天也是我的生日，祝我自己生日快乐🎂😂，其实这也是我为什么挑选在今天创建博客的原因之一，是不是觉得有点可笑😄<br>最后，若想更加了解我，可以看我的主页哦，有问题，都可以在评论区里说哦，或者加我QQ，也可以发邮件给我哦，我看到了会回复的🍭</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2023-以后</p></div></div><div class='timeline-item-content'><p>往后的日子里，请多多指教！！！</p></div></div></div>]]></content>
    
    
    <summary type="html">我的第一篇博客</summary>
    
    
    
    <category term="博客" scheme="https://blog.ydg.icu/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://blog.ydg.icu/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
